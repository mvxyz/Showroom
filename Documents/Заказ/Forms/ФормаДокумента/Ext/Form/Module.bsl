&НаКлиенте
Перем ФормаВыбораГруппы;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Услуга = Перечисления.ТипыНоменклатуры.Услуга;
	ОтправлятьСразу = ПолучитьФункциональнуюОпцию("ОтправлятьДанныеСразу");
	ТипЦенПоУмолчанию = ПолучитьФункциональнуюОпцию("ТипЦенНоменклатурыМобильногоКлиента");
	ИспользоватьПоУмолчаниюТипЦенДоговора = ПолучитьФункциональнуюОпцию("ИспользоватьПоУмолчаниюТипЦенДоговора");
	
	Если Объект.Ссылка.Пустая()
		ИЛИ НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		Объект.ВалютаДокумента = ОбщиеПроцедурыВызовСервера.ПолучитьВалютуЗаказаПоУмолчанию();
	КонецЕсли;
	
	КоэффициентПересчетаВалютыДокумента = ОбщиеПроцедурыВызовСервера.ПолучитьКоэффициентПересчетаВалюты(Объект.ВалютаДокумента);
	СтарыйКоэффициентПересчетаВалютыДокумента = КоэффициентПересчетаВалютыДокумента;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Объект.Организация = ОбщиеПроцедурыВызовСервера.ПолучитьОсновнуюОрганизацию();
		
		Объект.Контрагент = Параметры.Контрагент;
		
		Объект.ДоговорКонтрагента = Объект.Контрагент.ОсновнойДоговорКонтрагента;
		Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			Объект.ДоговорКонтрагента = Параметры.ДоговорКонтрагента;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			Объект.Организация = Объект.ДоговорКонтрагента.Организация;
		КонецЕсли;
		
		// Установка типа цен
		Объект.ТипЦен = Параметры.ТипЦен;
		Если НЕ ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		  Объект.ТипЦен = ТипЦенПоУмолчанию;
		КонецЕсли;
		
		// Если это создание нового из корзины с переносом товаров
		Если Параметры.Свойство("ТоварыКорзины") Тогда
			ТоварыКорзины.ЗагрузитьЗначения(Параметры.ТоварыКорзины.ВыгрузитьЗначения());
			ЭтоПереносИзКорзиныВНовыйЗаказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// Установка типа цен, если не установлено
	УстановитьТипЦен(ЭтаФорма);

	УстановитьЗаголовокКнопкиТипЦен(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЭтоПереносИзКорзиныВНовыйЗаказ Тогда
	   ЗаполнитьТоварыИзКорзины();
	КонецЕсли;
	
	УстановитьПредставленияТоваров();
	
	УстановитьВидимостьХарактеристик();	
	
	ОбработчикОжиданияУстановитьПодписьКДатеОбновления();
	ПодключитьОбработчикОжидания(
		"ОбработчикОжиданияУстановитьПодписьКДатеОбновления", 60, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если НЕ РеквизитыЗаполнены() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если КонтролироватьОстатки Тогда
		
		Для каждого Стр Из Объект.Товары Цикл
			
			СвободныйОстаток = 0;
			Если НЕ ОбщиеПроцедурыВызовСервера.ОстаткаТовараДостаточно(
				Стр.Номенклатура, 
				Стр.ХарактеристикаНоменклатуры,
				Стр.Количество, Стр.ЕдиницаИзмерения, СвободныйОстаток, Стр.НомерСтроки) Тогда
				
				Отказ = Истина;
				
			КонецЕсли;	
			
		КонецЦикла;
		
		Если Отказ Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю("Документ не записан!");
			Возврат;
		КонецЕсли;

	КонецЕсли;

	ПроводитьНельзя = Ложь;
	ТекстСообщения = "Документ записан, но не проведен!";
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекстСообщения = ТекстСообщения + " Не выбран контрагент.";
		ПроводитьНельзя = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Контрагент)
		И НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ТекстСообщения = ТекстСообщения + " Не выбран договор контрагента.";
		ПроводитьНельзя = Истина;
	КонецЕсли;
	
	Если Объект.Товары.Количество() = 0 Тогда
		ТекстСообщения = ТекстСообщения + " Не выбрано ни одного товара.";
		ПроводитьНельзя = Истина;
	КонецЕсли;
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение 
		И ПроводитьНельзя Тогда
		
		Если Объект.Проведен Тогда
			ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
		Иначе
			ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(ТекстСообщения);

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("КонтролироватьОстатки", КонтролироватьОстатки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если Не ОтправлятьСразу Тогда
		Оповестить("ПоявилисьНеотправленныеДанные");
	КонецЕсли;
	
	ОповеститьОбИзменении(Тип("ДокументСсылка.Заказ"));
	
	Если ОтправлятьСразу Тогда
		Оповестить("ОтправитьЗаказВЦентральнуюБазу", Объект.Ссылка);
	КонецЕсли;
	
	УстановитьПредставленияТоваров();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ВыполненоПодключениеКЦентральнойБазе" Тогда
		ОбменВызовСервера.ВыполнитьДействияПослеПервогоПодключенияКСерверу();
		ПеречитатьНаСервере();

	ИначеЕсли ИмяСобытия = "ВыполненоПолноеУдаление" Тогда
		Закрыть();

	ИначеЕсли ИмяСобытия = "ПоявилисьНеотправленныеДанные" Тогда
		ОбщегоНазначенияВызовСервера.УстановитьЗначениеКонстанты("ЕстьНеотправленныеДанные", Истина);

	ИначеЕсли ИмяСобытия = "ИзмененРежимРаботыПриложения" Тогда
		Закрыть();

	ИначеЕсли ИмяСобытия = "НачатьСинхронизацию" Тогда
		ОтключитьОбработчикОжидания("ОбработчикОжиданияУстановитьПодписьКДатеОбновления");

	ИначеЕсли ИмяСобытия = "ВыполняетсяСинхронизация" Тогда

		Если Не Элементы.ГруппаКнопкаОбновить.ТекущаяСтраница = Элементы.ВПроцессе Тогда
			Элементы.ГруппаКнопкаОбновить.ТекущаяСтраница = Элементы.ВПроцессе;
		КонецЕсли;
		ОписаниеПоследнегоОбновления = Параметр.ОписаниеПоследнегоОбновления;

	ИначеЕсли ИмяСобытия = "СинхронизацияЗавершена" Тогда

		ОбработчикОжиданияУстановитьПодписьКДатеОбновления();
		ПодключитьОбработчикОжидания(
			"ОбработчикОжиданияУстановитьПодписьКДатеОбновления", 60, Ложь);

		// Так нельзя. Зациклится отправка
		//ОповеститьОбИзменении(Тип("ДокументСсылка.Заказ"));
		
		ПеречитатьНаСервере();
		ОбработатьИзменениеРеквизитаШапки();
		Элементы.Товары.Обновить();
		УстановитьЗаголовокКнопкиТипЦен(ЭтаФорма);
		УстановитьПредставленияТоваров();

	ИначеЕсли ИмяСобытия = "ОбновитьДатуСинхронизации" Тогда
		ПеречитатьНаСервере();
		ОбработатьИзменениеРеквизитаШапки();

	КонецЕсли;

	Если Не ИмяСобытия = "ВыполняетсяСинхронизация" Тогда
		ОбменКлиент.УстановитьПодписьКДатеОбновления(
		Элементы, ОписаниеПоследнегоОбновления);
	КонецЕсли;
		
	Если ИмяСобытия = "ВыбранТоварВТекущийЗаказ" И ЗначениеЗаполнено(Параметр) Тогда
		
		ВыбранныйТовар = Параметр;
		
		ТекущийТоварУжеЕстьВЗаказе = ОбщегоНазначенияКлиент.ТекущийТоварУжеЕстьВЗаказе(
												ВыбранныйТовар.Номенклатура, 
												ВыбранныйТовар.ХарактеристикаНоменклатуры, 
												Объект.Товары);
		
		Если ТекущийТоварУжеЕстьВЗаказе Тогда
			Возврат;
		КонецЕсли;
		
		НовСтр = Объект.Товары.Добавить();
		
		ЗаполнитьЗначенияСвойств(НовСтр, ВыбранныйТовар);
		
		Если ВыбранныйТовар.Свойство("Количество") Тогда
			НовСтр.Количество = ВыбранныйТовар.Количество;
		Иначе
			НовСтр.Количество = 1; 
		КонецЕсли;
		
		Элементы["Товары"].ТекущаяСтрока = НовСтр.ПолучитьИдентификатор(); 
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		
		ОбщиеПроцедурыКлиентСервер.РассчитатьЦенуПоКурсуВалюты(
										ТекущиеДанные, 
										Объект.ВалютаДокумента, 
										ВыбранныйТовар.Валюта, 
										СтарыйКоэффициентПересчетаВалютыДокумента);
		
		ОбщиеПроцедурыКлиентСервер.РассчитатьСуммуТабЧасти(ТекущиеДанные);
		
		УстановитьПредставленияТоваров();
		
		УстановитьВидимостьХарактеристик();
		
		ОбновитьИтоги(ЭтаФорма);
		
		Модифицированность = Истина;
		
		
		Если НЕ ЗначениеЗаполнено(ВыбранныйТовар.Цена) Тогда
			
			ТекстСообщения = "Для типа цен '" 
			+ СокрЛП(ВыбранныйТовар.ТипЦен) + "' у товара '" 
			+ СокрЛП(ВыбранныйТовар.Номенклатура) + "' значение цены не установлено!";
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
		ИначеЕсли Объект.ВалютаДокумента <> ВыбранныйТовар.Валюта Тогда

			ТекстСообщения = "Цена товара '" + СокрЛП(ВыбранныйТовар.Номенклатура) 
			+ "' введена в валюте - " + СокрЛП(Объект.ВалютаДокумента);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
	
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Если ВыбранноеЗначение.Свойство("НеЗакрывать") Тогда
			ФормаПодбораОткрыта = ВыбранноеЗначение.НеЗакрывать;
		КонецЕсли;
		
		// На будущее. Если добавим работу с услугами
		//Если ПолучитьТипНоменклатуры(ВыбранноеЗначение.ВидНоменклатуры) = Услуга Тогда
		//	Возврат;
		//Иначе
			ИмяТЧ = "Товары";
		//КонецЕсли;
		
		Если ВыбранноеЗначение.Свойство("ФормаВыбораГруппы") Тогда
			ФормаВыбораГруппы = ВыбранноеЗначение.ФормаВыбораГруппы;  
		КонецЕсли;
		
		ТекущийТоварУжеЕстьВЗаказе = ОбщегоНазначенияКлиент.ТекущийТоварУжеЕстьВЗаказе(
												ВыбранноеЗначение.Номенклатура, 
												ВыбранноеЗначение.ХарактеристикаНоменклатуры, 
												Объект.Товары, Ложь);
		
		Если ТекущийТоварУжеЕстьВЗаказе Тогда
			
			ОбработчикВыбораПользователя = 
			Новый ОписаниеОповещения("ОбработатьРешениеОДобавленииТовараВЗаказ", 
			ЭтотОбъект, ВыбранноеЗначение);
			
			ЗаголовокВопроса = 
			НСтр("ru = 'Внимание!'");
			
			ТекстВопроса = "Товар '" + СокрЛП(ВыбранноеЗначение.Номенклатура)
				+ ?(ЗначениеЗаполнено(ВыбранноеЗначение.ХарактеристикаНоменклатуры), " ("+СокрЛП(ВыбранноеЗначение.ХарактеристикаНоменклатуры)+")","") 
				+ "' уже есть в заказе! Добавить еще?";
			
			ВариантыВыбора = РежимДиалогаВопрос.ДаНет;
			ВариантПоУмолчанию = КодВозвратаДиалога.Нет;
			
			ПоказатьВопрос(ОбработчикВыбораПользователя, ТекстВопроса, ВариантыВыбора,,
			ВариантПоУмолчанию, ЗаголовокВопроса);
			
		Иначе
			
			НовСтр = Объект[ИмяТЧ].Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, ВыбранноеЗначение);
			
			ОбщиеПроцедурыКлиентСервер.РассчитатьЦенуПоКурсуВалюты(НовСтр, Объект.ВалютаДокумента, ВыбранноеЗначение.Валюта, КоэффициентПересчетаВалютыДокумента);
			
			Элементы[ИмяТЧ].ТекущаяСтрока = НовСтр.ПолучитьИдентификатор(); 
			
			ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
			ОбщиеПроцедурыКлиентСервер.РассчитатьСуммуТабЧасти(ТекущиеДанные);
			
			УстановитьПредставленияТоваров();
			
			УстановитьВидимостьХарактеристик();
			
			ОбновитьИтоги(ЭтаФорма);
			
			Модифицированность = Истина;
			
			Если ФормаПодбораОткрыта Тогда
				ТекстСообщения = "Товар '" + НовСтр.Номенклатура + 
				?(ЗначениеЗаполнено(НовСтр.ХарактеристикаНоменклатуры), " " + НовСтр.ХарактеристикаНоменклатуры,"") +  
				"' добавлен в заказ!";
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ТипыЦенНоменклатуры") Тогда
		
		Если Объект.Товары.Количество() <> 0 Тогда
			
			ОбработчикВыбораПользователя = 
			Новый ОписаниеОповещения("ОбработатьРешениеОПересчетеПоТипуЦен", 
									ЭтотОбъект, ВыбранноеЗначение);
			
			ЗаголовокВопроса = 
			НСтр("ru = 'Внимание!'");
			
			ТекстВопроса = "Выполнить пересчет сумм всех товаров по типу цен '" + СокрЛП(ВыбранноеЗначение) + "'. 
			|Пересчитать?";
			
			ВариантыВыбора = РежимДиалогаВопрос.ДаНет;
			ВариантПоУмолчанию = КодВозвратаДиалога.Да;
			
			ПоказатьВопрос(ОбработчикВыбораПользователя, ТекстВопроса, ВариантыВыбора,,
			ВариантПоУмолчанию, ЗаголовокВопроса);
			
		Иначе
			
			Объект.ТипЦен = ВыбранноеЗначение;
			
			УстановитьЗаголовокКнопкиТипЦен(ЭтаФорма);
			
			ТипЦенДоговора = ПолучитьТипЦенДоговораКонтрагента(Объект.ДоговорКонтрагента);
			Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента)
				И ЗначениеЗаполнено(ТипЦенДоговора)
				И ТипЦенДоговора <> Объект.ТипЦен  Тогда
				ТекстСообщения = ТекстСообщенияОНесовпаденииТиповЦен(ТипЦенДоговора, Объект.ТипЦен);
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			КонецЕсли
			
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРешениеОПересчетеПоТипуЦен(ОтветПользователя, ДопПараметры) Экспорт
	
	Если ОтветПользователя = КодВозвратаДиалога.Таймаут Тогда
		Возврат;
	ИначеЕсли ОтветПользователя = КодВозвратаДиалога.Да Тогда
		ПересчитатьПоТипуЦен(ДопПараметры);	
	КонецЕсли;
	
	Объект.ТипЦен = ДопПараметры;
	
	УстановитьЗаголовокКнопкиТипЦен(ЭтаФорма);
	
	УстановитьПредставленияТоваров();
	
	ОбновитьИтоги(ЭтаФорма);
	
	ТипЦенДоговора = ПолучитьТипЦенДоговораКонтрагента(Объект.ДоговорКонтрагента);
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента)
		И ЗначениеЗаполнено(ТипЦенДоговора)
		И ТипЦенДоговора <> Объект.ТипЦен  Тогда
		ТекстСообщения = ТекстСообщенияОНесовпаденииТиповЦен(ТипЦенДоговора, Объект.ТипЦен);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРешениеОДобавленииТовараВЗаказ(ОтветПользователя, ДопПараметры) Экспорт
	
	Если ОтветПользователя = КодВозвратаДиалога.Таймаут 
		Или ОтветПользователя = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТЧ = "Товары";
	
	СтрокиТовара = Объект.Товары.НайтиСтроки(Новый Структура(
		"Номенклатура, ХарактеристикаНоменклатуры", 
		ДопПараметры.Номенклатура, ДопПараметры.ХарактеристикаНоменклатуры));
		
	Если СтрокиТовара.Количество() = 0 Тогда
		Возврат;
	Иначе
		СтрокаТовара = СтрокиТовара[0];
		СтрокаТовара.Количество = СтрокаТовара.Количество + ДопПараметры.Количество;
	КонецЕсли;	
	
	Элементы[ИмяТЧ].ТекущаяСтрока = СтрокаТовара.ПолучитьИдентификатор(); 
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ОбщиеПроцедурыКлиентСервер.РассчитатьСуммуТабЧасти(ТекущиеДанные);
	
	УстановитьПредставленияТоваров();
	
	УстановитьВидимостьХарактеристик();
	
	ОбновитьИтоги(ЭтаФорма);
	
	Модифицированность = Истина;
	
	Если ФормаПодбораОткрыта Тогда
		//ТекстСообщения = "Товар '" + СтрокаТовара.Номенклатура + "' добавлен в заказ!";
		ТекстСообщения = "Добавлено " + ДопПараметры.Количество + " " + 
				СтрокаТовара.ЕдиницаИзмерения + " '" + СтрокаТовара.Номенклатура + 
				?(ЗначениеЗаполнено(СтрокаТовара.ХарактеристикаНоменклатуры), " " + СтрокаТовара.ХарактеристикаНоменклатуры, "") + 
				"' (всего в заказе " + СтрокаТовара.Количество + " " + СтрокаТовара.ЕдиницаИзмерения + ")." ;
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбработатьИзменениеРеквизитаШапки();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ОбработатьИзменениеРеквизитаШапки();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	 ОбработатьИзменениеРеквизитаШапки(Истина);
	 
	 ТипЦенДоговора = ПолучитьТипЦенДоговораКонтрагента(Объект.ДоговорКонтрагента);
	 Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента)
	     И ТипЦенДоговора <> Объект.ТипЦен  Тогда
		 ТекстСообщения = ТекстСообщенияОНесовпаденииТиповЦен(ТипЦенДоговора, Объект.ТипЦен);
		 ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	 КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	Если Объект.Товары.Количество() <> 0 Тогда
		ПересчитатьЦенуПоВалюте();
	КонецЕсли;
	
	ОбновитьИтоги(ЭтаФорма);
	
	УстановитьПредставленияТоваров();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура("НомерСтроки, 
									|Номенклатура,
									|ХарактеристикаНоменклатуры,
									|Цена, 
									|Количество, 
									|ЕдиницаИзмерения,
									|Валюта");
	
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, ТекущиеДанные);
	ПараметрыФормы.Вставить("Валюта", Объект.ВалютаДокумента);
	ПараметрыФормы.Вставить("ТипЦенДокумента", Объект.ТипЦен);

	ОткрытьФорму("Документ.Заказ.Форма.ФормаСтроки", 
				ПараметрыФормы, 
				Элементы.Товары,
				,,, 
				Новый ОписаниеОповещения("ТоварыВыборЗавершение", ЭтотОбъект, ВыбраннаяСтрока),  
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
	  Возврат;
	КонецЕсли;
	
	Элементы.Товары.ТекущаяСтрока = ДополнительныеПараметры;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, Результат);
	
	ОбщиеПроцедурыКлиентСервер.РассчитатьЦенуПоКурсуВалюты(ТекущиеДанные, Объект.ВалютаДокумента, Результат.Валюта, КоэффициентПересчетаВалютыДокумента);

	ОбщиеПроцедурыКлиентСервер.РассчитатьСуммуТабЧасти(ТекущиеДанные);
	
	УстановитьПредставленияТоваров();
	
	ОбновитьИтоги(ЭтаФорма);
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Количество, ЕдиницаИзмерения, Цена, Сумма");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ОбщиеПроцедурыКлиентСервер.РассчитатьСуммуТабЧасти(ДанныеСтрокиТаблицы);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ОбщиеПроцедурыКлиентСервер.РассчитатьСуммуТабЧасти(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ОбщиеПроцедурыКлиентСервер.РассчитатьСуммуТабЧасти(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ОбщиеПроцедурыКлиентСервер.ПриИзмененииСуммыТабЧасти(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	УстановитьПредставленияТоваров();
	
	УстановитьВидимостьХарактеристик();
	
	Модифицированность = Истина;
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтароеЗначениеКоэффициента = ЗначениеКоэффициента(Элементы.Товары.ТекущиеДанные.ЕдиницаИзмерения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
ТекущиеДанные = Элементы.Товары.ТекущиеДанные;	
	
	НовоеЗначениеКоэффициента = ЗначениеКоэффициента(ТекущиеДанные.ЕдиницаИзмерения);
	
	Если НовоеЗначениеКоэффициента <> СтароеЗначениеКоэффициента 
		И СтароеЗначениеКоэффициента > 0 Тогда
		
		ТекущиеДанные.Цена = ТекущиеДанные.Цена * НовоеЗначениеКоэффициента / СтароеЗначениеКоэффициента;
		
	КонецЕсли;
	
	СтароеЗначениеКоэффициента = НовоеЗначениеКоэффициента;
	
	ОбщиеПроцедурыКлиентСервер.РассчитатьСуммуТабЧасти(ТекущиеДанные);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подбор(Команда)
	
	Если ФормаВыбораГруппы <> Неопределено 
		И ФормаВыбораГруппы.Открыта() Тогда
		
		ФормаВыбораГруппы.Открыть();
		
	Иначе
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТипЦен", Объект.ТипЦен);
		ПараметрыФормы.Вставить("КонтролироватьОстатки", КонтролироватьОстатки);
		
		ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаВыбораГруппы", ПараметрыФормы, ЭтаФорма);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоШтрихкоду(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипЦен", Объект.ТипЦен);
	ОткрытьФорму("Справочник.Номенклатура.Форма.ДобавитьПоШтрихкоду", ПараметрыФормы, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаСинхронизировать(Команда)
	
	ОбменКлиент.НачатьСинхронизацию(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Добавить(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЭтоДобавлениеТовараВЗаказ", Истина);
	ПараметрыФормы.Вставить("ТипЦен", Объект.ТипЦен);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаСписка", ПараметрыФормы, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьТипЦен(Команда)
	
	ОткрытьФорму("Справочник.ТипыЦенНоменклатуры.ФормаВыбора",, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПеречитатьНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
	 	ЗначениеВРеквизитФормы(Объект.Ссылка.ПолучитьОбъект(), "Объект");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТипЦенДоговораКонтрагента(ДоговорКонтрагента)
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
	  	Возврат ДоговорКонтрагента.ТипЦен;
	Иначе
	    Возврат Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьВалютуДоговораКонтрагента(ДоговорКонтрагента)
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) 
		И ЗначениеЗаполнено(ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
	  	Возврат ДоговорКонтрагента.ВалютаВзаиморасчетов;
	Иначе
	    Возврат Справочники.Валюты.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)
	
	Форма.Объект.СуммаДокумента = Форма.Объект.Товары.Итог("Сумма");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТипНоменклатуры(ВидНоменклатуры)
	
	Возврат ВидНоменклатуры.ТипНоменклатуры;
	
КонецФункции

&НаКлиенте
Функция РеквизитыЗаполнены()
	
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = "Не заполнена организация!";
		Поле = "Объект.Организация";
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,Поле,,Отказ); 
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		ТекстСообщения = "Не выбран тип цен!";
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,,Отказ); 
	КонецЕсли;
		
	Возврат НЕ Отказ;

КонецФункции

&НаКлиенте
Процедура УстановитьПредставленияТоваров() Экспорт

	Для каждого Стр  Из Объект.Товары Цикл
		
		Стр.Представление = СокрЛП(Стр.Количество) + " " + СокрЛП(Стр.ЕдиницаИзмерения) 
		+ " x " + СокрЛП(Стр.Цена) 
		+ " = " + СокрЛП(Стр.Сумма) + " " + СокрЛП(Объект.ВалютаДокумента);
	
	КонецЦикла;	

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДанныеСтрокТоваров()

	Для каждого Стр Из Объект.Товары Цикл
		
		ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Количество, Цена, Сумма");
		ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, Стр);
		
		ОбщиеПроцедурыКлиентСервер.РассчитатьСуммуТабЧасти(ДанныеСтрокиТаблицы);

		ЗаполнитьЗначенияСвойств(Стр, ДанныеСтрокиТаблицы);
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеРеквизитаШапки(ЭтоИзменениеДоговора = Ложь)
	
	Если ЗначениеЗаполнено(Объект.Контрагент) И НЕ ЭтоИзменениеДоговора Тогда
	    Объект.ДоговорКонтрагента = ПолучитьПодходящийДоговорКонтрагента(Объект.Контрагент, 
																		Объект.Организация, 
																		Объект.ВалютаДокумента,
																		Объект.ТипЦен);
	КонецЕсли;
	
	ПересчитатьЦенуПоВалюте();
	
	ПересчитатьДанныеСтрокТоваров();
	
	УстановитьПредставленияТоваров();
	
	УстановитьТипЦен(ЭтаФорма);
		
	УстановитьЗаголовокКнопкиТипЦен(ЭтаФорма);
	
	УстановитьВидимостьХарактеристик();
	
	КоэффициентПересчетаВалютыДокумента = ОбщиеПроцедурыВызовСервера.ПолучитьКоэффициентПересчетаВалюты(Объект.ВалютаДокумента);

	СтарыйКоэффициентПересчетаВалютыДокумента = КоэффициентПересчетаВалютыДокумента;
	
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТипЦен(Форма)
	
	Если ЗначениеЗаполнено(Форма.Объект.ТипЦен) Тогда
		Возврат;
	КонецЕсли;	
		
	Если Форма.ИспользоватьПоУмолчаниюТипЦенДоговора Тогда 
		
		Если ЗначениеЗаполнено(Форма.Объект.ДоговорКонтрагента) Тогда
			Форма.Объект.ТипЦен = ПолучитьТипЦенДоговораКонтрагента(Форма.Объект.ДоговорКонтрагента);	
		КонецЕсли;
		
	Иначе
		
		Форма.Объект.ТипЦен = Форма.ТипЦенПоУмолчанию;
		
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьВидимостьХарактеристик()
	
	ВидимостьХарактеристик = Ложь;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		Для каждого Стр Из Объект.Товары Цикл
			Если ЗначениеЗаполнено(Стр.ХарактеристикаНоменклатуры) Тогда
				ВидимостьХарактеристик = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Элементы.ТоварыХарактеристикаНоменклатуры.Видимость = ВидимостьХарактеристик;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначениеКоэффициента(ЕдиницаИзмерения)
	
	Возврат ЕдиницаИзмерения.Коэффициент;
	
КонецФункции

&НаКлиенте
Процедура ПересчитатьЦенуПоВалюте()
	
	НовыйКоэффициентПересчетаВалюты = ОбщиеПроцедурыВызовСервера.ПолучитьКоэффициентПересчетаВалюты(Объект.ВалютаДокумента);
	
	Если НовыйКоэффициентПересчетаВалюты <> СтарыйКоэффициентПересчетаВалютыДокумента 
		И СтарыйКоэффициентПересчетаВалютыДокумента > 0 Тогда
		
		Для каждого Стр Из Объект.Товары Цикл
			Стр.Цена = Стр.Цена / (НовыйКоэффициентПересчетаВалюты / СтарыйКоэффициентПересчетаВалютыДокумента);
			Стр.Сумма = Стр.Цена * Стр.Количество;
		КонецЦикла;
		
		КоэффициентПересчетаВалютыДокумента = НовыйКоэффициентПересчетаВалюты;
		
		СтарыйКоэффициентПересчетаВалютыДокумента = НовыйКоэффициентПересчетаВалюты;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокКнопкиТипЦен(Форма)
	
	Если ЗначениеЗаполнено(Форма.Объект.ТипЦен) Тогда
	   Форма.Элементы.ВыбратьТипЦен.Заголовок = СокрЛП(Форма.Объект.ТипЦен);
	   Форма.Элементы.ВыбратьТипЦен.ЦветТекста = Новый Цвет;
	Иначе
	   Форма.Элементы.ВыбратьТипЦен.Заголовок = "<Выберите тип цен>";
	   Форма.Элементы.ВыбратьТипЦен.ЦветТекста = Новый Цвет(255,0,0);
   КонецЕсли;
   
КонецПроцедуры

&НаСервере
Процедура ПересчитатьПоТипуЦен(НовыйТипЦен)

	ТоварыТабличнойЧасти = Объект.Товары.Выгрузить(,"НомерСтроки, Номенклатура, ХарактеристикаНоменклатуры");
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЗ.НомерСтроки КАК НомерСтроки,
		|	ТЗ.Номенклатура КАК Номенклатура,
		|	ТЗ.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
		|ПОМЕСТИТЬ втТоварыТЧ
		|ИЗ
		|	&ТЗ КАК ТЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТоварыТЧ.НомерСтроки КАК НомерСтроки,
		|	втТоварыТЧ.Номенклатура КАК Номенклатура,
		|	втТоварыТЧ.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ЦеныНоменклатуры.Цена КАК Цена,
		|	ЦеныНоменклатуры.Валюта КАК Валюта,
		|	ЦеныНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения
		|ИЗ
		|	втТоварыТЧ КАК втТоварыТЧ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
		|		ПО втТоварыТЧ.Номенклатура = ЦеныНоменклатуры.Номенклатура
		|			И втТоварыТЧ.ХарактеристикаНоменклатуры = ЦеныНоменклатуры.ХарактеристикаНоменклатуры
		|ГДЕ
		|	ЦеныНоменклатуры.ТипЦен = &ТипЦен
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	
	Запрос.УстановитьПараметр("ТЗ", ТоварыТабличнойЧасти);
	Запрос.УстановитьПараметр("ТипЦен", НовыйТипЦен);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Для каждого Стр Из Объект.Товары Цикл
			Стр.Цена = 0;			
		    Стр.Сумма = 0;
		КонецЦикла;
		
	    ТекстСообщения = "Для выбранных товаров тип цен '" + 
		СокрЛП(НовыйТипЦен) + "' не установлен!";
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения); 
		Возврат;
		
	КонецЕсли;
	
	ТаблицаСЦенами = РезультатЗапроса.Выгрузить();
	
	Для каждого Стр Из Объект.Товары Цикл
		
		МассивСтрок = ТаблицаСЦенами.НайтиСтроки(Новый Структура("НомерСтроки", Стр.НомерСтроки));
		
		Если МассивСтрок.Количество() = 0 Тогда
			Стр.Цена = 0;
			Стр.Сумма = 0;
			ТекстСообщения = "Для '" + СокрЛП(Стр.Номенклатура) + "' тип цен '" + 
			СокрЛП(НовыйТипЦен) + "' не установлен!";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецЕсли;
		
		СтрокаСЦенами = МассивСтрок[0];
		
		КоэффициентПересчетаВалютыЦены = ОбщиеПроцедурыВызовСервера.ПолучитьКоэффициентПересчетаВалюты(СтрокаСЦенами.Валюта);

		КоэффициентУпаковкиТипаЦены = СтрокаСЦенами.ЕдиницаИзмерения.Коэффициент;
		КоэффициентУпаковкиСтрокиТЧ = Стр.ЕдиницаИзмерения.Коэффициент;
		
		Стр.Цена = СтрокаСЦенами.Цена * (КоэффициентПересчетаВалютыЦены / КоэффициентПересчетаВалютыДокумента) * (КоэффициентУпаковкиСтрокиТЧ / КоэффициентУпаковкиТипаЦены);
		
		Стр.Сумма = Стр.Цена * Стр.Количество;

	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВалютуТипаЦены(ТипЦен)

	 Возврат ТипЦен.ВалютаЦены;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТипЦенПоУмолчанию()
	
	Возврат ПолучитьФункциональнуюОпцию("ТипЦенНоменклатурыМобильногоКлиента");	
	
КонецФункции
 
 // Возвращает подходящий договор контрагента 
 // Если валюта и организация договора совпадает с соотв. реквизитами документа,
 // то возвращется основной договор.
 // В противном случае возвращается первый найденный подходящий.
 // Если подходящего нет, то возвращается пустая ссылка.
 //
 &НаСервереБезКонтекста
 Функция ПолучитьПодходящийДоговорКонтрагента(Контрагент, Организация, ВалютаДокумента, ТипЦен)
	 
	 ОсновнойДоговорКонтрагента = Контрагент.ОсновнойДоговорКонтрагента;
	 
	 Если ОсновнойДоговорКонтрагента.Организация = Организация Тогда
		 
		 ДоговорКонтрагента = ОсновнойДоговорКонтрагента; 	
		 
	 Иначе
		 
		 Запрос = Новый Запрос;
		 Запрос.Текст = 
		 "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		 |	ДоговорыКонтрагентов.Ссылка КАК ДоговорКонтрагента
		 |ИЗ
		 |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		 |ГДЕ
		 |	ДоговорыКонтрагентов.Владелец = &Владелец
		 |	И ДоговорыКонтрагентов.Организация = &Организация
		 |	И НЕ ДоговорыКонтрагентов.ПометкаУдаления";
		 
		 Запрос.УстановитьПараметр("Владелец", Контрагент);
		 Запрос.УстановитьПараметр("Организация", Организация);
		 
		 РезультатЗапроса = Запрос.Выполнить();
		 
		 Если НЕ РезультатЗапроса.Пустой() Тогда
			 
			 Выборка = РезультатЗапроса.Выбрать();
			 Выборка.Следующий();
			 
			 ДоговорКонтрагента = Выборка.ДоговорКонтрагента;
			 
		 Иначе
			 ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		 КонецЕсли;
		 
	 КонецЕсли;
	 
	 Если ЗначениеЗаполнено(ДоговорКонтрагента)
		 И ЗначениеЗаполнено(ДоговорКонтрагента.ТипЦен) // Если тип цен договора не заполнен, то ничего не сообщаем, 
		 И ДоговорКонтрагента.ТипЦен <> ТипЦен  Тогда   // документ в центральной базе проводится успешно.
		 ТекстСообщения = ТекстСообщенияОНесовпаденииТиповЦен(ДоговорКонтрагента.ТипЦен, ТипЦен);
		 ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	 КонецЕсли;
	 
	 Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		 
		 ТекстСообщения = "Не найден подходящий договор для контрагента - " + СокрЛП(Контрагент) 
		 + ", организаци - " + СокрЛП(Организация) 
		 + " и валюты - " + СокрЛП(ВалютаДокумента) + "!"; 
		 ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		 
	 КонецЕсли;
	 
	 Возврат ДоговорКонтрагента;
	 
 КонецФункции

&НаКлиенте
Процедура ЗаполнитьТоварыИзКорзины()
	
	ЕстьДобавленныеСтроки = Ложь;

	ТипЦенДокумента = Объект.ТипЦен;	
	
	Для каждого Элемент Из ТоварыКорзины Цикл
		
		ЭлементНоменклатура = Элемент.Значение.Номенклатура;
		ЭлементХарактеристикаНоменклатуры = Элемент.Значение.ХарактеристикаНоменклатуры;
		ЭлементКоличество = Элемент.Значение.Количество;
		
		ТекущийТоварУжеЕстьВЗаказе = ОбщегоНазначенияКлиент.ТекущийТоварУжеЕстьВЗаказе(ЭлементНоменклатура,ЭлементХарактеристикаНоменклатуры, Объект.Товары);
		Если ТекущийТоварУжеЕстьВЗаказе Тогда
			Элемент.Пометка = Истина;  // Этот товар не будем очищать в корзине
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент.Значение);
		
		ДанныеЦены = ОбщиеПроцедурыВызовСервера.ПолучитьЦенуНоменклатуры(
								НоваяСтрока.Номенклатура,
								ТипЦенДокумента,
								НоваяСтрока.ХарактеристикаНоменклатуры);
								
		НоваяСтрока.Цена = ДанныеЦены.Цена;
						
		//						
		НовоеЗначениеКоэффициента = ЗначениеКоэффициента(НоваяСтрока.ЕдиницаИзмерения);
		СтароеЗначениеКоэффициента = ЗначениеКоэффициента(ДанныеЦены.ЕдиницаИзмерения);
 
		Если НовоеЗначениеКоэффициента <> СтароеЗначениеКоэффициента 
			И СтароеЗначениеКоэффициента > 0 Тогда
			
			НоваяСтрока.Цена = НоваяСтрока.Цена * НовоеЗначениеКоэффициента / СтароеЗначениеКоэффициента;
			
		КонецЕсли;						
		//
		
		КоэффициентПересчетаВалютыИзДанныхЦены = ОбщиеПроцедурыВызовСервера.ПолучитьКоэффициентПересчетаВалюты(ДанныеЦены.Валюта);
		
		Если КоэффициентПересчетаВалютыДокумента <> КоэффициентПересчетаВалютыИзДанныхЦены 
			И КоэффициентПересчетаВалютыДокумента > 0 Тогда
			
			НоваяСтрока.Цена = НоваяСтрока.Цена * КоэффициентПересчетаВалютыИзДанныхЦены / КоэффициентПересчетаВалютыДокумента;
			
		КонецЕсли;
								
		Если НЕ ЗначениеЗаполнено(ДанныеЦены.Цена) Тогда
			ТекстСообщения = "Для типа цен '" + СокрЛП(ТипЦенДокумента) +  
			"' у товара '" + СокрЛП(НоваяСтрока.Номенклатура) +
			"' значение цены не установлено!";
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
						
		ОбщиеПроцедурыКлиентСервер.РассчитатьСуммуТабЧасти(НоваяСтрока);
		
		ЕстьДобавленныеСтроки = Истина;
	
	КонецЦикла;
	
	Если ЕстьДобавленныеСтроки Тогда
		
		Объект.СуммаДокумента = Объект.Товары.Итог("Сумма");
		УстановитьПредставленияТоваров();	
		Модифицированность = Истина;
		
	КонецЕсли;
	
	Оповестить("ВыполненаПопыткаПереносаТоваровИзКорзиныВЗаказ", ТоварыКорзины, ЭтаФорма); 

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВалютуРубли()
	
	Возврат Справочники.Валюты.НайтиПоКоду("643");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстСообщенияОНесовпаденииТиповЦен(ТипЦенДоговора, ТипЦенДокумента)
	
	ТекстСообщения = "Тип цен договора '" + СокрЛП(ТипЦенДоговора)
	+ "' отличается от типа цен документа '" + СокрЛП(ТипЦенДокумента) + "'.";
	
	Возврат ТекстСообщения; 
	
КонецФункции

#Область СлужебныеПроцедурыИФункцииСинхронизация

&НаКлиенте
Процедура ОбработчикОжиданияУстановитьПодписьКДатеОбновления()

	ОбменКлиент.УстановитьПодписьКДатеОбновления(
		Элементы, ОписаниеПоследнегоОбновления);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСинхронизациюНачало() 

	ОтключитьОбработчикОжидания("ОбработчикОжиданияУстановитьПодписьКДатеОбновления");

	ПараметрыЗапуска = Новый Структура();
	ПараметрыЗапуска.Вставить("РежимСинхронизации", "ВыполнитьСинхронизацию");

	Оповестить("НачатьСинхронизацию", ПараметрыЗапуска);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ФормаВыбораГруппы <> Неопределено 
		И ФормаВыбораГруппы.Открыта() Тогда
		
		ФормаВыбораГруппы.Закрыть();
	
	КонецЕсли;
	
	Если ТипЗнч(ВладелецФормы) = Тип("УправляемаяФорма")
		    И ВладелецФормы.ИмяФормы = "Справочник.Номенклатура.Форма.ФормаСписка"
			И ВладелецФормы.Открыта() Тогда
			ВладелецФормы.Закрыть();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункцииСинхронизация

#КонецОбласти
