
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТипЦен = Параметры.ТипЦен;
	
	Если НЕ ЗначениеЗаполнено(ТипЦен) Тогда
		ТипЦен = ПолучитьФункциональнуюОпцию("ТипЦенНоменклатурыМобильногоКлиента");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбработчикОжиданияУстановитьПодписьКДатеОбновления();
	ПодключитьОбработчикОжидания(
		"ОбработчикОжиданияУстановитьПодписьКДатеОбновления", 60, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ВыполненоПодключениеКЦентральнойБазе" Тогда
		ОбменВызовСервера.ВыполнитьДействияПослеПервогоПодключенияКСерверу();

	ИначеЕсли ИмяСобытия = "ВыполненоПолноеУдаление" Тогда

	ИначеЕсли ИмяСобытия = "ПоявилисьНеотправленныеДанные" Тогда
		ОбщегоНазначенияВызовСервера.УстановитьЗначениеКонстанты("ЕстьНеотправленныеДанные", Истина);

	ИначеЕсли ИмяСобытия = "ИзмененРежимРаботыПриложения" Тогда
		Закрыть();

	ИначеЕсли ИмяСобытия = "НачатьСинхронизацию" Тогда
		ОтключитьОбработчикОжидания("ОбработчикОжиданияУстановитьПодписьКДатеОбновления");

	ИначеЕсли ИмяСобытия = "ВыполняетсяСинхронизация" Тогда

		Если Не Элементы.ГруппаКнопкаОбновить.ТекущаяСтраница = Элементы.ВПроцессе Тогда
			Элементы.ГруппаКнопкаОбновить.ТекущаяСтраница = Элементы.ВПроцессе;
		КонецЕсли;
		ОписаниеПоследнегоОбновления = Параметр.ОписаниеПоследнегоОбновления;

	ИначеЕсли ИмяСобытия = "СинхронизацияЗавершена" Тогда

		ОбработчикОжиданияУстановитьПодписьКДатеОбновления();
		ПодключитьОбработчикОжидания(
			"ОбработчикОжиданияУстановитьПодписьКДатеОбновления", 60, Ложь);

	ИначеЕсли ИмяСобытия = "ОбновитьДатуСинхронизации" Тогда

	КонецЕсли;

	Если Не ИмяСобытия = "ВыполняетсяСинхронизация" Тогда
		ОбменКлиент.УстановитьПодписьКДатеОбновления(
			Элементы, ОписаниеПоследнегоОбновления);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НайтиПоШтрихкоду(Команда)
	
	Если НЕ ЗначениеЗаполнено(ШтрихкодСтрока) Тогда
		ТекстСообщения = "Не введен штрихкод";
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"Штрихкод");
		Возврат;
	КонецЕсли;

	ПараметрыФормы = НайтиПоШтрихкодуНаСервере(ШтрихкодСтрока);
	
	Если ЗначениеЗаполнено(ПараметрыФормы) Тогда
		ПараметрыФормы.Вставить("ЭтоДобавлениеТовараВЗаказ", Истина);
		ПараметрыФормы.Вставить("ТипЦен", ТипЦен);
		ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
		Закрыть();
	Иначе
		ТекстСообщения = "Не найдено";
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"Штрихкод");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Сканировать(Команда)
	ОбщегоНазначенияКлиент.ОтсканироватьШтрихкод(Новый ОписаниеОповещения("ОбработатьШтрихкод", ЭтаФорма), ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура Синхронизировать(Команда)
	
	ОбменКлиент.НачатьСинхронизацию(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции 

&НаКлиенте
Процедура ПолученШтрихкод(Штрихкод) Экспорт
	
	ОбработатьШтрихкод(Штрихкод, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкод(Штрихкод, Результат, Сообщение = "", ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат Тогда
		#Если МобильноеПриложениеКлиент ИЛИ МобильныйКлиент Тогда
			СредстваМультимедиа.ЗакрытьСканированиеШтрихКодов();
		#КонецЕсли
		
		ПараметрыФормы = НайтиПоШтрихкодуНаСервере(Штрихкод);
		
		Если ЗначениеЗаполнено(ПараметрыФормы) Тогда
			
			ПараметрыФормы.Вставить("ЭтоДобавлениеТовараВЗаказ", Истина);
			ПараметрыФормы.Вставить("ТипЦен", ТипЦен);
			ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
			
			Закрыть();
			
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не найдено";
			Сообщение.Сообщить();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиПоШтрихкодуНаСервере(Штрихкод)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Штрихкоды.Владелец КАК Номенклатура,
		|	Штрихкоды.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
		|ИЗ
		|	РегистрСведений.Штрихкоды КАК Штрихкоды
		|ГДЕ
		|	Штрихкоды.Штрихкод = &Штрихкод";
	
	Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", Выборка.Номенклатура);
	
	Если ЗначениеЗаполнено(Выборка.ХарактеристикаНоменклатуры) Тогда
		ПараметрыФормы.Вставить("ХарактеристикаОтбор", Выборка.ХарактеристикаНоменклатуры);
	КонецЕсли;
	
	Возврат ПараметрыФормы;
	
КонецФункции

#Область СлужебныеПроцедурыИФункцииСинхронизация

&НаКлиенте
Процедура ОбработчикОжиданияУстановитьПодписьКДатеОбновления()

	ОбменКлиент.УстановитьПодписьКДатеОбновления(
		Элементы, ОписаниеПоследнегоОбновления);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСинхронизациюНачало() 

	ОтключитьОбработчикОжидания("ОбработчикОжиданияУстановитьПодписьКДатеОбновления");

	ПараметрыЗапуска = Новый Структура();
	ПараметрыЗапуска.Вставить("РежимСинхронизации", "ВыполнитьСинхронизацию");

	Оповестить("НачатьСинхронизацию", ПараметрыЗапуска);

КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункцииСинхронизация

#КонецОбласти
