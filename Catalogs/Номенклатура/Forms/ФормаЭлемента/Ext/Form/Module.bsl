#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Элементы.ДекорацияНаименование.Заголовок = СокрЛП(Объект.Наименование)+
	?(ЗначениеЗаполнено(Объект.Артикул), " (арт. " + Объект.Артикул + ")", "");	
	
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ИспользоватьСерииНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	
	ВестиУчетПоХарактеристикам = Объект.ВестиУчетПоХарактеристикам;
	ВестиУчетПоСериям = Объект.ВестиУчетПоСериям;

	ВалютаЦеныВыбор = Справочники.Валюты.НайтиПоКоду("643"); 

	ОпределитьВариантОтображения();
	
	Если ВариантОтображения = 0 ИЛИ ВариантОтображения = 2 Тогда
		СвободныйОстатокВсегоЧисло = ОбщиеПроцедурыВызовСервера.ПолучитьСвободныйОстатокТовара(Объект.Ссылка);
		СвободныйОстатокВсего = ?(СвободныйОстатокВсегоЧисло = 0, "Ноль", СокрЛП(СвободныйОстатокВсегоЧисло));
		Элементы.ЕдиницаИзмерения.Видимость = СвободныйОстатокВсегоЧисло <> 0;
	КонецЕсли;
	
	// Если эта форма открывается из формы поиска или из формы добавления по штрихкоду
	Если Параметры.Свойство("ХарактеристикаОтбор") 
		И ИспользоватьХарактеристикиНоменклатуры
		И ВестиУчетПоХарактеристикам Тогда 
		
		ХарактеристикаОтбор = Параметры.ХарактеристикаОтбор; 
		 
		ОбщегоНазначенияСервер.ДобавитьОтбор(
		СписокХарактеристик.Отбор,
		"Характеристика",
		ХарактеристикаОтбор,
		ВидСравненияКомпоновкиДанных.Равно,
		Истина
		);
	
	КонецЕсли;
	
	ТипЦенПоУмолчанию = ПолучитьФункциональнуюОпцию("ТипЦенНоменклатурыМобильногоКлиента");
	ТипЦен = ТипЦенПоУмолчанию;

	ЭтоДобавлениеТовараВЗаказ = Параметры.ЭтоДобавлениеТовараВЗаказ;
	
	// Если эта форма открывается из формы добавления по штрихкоду или из заказа через форму списка
	Если ЭтоДобавлениеТовараВЗаказ Тогда
		ТипЦенИзПараметров = Параметры.ТипЦен;
		Если НЕ ЗначениеЗаполнено(ТипЦенИзПараметров) Тогда
			ТипЦенИзПараметров = ТипЦенПоУмолчанию; 
		КонецЕсли;
	КонецЕсли;
		
	ХарактеристикаПустаяСсылка = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	СерияПустаяСсылка = Справочники.СерииНоменклатуры.ПустаяСсылка();
	
	ВалютаЦеныВыбор = Справочники.Валюты.НайтиПоКоду("643");
	Если НЕ ЗначениеЗаполнено(ВалютаЦеныВыбор) Тогда
		ВалютаЦеныВыбор = Справочники.Валюты.ПустаяСсылка();
	КонецЕсли;
	
	Элементы.ЗапрашиватьКоличество.Видимость = ЭтоДобавлениеТовараВЗаказ;
	Элементы.ВКорзину.Видимость = НЕ ЭтоДобавлениеТовараВЗаказ;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Подменяем сохраненный в настройках тип цен, на тип цен из параметров
	Если ЭтоДобавлениеТовараВЗаказ Тогда

		Если НЕ ЗначениеЗаполнено(ТипЦен) Тогда
			ТипЦен = ТипЦенПоУмолчанию;
		КонецЕсли;
		
		// Запоминаем тип цен пользователя
		ТипЦенПользователя = ТипЦен;
		
		ТипЦен = ТипЦенИзПараметров;
		
	КонецЕсли;
	
	УстановитьВидимостьПоХарактеристикамИСериям();
	
	ЗаполнитьДанныеЦены();
	
	ЗаполнитьЦенуВВыбраннойВалюте();
	
	// Если эта форма открывается из поля формы, 
	// например из поля формы строки документа Заказ
	Если ТипЗНЧ(ЭтаФорма.ВладелецФормы) = Тип("ПолеФормы") Тогда
		Элементы.ГруппаКнопки.Видимость = Ложь
	КонецЕсли;
	
	ОбработчикОжиданияУстановитьПодписьКДатеОбновления();
	ПодключитьОбработчикОжидания(
		"ОбработчикОжиданияУстановитьПодписьКДатеОбновления", 60, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ВыполненоПодключениеКЦентральнойБазе" Тогда
		ОбменВызовСервера.ВыполнитьДействияПослеПервогоПодключенияКСерверу();
		ПеречитатьНаСервере();
		Элементы.СписокОстатки.Обновить();
		Элементы.СписокХарактеристик.Обновить();
		
	ИначеЕсли ИмяСобытия = "ВыполненоПолноеУдаление" Тогда
		
	ИначеЕсли ИмяСобытия = "ПоявилисьНеотправленныеДанные" Тогда
		ОбщегоНазначенияВызовСервера.УстановитьЗначениеКонстанты("ЕстьНеотправленныеДанные", Истина);
		
	ИначеЕсли ИмяСобытия = "ИзмененРежимРаботыПриложения" Тогда
		Закрыть();
		
	ИначеЕсли ИмяСобытия = "НачатьСинхронизацию" Тогда
		ОтключитьОбработчикОжидания("ОбработчикОжиданияУстановитьПодписьКДатеОбновления");
		
	ИначеЕсли ИмяСобытия = "ВыполняетсяСинхронизация" Тогда
		
		Если Не Элементы.ГруппаКнопкаОбновить.ТекущаяСтраница = Элементы.ВПроцессе Тогда
			Элементы.ГруппаКнопкаОбновить.ТекущаяСтраница = Элементы.ВПроцессе;
		КонецЕсли;
		ОписаниеПоследнегоОбновления = Параметр.ОписаниеПоследнегоОбновления;
		
	ИначеЕсли ИмяСобытия = "СинхронизацияЗавершена" Тогда
		
		ОбработчикОжиданияУстановитьПодписьКДатеОбновления();
		ПодключитьОбработчикОжидания(
		"ОбработчикОжиданияУстановитьПодписьКДатеОбновления", 60, Ложь);
		
		// Обновляем форму
		ПеречитатьНаСервере();
		УстановитьВидимостьПоХарактеристикамИСериям();
		Элементы.СписокОстатки.Обновить();
		Элементы.СписокХарактеристик.Обновить();
		
		ЗаполнитьДанныеЦены();
		
		Если ВариантОтображения = 0 Тогда
			СвободныйОстатокВсего = СокрЛП(ОбщиеПроцедурыВызовСервера.ПолучитьСвободныйОстатокТовара(Объект.Ссылка));
		КонецЕсли;

	ИначеЕсли ИмяСобытия = "ОбновитьДатуСинхронизации" Тогда
		ПеречитатьНаСервере();
		Элементы.СписокОстатки.Обновить();
		Элементы.СписокХарактеристик.Обновить();
		
	КонецЕсли;
	
	Если Не ИмяСобытия = "ВыполняетсяСинхронизация" Тогда
		ОбменКлиент.УстановитьПодписьКДатеОбновления(
		Элементы, ОписаниеПоследнегоОбновления);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// Восстанавливаем тип цен пользователя
	Если ЭтоДобавлениеТовараВЗаказ Тогда
		
		ТипЦен = ТипЦенПользователя;
		
		Если ТипЗнч(ВладелецФормы) = Тип("УправляемаяФорма")
			И ВладелецФормы.ИмяФормы = "Справочник.Номенклатура.Форма.ФормаСписка"
			И ВладелецФормы.Открыта() Тогда
			ВладелецФормы.Закрыть();
		КонецЕсли;

	КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТипЦеныПриИзменении(Элемент)
	
	Если ВариантОтображения = 1 Тогда
		СписокХарактеристик.Параметры.УстановитьЗначениеПараметра("ТипЦен", ТипЦен);
	КонецЕсли;
	
	ЗаполнитьДанныеЦены();
	
	ЗаполнитьЦенуВВыбраннойВалюте();

КонецПроцедуры

&НаКлиенте
Процедура ВалютаЦеныВыборПриИзменении(Элемент)
	ЗаполнитьЦенуВВыбраннойВалюте();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокОстаткиСерий

&НаКлиенте
Процедура СписокОстаткиСерийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	КлючЗаписи = Новый Структура("Склад, Номенклатура, СерияНоменклатуры, Качество");
	ЗаполнитьЗначенияСвойств(КлючЗаписи, Элемент.ТекущиеДанные);
	КлючЗаписи.Вставить("ХарактеристикаНоменклатуры", ХарактеристикаПустаяСсылка);
	МассивКлюча = Новый Массив;
	МассивКлюча.Добавить(КлючЗаписи);
	КлючЗаписиРегистра = Новый("РегистрСведенийКлючЗаписи.ТоварыОстатки", МассивКлюча);
	
	ПараметрыФормы = Новый Структура("Ключ", КлючЗаписиРегистра);
	
	ОткрытьФорму("РегистрСведений.ТоварыОстатки.ФормаЗаписи", ПараметрыФормы, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокОстаткиСерий

&НаКлиенте
Процедура СписокОстаткиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	КлючЗаписи = Новый Структура("Склад, Номенклатура, СерияНоменклатуры, Качество");
	ЗаполнитьЗначенияСвойств(КлючЗаписи, Элемент.ТекущиеДанные);
	КлючЗаписи.Вставить("ХарактеристикаНоменклатуры", ХарактеристикаПустаяСсылка);
	КлючЗаписи.Вставить("СерияНоменклатуры", СерияПустаяСсылка);
	МассивКлюча = Новый Массив;
	МассивКлюча.Добавить(КлючЗаписи);
	КлючЗаписиРегистра = Новый("РегистрСведенийКлючЗаписи.ТоварыОстатки", МассивКлюча);
	
	ПараметрыФормы = Новый Структура("Ключ", КлючЗаписиРегистра);
	
	ОткрытьФорму("РегистрСведений.ТоварыОстатки.ФормаЗаписи", ПараметрыФормы, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СписокХарактеристикВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Номенклатура", Объект.Ссылка);
	ПараметрыФормы.Вставить("ХарактеристикаНоменклатуры", Элемент.ТекущиеДанные.Характеристика);
	ПараметрыФормы.Вставить("ОтображатьСерии", ИспользоватьСерииНоменклатуры И ВестиУчетПоСериям);
	ПараметрыФормы.Вставить("ТипЦены", ТипЦен);
	
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаОстаткиНаСкладах", 
		ПараметрыФормы, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура Синхронизировать(Команда)
	
	ОбменКлиент.НачатьСинхронизацию(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Изображение(Команда)
	
	Если ЗначениеЗаполнено(Объект.Изображение) Тогда
		ПараметрыФормы = Новый Структура("Ключ", Объект.Изображение);
		ОткрытьФорму("Справочник.ХранилищеДополнительнойИнформации.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	Иначе
		ТекстСообщения = "Нет изображения";
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВЗаказ(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ВариантОтображения = 1 И Элементы.СписокХарактеристик.ТекущиеДанные = Неопределено Тогда
		ТекстСообщения = "Не выбран товар!";
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если СвободныйОстатокВсего = "Ноль" Тогда
		
		ТекстСообщения = "Свободный остаток равен нулю";

		Если КонтролироватьОстатки Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения); 
			Возврат;
		Иначе
			ПоказатьОповещениеПользователя(ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыТовара = ПолучитьПараметрыТовара();
	
	Если ЭтоДобавлениеТовараВЗаказ Тогда // Эта форма открыта из формы заказа
		
		Если ЗапрашиватьКоличество Тогда
			
			ПараметрыТовара.Вставить("ТипЦенДокумента", ТипЦен);
			ПараметрыТовара.Вставить("Количество", 1);
			ПараметрыТовара.Вставить("ОткрытаИзФормыТовара", Истина);
			ПараметрыТовара.Вставить("ЗакрыватьПриВыборе", Ложь);
			ПараметрыТовара.Вставить("КонтролироватьОстатки", КонтролироватьОстатки);
			
			ОткрытьФорму("Документ.Заказ.Форма.ФормаСтроки", ПараметрыТовара, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		Иначе
			
			Если КонтролироватьОстатки 
				И НЕ ОбщиеПроцедурыВызовСервера.ОстаткаТовараДостаточно(
				ПараметрыТовара.Номенклатура, 
				ПараметрыТовара.ХарактеристикаНоменклатуры,
				1, ПараметрыТовара.ЕдиницаИзмерения) Тогда
				Возврат;
			КонецЕсли;
			
			Оповестить("ВыбранТоварВТекущийЗаказ", ПараметрыТовара, ЭтаФорма);
			
			ТипЦен = ТипЦенПользователя;
			
			Если ТипЗнч(ВладелецФормы) = Тип("УправляемаяФорма") 
				И ВладелецФормы.Открыта() Тогда
				ВладелецФормы.Закрыть();
			КонецЕсли;
			
			Если ЭтаФорма.Открыта() Тогда
				Закрыть();
			КонецЕсли;
			
		КонецЕсли;
	
	Иначе
		
		Если КонтролироватьОстатки 
			И НЕ ОбщиеПроцедурыВызовСервера.ОстаткаТовараДостаточно(
			ПараметрыТовара.Номенклатура, 
			ПараметрыТовара.ХарактеристикаНоменклатуры,
			1, ПараметрыТовара.ЕдиницаИзмерения) Тогда
			Возврат;
		КонецЕсли;
				
		ПараметрыФормы = Новый Структура("ПараметрыТовара", ПараметрыТовара);
		ОткрытьФорму("Документ.Заказ.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВКорзину(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ВариантОтображения = 1 И Элементы.СписокХарактеристик.ТекущиеДанные = Неопределено Тогда
		ТекстСообщения = "Не выбран товар!";
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если СвободныйОстатокВсего = "Ноль" Тогда
		
		ТекстСообщения = "Свободный остаток равен нулю";
		
		Если КонтролироватьОстатки Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения); 
			Возврат;
		Иначе
			ПоказатьОповещениеПользователя(ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
	Корзина = ОбщиеПроцедурыВызовСервера.ПолучитьКорзину(); 	
	Если Корзина = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыТовара = ПолучитьПараметрыТовара();
	
	Если КонтролироватьОстатки 
		И НЕ ОбщиеПроцедурыВызовСервера.ОстаткаТовараДостаточно(
		ПараметрыТовара.Номенклатура, 
		ПараметрыТовара.ХарактеристикаНоменклатуры,
		1, ПараметрыТовара.ЕдиницаИзмерения) Тогда
		Возврат;
	КонецЕсли;
	
	ФормаКорзина = ОбщегоНазначенияКлиент.ПолучитьФормуКорзина();
	
	Если ФормаКорзина = Неопределено  Тогда
	   Возврат;
	КонецЕсли;
	
	Если ФормаКорзина.Открыта() Тогда
	    ФормаКорзина.Закрыть();
	КонецЕсли;
	
	ОбщиеПроцедурыВызовСервера.ДобавитьТоварВКоризну(ПараметрыТовара);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет реквизит ВариантОтображения
// Возможны три состояния 	0 - нет характеристик и серий
// 							1 - есть характеристики (при этом, есть или нет серии - неважно)
//							2 - нет характеристик, но есть серии
//
&НаСервере
Процедура ОпределитьВариантОтображения()

	Если (НЕ ИспользоватьХарактеристикиНоменклатуры И НЕ ИспользоватьСерииНоменклатуры)
		ИЛИ (НЕ ВестиУчетПоХарактеристикам И НЕ ВестиУчетПоСериям) Тогда
		
		ВариантОтображения = 0;
		
		СвободныйОстатокВсего = СокрЛП(ОбщиеПроцедурыВызовСервера.ПолучитьСвободныйОстатокТовара(Объект.Ссылка));
		
	ИначеЕсли ИспользоватьХарактеристикиНоменклатуры
		И ВестиУчетПоХарактеристикам
		Тогда
		
		ВариантОтображения = 1;	
		
	ИначеЕсли ИспользоватьСерииНоменклатуры И ВестиУчетПоСериям
		И (НЕ ИспользоватьХарактеристикиНоменклатуры ИЛИ НЕ ВестиУчетПоХарактеристикам)  Тогда
		
		ВариантОтображения = 2;
		
	КонецЕсли;

КонецПроцедуры

// Заполняет цену, валюту и ед. изм. в шапке
//
&НаКлиенте
Процедура ЗаполнитьДанныеЦены()
	
	Если НЕ ВариантОтображения = 1 Тогда
		
		ДанныеЦены = ОбщиеПроцедурыВызовСервера.ПолучитьЦенуНоменклатуры(Объект.Ссылка, ТипЦен);
		ЗаполнитьЗначенияСвойств(ЭтаФорма, ДанныеЦены);
		
		Если Цена = 0 Тогда
			Элементы.ГруппаЦена.Видимость = Ложь;
			Элементы.ДекорацияЦенаНеУстановлена.Заголовок = "Для типа цен '" + СокрЛП(ТипЦен) + "' цена не установлена!"; 
			Элементы.ДекорацияЦенаНеУстановлена.Видимость = Истина; 
		Иначе
			Элементы.ГруппаЦена.Видимость = Истина;
			Элементы.ДекорацияЦенаНеУстановлена.Видимость = Ложь; 
		КонецЕсли;
		
	Иначе
		
		Элементы.ГруппаЦена.Видимость = Ложь;
		Элементы.ВалютаЦены.Видимость = Ложь;
		
		ЕстьУстановленныеЦеныДляТипаЦены = ОбщиеПроцедурыВызовСервера.ЕстьУстановленныеЦеныДляТипаЦены(Объект.Ссылка, ТипЦен);
		Если НЕ ЕстьУстановленныеЦеныДляТипаЦены Тогда
			Элементы.ДекорацияЦенаНеУстановлена.Заголовок = "Для типа цен '" + СокрЛП(ТипЦен) + "' цена не установлена!"; 
			Элементы.ДекорацияЦенаНеУстановлена.Видимость = Истина; 
		Иначе
			Элементы.ДекорацияЦенаНеУстановлена.Видимость = Ложь; 
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПеречитатьНаСервере()
	ЗначениеВРеквизитФормы(Объект.Ссылка.ПолучитьОбъект(), "Объект");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыЦены()

	Если Объект.ВестиУчетПоХарактеристикам Тогда
		СписокХарактеристик.Параметры.УстановитьЗначениеПараметра("ТипЦен", ТипЦен);
	Иначе
		ДанныеЦены = ОбщиеПроцедурыВызовСервера.ПолучитьЦенуНоменклатуры(Объект.Ссылка, ТипЦен);
		ЗаполнитьЗначенияСвойств(ЭтаФорма, ДанныеЦены);
	КонецЕсли;	

КонецПроцедуры

// Устанавливаем видимость в зависимости 
// от использования (для всей базы) и ведения учета (для конкретного объекта)
// по характеристикам и сериям
// Возможны три состояния 	0 - нет характеристик и серий
// 							1 - есть характеристики (при этом, есть или нет серии - неважно)
//							2 - нет характеристик, но есть серии
//
&НаКлиенте
Процедура УстановитьВидимостьПоХарактеристикамИСериям()

	Если ВариантОтображения = 0 Тогда
		
		СписокОстатки.Параметры.УстановитьЗначениеПараметра("Номенклатура", Объект.Ссылка);
		
		Элементы.ГруппаСписокХарактеристик.Видимость = Ложь;
		Элементы.ГруппаСписокОстаткиСерий.Видимость = Ложь;
		Элементы.ГруппаСписокОстатки.Видимость = Истина;

		Элементы.ГруппаЦена.Видимость = Истина;
		Элементы.ГруппаОстатокВсего.Видимость = Истина;
		Элементы.ВалютаЦены.Видимость = Ложь;
		
	ИначеЕсли ВариантОтображения = 1 Тогда
		
		СписокХарактеристик.Параметры.УстановитьЗначениеПараметра("Владелец", Объект.Ссылка);
		СписокХарактеристик.Параметры.УстановитьЗначениеПараметра("ТипЦен", ТипЦен);
		
		Элементы.ГруппаСписокХарактеристик.Видимость = Истина;
		Элементы.ГруппаСписокОстаткиСерий.Видимость = Ложь;
		Элементы.ГруппаСписокОстатки.Видимость = Ложь;

		Элементы.ГруппаЦена.Видимость = Ложь;
		Элементы.ГруппаОстатокВсего.Видимость = Ложь;
		Элементы.ВалютаЦены.Видимость = Истина;
				
	ИначеЕсли ВариантОтображения = 2 Тогда
		
		СписокОстаткиСерий.Параметры.УстановитьЗначениеПараметра("Номенклатура", Объект.Ссылка);
		
		Элементы.ГруппаСписокХарактеристик.Видимость = Ложь;
		Элементы.ГруппаСписокОстаткиСерий.Видимость = Истина;
		Элементы.ГруппаСписокОстатки.Видимость = Ложь;

		Элементы.ГруппаЦена.Видимость = Истина;
		Элементы.ГруппаОстатокВсего.Видимость = Истина;
		Элементы.ВалютаЦены.Видимость = Ложь;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыТовара()
	
	ПараметрыТовара = Новый Структура;
	ПараметрыТовара.Вставить("Номенклатура", Объект.Ссылка);
	ПараметрыТовара.Вставить("ТипЦен", ТипЦен);
	
	Если ВариантОтображения = 0 ИЛИ ВариантОтображения = 2 Тогда
		
		ПараметрыТовара.Вставить("Цена", ЦенаВВыбраннойВалюте);
		ПараметрыТовара.Вставить("ЕдиницаИзмерения", Объект.ЕдиницаИзмерения);
		ПараметрыТовара.Вставить("ХарактеристикаНоменклатуры", ХарактеристикаПустаяСсылка);
		ПараметрыТовара.Вставить("Валюта", ВалютаЦеныВыбор);

	ИначеЕсли ВариантОтображения = 1 Тогда
		
		ТекущиеДанные = Элементы.СписокХарактеристик.ТекущиеДанные;
		
		ПараметрыТовара.Вставить("ХарактеристикаНоменклатуры", ТекущиеДанные.Характеристика);
		ПараметрыТовара.Вставить("Цена", ТекущиеДанные.Цена);
		ПараметрыТовара.Вставить("ЕдиницаИзмерения", ТекущиеДанные.ЕдиницаИзмерения);
		ПараметрыТовара.Вставить("Валюта", ТекущиеДанные.Валюта);
		
	КонецЕсли;
	
	Возврат ПараметрыТовара;

КонецФункции 

&НаКлиенте
Процедура ЗаполнитьЦенуВВыбраннойВалюте()
	
	Если Цена = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ВалютаЦеныВыбор <> Валюта Тогда
		
		КоэффициентПересчетаВыбраннойВалюты = ОбщиеПроцедурыВызовСервера.ПолучитьКоэффициентПересчетаВалюты(ВалютаЦеныВыбор);
		
		КоэффициентПересчетаВалюты = ОбщиеПроцедурыВызовСервера.ПолучитьКоэффициентПересчетаВалюты(Валюта);
		
		Если КоэффициентПересчетаВалюты > 0 Тогда
			ЦенаВВыбраннойВалюте = Цена / (КоэффициентПересчетаВыбраннойВалюты / КоэффициентПересчетаВалюты);
		КонецЕсли;
		
	Иначе
		ЦенаВВыбраннойВалюте = Цена;
	КонецЕсли;
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункцииСинхронизация

&НаКлиенте
Процедура ОбработчикОжиданияУстановитьПодписьКДатеОбновления()

	ОбменКлиент.УстановитьПодписьКДатеОбновления(
		Элементы, ОписаниеПоследнегоОбновления);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСинхронизациюНачало() 

	ОтключитьОбработчикОжидания("ОбработчикОжиданияУстановитьПодписьКДатеОбновления");

	ПараметрыЗапуска = Новый Структура();
	ПараметрыЗапуска.Вставить("РежимСинхронизации", "ВыполнитьСинхронизацию");

	Оповестить("НачатьСинхронизацию", ПараметрыЗапуска);

КонецПроцедуры


#КонецОбласти  // СлужебныеПроцедурыИФункцииСинхронизация

#КонецОбласти





