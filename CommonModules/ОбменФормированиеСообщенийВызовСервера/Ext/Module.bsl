
#Область ПрограммныйИнтерфейс

// Создает сообщение для подключения нового устройства.
//
// Параметры:
//  ВерсияСервиса - Строка - Версия используемого формата обмена.
//
Процедура СоздатьСообщениеДляПодключенияУстройства(ВерсияСервиса) Экспорт

	СброситьФлагНеобходимостиПоказаСтарыхПредупреждений();

	// Установим код устройства чтобы избежать чтения пакетов которые были подготовлены заранее,
	// но не загружены на устройство. Например, при начальной синхронизации произошел обрыв связи.
	
	ЦентральныйУзелОбмена = ПланыОбмена.ОбменССервером.НайтиПоКоду(Константы.КодУстройства.Получить());

	Если Не ЦентральныйУзелОбмена.Пустая() Тогда

		НовыйКодУстройства = Новый УникальныйИдентификатор();

		Константы.КодУстройства.Установить(НовыйКодУстройства);

		УзелОбъект = ЦентральныйУзелОбмена.ПолучитьОбъект();
		УзелОбъект.Код = НовыйКодУстройства;
		УзелОбъект.Записать();

	КонецЕсли;

	// Начинаем формировать файл данных
	ИмяФайлаСообщенияОбмена = ПолучитьИмяВременногоФайла("xml");

	Если ВерсияСервиса >= "101" Тогда
		СформироватьСообщениеДляПодключенияНовогоУстройстваВФорматеWMC(
			ВерсияСервиса, ИмяФайлаСообщенияОбмена);
	КонецЕсли;

	// Записываем сообщение 
	ВыполнитьЗаписьЭлементаОчередиСообщения(ВерсияСервиса, ИмяФайлаСообщенияОбмена);

КонецПроцедуры

// Создает сообщение для отключения устройства от базы на сервере.
//
// Параметры:
//  ВерсияСервиса - Строка - Версия используемого формата обмена.
//
Процедура СоздатьСообщениеДляОтключенияУстройства(ВерсияСервиса) Экспорт

	ИмяФайлаСообщенияОбмена = ПолучитьИмяВременногоФайла("xml");

	Если ВерсияСервиса >= "101" Тогда
		СформироватьСообщениеДляОтключенияУстройстваВФорматеWMC(ВерсияСервиса, ИмяФайлаСообщенияОбмена);
	КонецЕсли;

	ВыполнитьЗаписьЭлементаОчередиСообщения(ВерсияСервиса, ИмяФайлаСообщенияОбмена);

КонецПроцедуры

// Создает сообщение, в котором содержится выгрузка всех измененных на клиенте данных.
//
// Параметры:
//  ВерсияСервиса - Строка - Версия используемого формата обмена;
//  ЕстьНеотправленныеДанные - Булево - Признак наличия неотправленных данных.
//
Процедура СоздатьСообщениеДляВыгрузкиВсехИзмененныхДанных(ВерсияСервиса, 
	ЕстьНеотправленныеДанные) Экспорт 

	СброситьФлагНеобходимостиПоказаСтарыхПредупреждений();

	ИмяФайлаСообщенияОбмена = ПолучитьИмяВременногоФайла("xml");

	Если ВерсияСервиса >= "101" Тогда

		Результат = 
			СформироватьСообщениеДляВыгрузкиВсехИзмененныхДанныхWMC(
				ВерсияСервиса, ИмяФайлаСообщенияОбмена);

	КонецЕсли;

КонецПроцедуры

// Создает сообщение, в котором содержится команда для загрузки одного файла.
//
// Параметры:
//  ВерсияСервиса - Строка - Версия используемого формата обмена.
//  ФайлСсылка	 - Справочник.Файлы - Ссылка на файл, который нужно получить с сервера.
//
// Возвращаемое значение:
//  Истина - Если сообщение создано.
//
Процедура СоздатьСообщениеДляПолученияОдногоФайла(ВерсияСервиса, ФайлСсылка) Экспорт

	ИмяФайлаСообщенияОбмена = ПолучитьИмяВременногоФайла("xml");

	Если ВерсияСервиса >= "101" Тогда
		СформироватьСообщениеДляПолученияФайлаВФорматеWMC(
			ВерсияСервиса, ИмяФайлаСообщенияОбмена, ФайлСсылка);
	КонецЕсли;

	ВыполнитьЗаписьЭлементаОчередиСообщения(ВерсияСервиса, ИмяФайлаСообщенияОбмена);

КонецПроцедуры

// Создает транспортное сообщение для мгновенной отправки заказа на сервер
//
// Параметры:
//  ВерсияСервиса - Строка - Версия используемого формата обмена.
//  Данные		  - ДокументСсылка.Заказ - Ссылка на заказ.
//
Процедура СоздатьСообщениеДляПередачиОдногоЗаказа(ВерсияСервиса, Данные) Экспорт

	ИмяФайлаСообщенияОбмена = ПолучитьИмяВременногоФайла("xml");

	Заказ = Данные.ПолучитьОбъект();

	Если ВерсияСервиса >= "101" Тогда
		СформироватьСообщениеДляПередачиОдногоЗаказаВФорматеWMC(
			ВерсияСервиса, ИмяФайлаСообщенияОбмена, Заказ);	
	КонецЕсли;

	ВыполнитьЗаписьЭлементаОчередиСообщения(ВерсияСервиса, ИмяФайлаСообщенияОбмена);

	ЦентральныйУзелОбмена = ОбменВызовСервераПовтИсп.ПолучитьЦентральныйУзелОбмена();
	ПланыОбмена.УдалитьРегистрациюИзменений(ЦентральныйУзелОбмена, Данные);

КонецПроцедуры

// Создает сообщение для передачи сообщения о проблеме на сервер
//
// Параметры:
//  ВерсияСервиса - Строка - Версия используемого формата обмена;
//  Текст         - Строка - Текст сообщения о проблеме.
//
Процедура СоздатьСообщениеДляПередачиСообщенияОПроблеме(ВерсияСервиса, Текст) Экспорт

	ИмяФайлаСообщенияОбмена = ПолучитьИмяВременногоФайла("xml");

	Если ВерсияСервиса >= "101" Тогда
		СформироватьСообщениеДляПередачиДанныхПроблемахВФорматеWMC(
			ВерсияСервиса, ИмяФайлаСообщенияОбмена, Текст);
	КонецЕсли;

	ВыполнитьЗаписьЭлементаОчередиСообщения(ВерсияСервиса, ИмяФайлаСообщенияОбмена);

КонецПроцедуры

// Записывает заголовок файла обмена
//
// Параметры:
//  ВерсияСервиса		    - Строка - Используемая версия формата обмена;
//  ИмяФайлаСообщенияОбмена - Строка - Имя файла, в который будут записаны данные.
// 
// Возвращаемое значение:
//  ЗаписьXML - Объект записи в XML.
//
Функция НачатьЗаписьВXML(ВерсияСервиса, ИмяФайлаСообщенияОбмена) Экспорт

	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайлаСообщенияОбмена, "UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("Message");

	Если ВерсияСервиса >= "101" Тогда
		ЗаписьXML.ЗаписатьАтрибут("Version", ВерсияСервиса);
		ЗаписьXML.ЗаписатьАтрибут("NumberOfSessions", ОбщиеПроцедурыВызовСервера.КоличествоСеансов()); 
	КонецЕсли;

	Возврат ЗаписьXML;

КонецФункции

// Заканчивает запись файла обмена
//
// Параметры:
//  ЗаписьXML - ЗаписьXML - Объект записи данных в файл.
//
Процедура ЗакончитьЗаписьВXML(ЗаписьXML) Экспорт

	// Закрываем тег Message
	ЗаписьXML.ЗаписатьКонецЭлемента();

	// Завершаем сериализацию
	ЗаписьXML.Закрыть();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура - Выполнить запись элемента очереди сообщения
//
// Параметры:
//  ВерсияСервиса		    - Строка - Используемая версия обмена;
//  ИмяФайлаСообщенияОбмена - Строка - Имя сформированного файла с данными.
//
Процедура ВыполнитьЗаписьЭлементаОчередиСообщения(ВерсияСервиса, ИмяФайлаСообщенияОбмена)

	СтрокаВЖурнал = НСтр("ru = 'Попытка записи элемента очереди сообщений обмена'; 
						 |en = 'Attempt to write down the message queue item'");

	РегистрыСведений.ПротоколСобытий.ДобавитьИнформацию(СтрокаВЖурнал);

	ОбщегоНазначенияВызовСервера.СкопироватьФайлДанных(ИмяФайлаСообщенияОбмена, "-out-");

	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяФайлаСообщенияОбмена);
	ДанныеОбмена = Новый ХранилищеЗначения(ДвоичныеДанныеФайла, Новый СжатиеДанных(9));

	НовыйЭлементОчереди = РегистрыСведений.ОчередьСообщенийНаСервер.СоздатьМенеджерЗаписи();

	НовыйЭлементОчереди.Данные        = ДанныеОбмена;
	НовыйЭлементОчереди.МоментВремени = ТекущаяУниверсальнаяДатаВМиллисекундах();
	НовыйЭлементОчереди.Идентификатор = Новый УникальныйИдентификатор();

	НовыйЭлементОчереди.Записать();

	РаботаСПротоколомСобытийВызовСервера.ДобавитьИнформацию(
		СтрШаблон(
			НСтр("ru = 'Записан элемент очереди сообщений для сервера (версия %1)'; 
				|en = 'Queue item saved (version %1)'"), ВерсияСервиса));

	УдалитьФайлы(ИмяФайлаСообщенияОбмена);

	СтрокаВЖурнал = НСтр("ru = 'Временный файл (%1) удален'; 
						|en = 'Temporary file (%1) deleted'");

	РегистрыСведений.ПротоколСобытий.ДобавитьИнформацию(
		СтрШаблон(СтрокаВЖурнал, ИмяФайлаСообщенияОбмена));

КонецПроцедуры 

// Устанавливает признак необходимости показа еще не показанных ошибок в Ложь.
//
Процедура СброситьФлагНеобходимостиПоказаСтарыхПредупреждений()

	// Для всех сообщений которые еще не выведены сбрасываем флаг - они больше не нужны.
	СтруктураОтбора = Новый Структура("НеобходимоОтобразитьПослеСинхронизации", Истина);

	Выборка = РегистрыСведений.ПротоколСобытий.Выбрать(,, СтруктураОтбора);
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.ПротоколСобытий.УстановитьНеобходимостьОтображенияПослеСинхронизации(
			Выборка.МоментВремени, Ложь);
	КонецЦикла;

КонецПроцедуры 

// Процедура - Записать в поток обмена записи протокола
//
// Параметры:
//  ВерсияСервиса			   - Строка    - Используемая версия формата обмена;
//  ЗаписьXML				   - ЗаписьXML - Объект записи данных в файл;
// 
// Возвращаемое значение:
//  Булево - Истина, если записи протокола выгружены.
//
Функция ЗаписатьВПотокОбменаЗаписиПротокола(ВерсияСервиса, ЗаписьXML)

	ЕстьДанныеДляВыгрузки = Ложь;

	// Выходим, если нет необходимости передавать записи на сервер.
	Если Не Константы.ВыгружатьПротоколСобытийНаСервер.Получить() Тогда
		Возврат ЕстьДанныеДляВыгрузки;
	КонецЕсли;

	// Определяем границу переданных записей протокола.
	ГраницаВыборки = Константы.ПоследняяОтправленнаяНаСерверЗаписьПротокола.Получить();
	
	// Получаем еще не переданные записи протокола.
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ГраницаВыборки", ГраницаВыборки);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПротоколСобытий.Период,
		|	ПротоколСобытий.МоментВремени КАК МоментВремени
		|ИЗ
		|	РегистрСведений.ПротоколСобытий КАК ПротоколСобытий
		|ГДЕ
		|	ПротоколСобытий.МоментВремени > &ГраницаВыборки
		|
		|УПОРЯДОЧИТЬ ПО
		|	МоментВремени";

	ПротоколВыборка = Запрос.Выполнить().Выбрать();

	// Помещаем записи в файл
	Пока ПротоколВыборка.Следующий() Цикл

		НаборЗаписей = РегистрыСведений.ПротоколСобытий.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(ПротоколВыборка.Период);
		НаборЗаписей.Отбор.МоментВремени.Установить(ПротоколВыборка.МоментВремени);
		НаборЗаписей.Прочитать();

		Если ВерсияСервиса >= "101" Тогда

			ОбменФормированиеWMCСервер.ЗаписатьОбъектВXML(ЗаписьXML, ВерсияСервиса, НаборЗаписей);

		КонецЕсли;

		// Сдвигаем границу переданных данных вперед.
		ГраницаВыборки = ПротоколВыборка.МоментВремени;
		ЕстьДанныеДляВыгрузки = Истина;

	КонецЦикла;

	// Запоминаем границу переданных данных.
	Константы.ПоследняяОтправленнаяНаСерверЗаписьПротокола.Установить(ГраницаВыборки);

	Возврат ЕстьДанныеДляВыгрузки;

КонецФункции

// Записывает произошедшую ошибку в протокол и помечает ее как требующую показа после обмена.
//
// Параметры:
//  ЗаписьXML - ЗаписьXML - Объект записи данных в файл;
//  ИмяФайлаСообщенияОбмена	 - Строка - Имя файла, в который будут записаны данные;
//  Инфо					 - ИнформацияОбОшибке - Описание произошедшей ошибки.
//
Процедура ОбработатьОшибкуПриФормированиеВыгрузкиВсехИзмененныхДанных(ЗаписьXML, 
		ИмяФайлаСообщенияОбмена, Инфо)

	ЗаписьXML.Закрыть();

	УдалитьФайлы(ИмяФайлаСообщенияОбмена);

	ОбщееОписаниеОшибки = 
		НСтр("ru = 'При подготовке сообщения для сервера произошла ошибка.'
			|; en = 'An error occured while preparing message for server'");

	ТекстОшибки = 
		РаботаСоСтрокамиКлиентСервер.СформироватьПредставлениеОшибки(
				ОбщееОписаниеОшибки, ПодробноеПредставлениеОшибки(Инфо));

	МоментВремени = РегистрыСведений.ПротоколСобытий.ДобавитьОшибку(ТекстОшибки);
	РегистрыСведений.ПротоколСобытий.УстановитьНеобходимостьОтображенияПослеСинхронизации(
		МоментВремени, Истина);

КонецПроцедуры

#Область ПроцедурыФормированиеСообщений

// Формирует сообщение для подключения нового устройства в формате WMC
//
// Параметры:
//  ВерсияСервиса			 - Строка - Используемая версия формата обмена;
//  ИмяФайлаСообщенияОбмена	 - Строка - Имя файла, в который будут записаны данные.
//
Процедура СформироватьСообщениеДляПодключенияНовогоУстройстваВФорматеWMC(ВерсияСервиса, 
	ИмяФайлаСообщенияОбмена)

	ЗаписьXML = НачатьЗаписьВXML(ВерсияСервиса, ИмяФайлаСообщенияОбмена);

	ОбменФормированиеWMCСервер.ЗаписатьВXMLКомандуПодключенияУстройства(ЗаписьXML, ВерсияСервиса);

	ЗакончитьЗаписьВXML(ЗаписьXML);

КонецПроцедуры

// Формирует  сообщение для отключения устройства в формате WMC
//
// Параметры:
//  ВерсияСервиса           - Строка - Используемая версия формата обмена;
//  ИмяФайлаСообщенияОбмена - Строка - Имя файла, в который будут записаны данные.
//
Процедура СформироватьСообщениеДляОтключенияУстройстваВФорматеWMC(ВерсияСервиса, 
	ИмяФайлаСообщенияОбмена)

	ЗаписьXML = НачатьЗаписьВXML(ВерсияСервиса, ИмяФайлаСообщенияОбмена);

	ОбменФормированиеWMCСервер.ЗаписатьВXMLКомандуОтключенияУстройства(ЗаписьXML, ВерсияСервиса);

	ЗакончитьЗаписьВXML(ЗаписьXML);

КонецПроцедуры 

// Формирует сообщение для выгрузки всех измененных данных WMC.
//
// Параметры:
//  ВерсияСервиса           - Строка - Используемая версия формата обмена;
//  ИмяФайлаСообщенияОбмена - Строка - Имя файла, в который будут записаны данные.
// 
// Возвращаемое значение:
//  Булево - Признак удачного завершения формирования сообщения.
//
Функция СформироватьСообщениеДляВыгрузкиВсехИзмененныхДанныхWMC(ВерсияСервиса, 
	ИмяФайлаСообщенияОбмена)

	ЦентральныйУзелОбмена = ОбменВызовСервераПовтИсп.ПолучитьЦентральныйУзелОбмена();

	Попытка

		// Создаем объект записи XML
		ЗаписьXML = НачатьЗаписьВXML(ВерсияСервиса, ИмяФайлаСообщенияОбмена);

		// Выбираются все измененные данные
		ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(
			ЦентральныйУзелОбмена, 
			ЦентральныйУзелОбмена.НомерОтправленного);

		ЕстьДанныеДляВыгрузки = Ложь;
		Пока ВыборкаИзменений.Следующий() Цикл

			Если Не ЕстьДанныеДляВыгрузки Тогда
				ОбменФормированиеWMCСервер.ЗаписатьВXMLИнформациюОКлиенте(ЗаписьXML, ВерсияСервиса);
				ЕстьДанныеДляВыгрузки = Истина;
			КонецЕсли;

			ЭлементДанных = ВыборкаИзменений.Получить();

			ОбменФормированиеWMCСервер.ЗаписатьОбъектВXML(ЗаписьXML,  ВерсияСервиса, ЭлементДанных);

		КонецЦикла;

		ЗаписиВыгружены = ЗаписатьВПотокОбменаЗаписиПротокола(ВерсияСервиса, ЗаписьXML);

		Если ЕстьДанныеДляВыгрузки Или ЗаписиВыгружены Тогда

			ЗакончитьЗаписьВXML(ЗаписьXML);

			ВыполнитьЗаписьЭлементаОчередиСообщения(ВерсияСервиса, ИмяФайлаСообщенияОбмена);
			ОбменВызовСервера.УдалитьРегистрациюИзмененийОтправленныхДанных();

		КонецЕсли;

		Возврат Истина;

	Исключение

		ОбработатьОшибкуПриФормированиеВыгрузкиВсехИзмененныхДанных(
			ЗаписьXML, ИмяФайлаСообщенияОбмена, ИнформацияОбОшибке());

		Возврат Ложь;

	КонецПопытки;

КонецФункции

// Формирует сообщение для передачи одного заказа в формате WMC.
//
// Параметры:
//  ВерсияСервиса           - Строка - Используемая версия формата обмена;
//  ИмяФайлаСообщенияОбмена - Строка - Имя файла, в который будут записаны данные;
//  Заказ                  - ДокументСсылка.Заказ - Ссылка на передаваемый заказ.
//
Процедура СформироватьСообщениеДляПередачиОдногоЗаказаВФорматеWMC(ВерсияСервиса, 
	ИмяФайлаСообщенияОбмена, Заказ)

	ЗаписьXML = НачатьЗаписьВXML(ВерсияСервиса, ИмяФайлаСообщенияОбмена);

	ОбменФормированиеWMCСервер.ЗаписатьОбъектВXML(ЗаписьXML, ВерсияСервиса, Заказ);

	ЗакончитьЗаписьВXML(ЗаписьXML);

КонецПроцедуры

// Формирует сообщение для получения файла в формате WMC
//
// Параметры:
//  ВерсияСервиса           - Строка - Используемая версия формата обмена;
//  ИмяФайлаСообщенияОбмена - Строка - Имя файла, в который будут записаны данные;
//  ФайлСсылка              - СправочникСсылка.Файлы - Ссылка на файл, который требуется получить.
//
Процедура СформироватьСообщениеДляПолученияФайлаВФорматеWMC(ВерсияСервиса, 
	ИмяФайлаСообщенияОбмена, ФайлСсылка)

	ЗаписьXML = НачатьЗаписьВXML(ВерсияСервиса, ИмяФайлаСообщенияОбмена);

	ОбменФормированиеWMCСервер.ЗаписатьВXMLКомандуПолученияОдногоФайла(
		ЗаписьXML, ВерсияСервиса, ФайлСсылка);

	ЗакончитьЗаписьВXML(ЗаписьXML);

КонецПроцедуры

// Формирует сообщение для передачи данных проблемах в формате WMC.
//
// Параметры:
//  ВерсияСервиса			 - Строка - Используемая версия формата обмена;
//  ИмяФайлаСообщенияОбмена	 - Строка - Имя файла, в который будут записаны данные;
//  Текст					 - Строка - Передаваемое сообщение о проблеме пользователя.
//
Процедура СформироватьСообщениеДляПередачиДанныхПроблемахВФорматеWMC(ВерсияСервиса, 
	ИмяФайлаСообщенияОбмена, Текст)

	// Инициализируем объект записи данных.
	ЗаписьXML = НачатьЗаписьВXML(ВерсияСервиса, ИмяФайлаСообщенияОбмена);

	// Записываем в файл заголовок объекта.
	ОбменФормированиеWMCСервер.ЗаписатьЗаголовокОбъекта(
		ЗаписьXML, "ProblemReportFromUser", ВерсияСервиса);

	// Записываем описание произошедшей проблемы.
	ОбменФормированиеWMCСервер.ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Description", 
		ОбщегоНазначенияВызовСервера.УдалитьНедопустимыеСимволыXML(Текст));

	// Дополняем описание проблемы записями за последнюю неделю.
	ЗаписьXML.ЗаписатьНачалоЭлемента("JournalRecords");

	ГраницаВыборки  = ТекущаяДата() - 7 * 24 * 60 * 60;

	ПротоколВыборка = РегистрыСведений.ПротоколСобытий.Выбрать(ГраницаВыборки);
	Пока ПротоколВыборка.Следующий() Цикл

		ПротоколНаборЗаписей = РегистрыСведений.ПротоколСобытий.СоздатьНаборЗаписей();
		ПротоколНаборЗаписей.Отбор.Период.Установить(ПротоколВыборка.Период);
		ПротоколНаборЗаписей.Отбор.МоментВремени.Установить(ПротоколВыборка.МоментВремени);
		ПротоколНаборЗаписей.Прочитать();

		ОбменФормированиеWMCСервер.ЗаписатьОбъектВXML(
			ЗаписьXML, ВерсияСервиса, ПротоколНаборЗаписей);

	КонецЦикла;

	// Закрываем контейнер JournalRecords
	ЗаписьXML.ЗаписатьКонецЭлемента();

	// Закрываем контейнер ProblemReportFromUser
	ЗаписьXML.ЗаписатьКонецЭлемента();

	// Закрываем файл с данными
	ЗакончитьЗаписьВXML(ЗаписьXML);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

