
#Область ПрограммныйИнтерфейс

// Заменяет повторное вхождение символа на одиночное.
//
// Параметры:
//  Текст	 - Строка - Обрабатываемый текст;
//  Символ	 - Строка - Исключаемый символ.
// 
// Возвращаемое значение:
//  Строка - обработанный текст.
//
Функция СократитьПовторноеВхождениеСимвола(Текст, Символ) Экспорт

	ВременныйТекст         = Текст;
	ПозицияДвойногоСимвола = СтрНайти(ВременныйТекст, Символ + Символ);

	Пока Не ПозицияДвойногоСимвола = 0 Цикл
		ВременныйТекст         = СтрЗаменить(ВременныйТекст, Символ + Символ, Символ);
		ПозицияДвойногоСимвола = СтрНайти(ВременныйТекст, Символ + Символ);
	КонецЦикла;

	Возврат ВременныйТекст;

КонецФункции

// Возвращает текстовое представление числа с единицей измерения в правильном склонении и числе.
//
// Параметры:
//  Число                       - Число  - любое целое число.
//	ПараметрыПредметаИсчисления - Строка - варианты написания единицы измерения в родительном падеже для одной,
//										   для двух и для пяти единиц, разделитель - запятая.
//
// Возвращаемое значение:
//  Строка - текстовое представление количества единиц, число записывается цифрами.
//
// Примеры:
//	ЧислоЦифрамиПредметИсчисленияПрописью(23,  НСтр("ru = 'минуту,минуты,минут'")); // Вернет "23 минуты".
//	ЧислоЦифрамиПредметИсчисленияПрописью(15,  НСтр("ru = 'минуту,минуты,минут'")); // Вернет "15 минут".
//
Функция ЧислоЦифрамиПредметИсчисленияПрописью(Знач Число, Знач ПараметрыПредметаИсчисления) Экспорт

	Результат = Формат(Число,"ЧН=0");

	МассивПредставлений = Новый Массив;

	Позиция = СтрНайти(ПараметрыПредметаИсчисления, ",");
	Пока Позиция > 0 Цикл

		Значение = СокрЛП(Лев(ПараметрыПредметаИсчисления, Позиция-1));

		ПараметрыПредметаИсчисления = Сред(ПараметрыПредметаИсчисления, Позиция + 1);

		МассивПредставлений.Добавить(Значение);

		Позиция = СтрНайти(ПараметрыПредметаИсчисления, ",");

	КонецЦикла;

	Если СтрДлина(ПараметрыПредметаИсчисления) > 0 Тогда
		Значение = СокрЛП(ПараметрыПредметаИсчисления);
		МассивПредставлений.Добавить(Значение);
	КонецЕсли;

	Если Число >= 100 Тогда
		Число = Число - Цел(Число / 100)*100;
	КонецЕсли;

	Если Число > 20 Тогда
		Число = Число - Цел(Число/10)*10;
	КонецЕсли;

	Если Число = 1 Тогда
		Результат = Результат + " " + МассивПредставлений[0];
	ИначеЕсли Число > 1 И Число < 5 Тогда
		Результат = Результат + " " + МассивПредставлений[1];
	Иначе
		Результат = Результат + " " + МассивПредставлений[2];
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Возвращает текстовое представление единицы измерения в правильном склонении и числе.
//
// Параметры:
//  Число                       - Число - любое целое число.
//  ПараметрыПредметаИсчисления - Строка - варианты написания единицы измерения в родительном падеже для одной,
//                                для двух и для пяти единиц, разделитель - запятая.
//                                Пример: "минуту,минуты,минут".
// 
// Возвращаемое значение:
//  Строка - текстовое представление единицы измерения.
//
Функция ПредметИсчисленияПрописью(Знач Число, Знач ПараметрыПредметаИсчисления) Экспорт

	Результат = "";

	МассивПредставлений = Новый Массив;

	Позиция = СтрНайти(ПараметрыПредметаИсчисления, ",");
	Пока Позиция > 0 Цикл
		Значение = СокрЛП(Лев(ПараметрыПредметаИсчисления, Позиция-1));
		ПараметрыПредметаИсчисления = Сред(ПараметрыПредметаИсчисления, Позиция + 1);
		МассивПредставлений.Добавить(Значение);
		Позиция = СтрНайти(ПараметрыПредметаИсчисления, ",");
	КонецЦикла;

	Если СтрДлина(ПараметрыПредметаИсчисления) > 0 Тогда
		Значение = СокрЛП(ПараметрыПредметаИсчисления);
		МассивПредставлений.Добавить(Значение);
	КонецЕсли;

	Если Число >= 100 Тогда
		Число = Число - Цел(Число / 100)*100;
	КонецЕсли;

	Если Число > 20 Тогда
		Число = Число - Цел(Число/10)*10;
	КонецЕсли;

	Если Число = 1 Тогда
		Результат = МассивПредставлений[0];
	ИначеЕсли Число > 1 И Число < 5 Тогда
		Результат = МассивПредставлений[1];
	Иначе
		Результат = МассивПредставлений[2];
	КонецЕсли;

	Возврат Результат;

КонецФункции


// Проверяет строку на формат адреса электронной почты. Проверка не точная, но основные элементы на месте.
//
// Параметры:
//  АдресЭлектроннойПочты - Строка - Адрес электронной почты.
// 
// Возвращаемое значение:
//  Булево - Истина, если да.
//
Функция ЭтоАдресЭлектроннойПочты(АдресЭлектроннойПочты) Экспорт

	Поз = СтрНайти(АдресЭлектроннойПочты, "@");
	Если Поз = 0 Тогда
		Возврат Ложь;
	КонецЕсли;

	Если Не СтрЧислоВхождений(АдресЭлектроннойПочты, "@") = 1 Тогда
		Возврат Ложь;
	КонецЕсли;

	Если СтрЗаканчиваетсяНа(АдресЭлектроннойПочты, ".")
		Или СтрНачинаетсяС(АдресЭлектроннойПочты, ".") Тогда
		Возврат Ложь;
	КонецЕсли;

	Если СтрНайти(АдресЭлектроннойПочты, "..") > 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не СтрокаСодержитТолькоДопустимыеСимволы(АдресЭлектроннойПочты) Тогда
		Возврат Ложь;
	КонецЕсли;

	Пользователь = Лев(АдресЭлектроннойПочты, Поз - 1);
	Если СтрДлина(Пользователь) = 0 Тогда
		Возврат Ложь;
	КонецЕсли;

	Сервер = Сред(АдресЭлектроннойПочты, Поз + 1);
	Если СтрДлина(Сервер) = 0 Тогда
		Возврат Ложь;
	КонецЕсли;

	Если СтрНайти(Сервер, ".") = 0 Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;

КонецФункции

// Принимает строку почтового адреса в виде "name <addr@dom>".
//
// Параметры:
//  АдресЭлектроннойПочтыСтр - Строка - Адрес электронной почты.
// 
// Возвращаемое значение:
//  Результат - (Структура)
//   * Адрес           - Строка - addr@dom;
//   * ОтображаемоеИмя - Строка - name;
//   * Пользователь    - Строка - addr;
//   * Домен           - Строка - dom.
//
Функция РазложитьПредставлениеАдресаЭлектроннойПочты(Знач АдресЭлектроннойПочтыСтр) Экспорт

	Результат = Новый Структура();
	Результат.Вставить("Адрес", "");
	Результат.Вставить("ОтображаемоеИмя", "");
	Результат.Вставить("Пользователь", "");
	Результат.Вставить("Домен", "");
	Результат.Вставить("ПолноеИмя", "");

	АдресЭлектроннойПочтыСтр = СокрЛП(АдресЭлектроннойПочтыСтр);

	Поз = СтрНайти(АдресЭлектроннойПочтыСтр, "@");
	Если Поз = 0 Тогда
		Возврат Результат;
	КонецЕсли;

	СтрокаАдреса = "";
	ПозицияПервогоСимволаАдреса = 0;
	ПозицияПоследнегоСимволаАдреса = 0;
	
	// Идем влево от @
	Для Индекс = 0 По Поз - 1 Цикл

		ИндексВСтроке = Поз - Индекс;
		СтрокаАдресаПроверка = Сред(АдресЭлектроннойПочтыСтр, ИндексВСтроке, 1) + СтрокаАдреса;

		Если СтрокаСодержитТолькоДопустимыеСимволы(СтрокаАдресаПроверка) Тогда
			СтрокаАдреса = СтрокаАдресаПроверка;
			ПозицияПервогоСимволаАдреса = ИндексВСтроке;
		Иначе
			Прервать;
		КонецЕсли;

	КонецЦикла;

	// Идем вправо от @
	Для ИндексВСтроке = Поз + 1 По СтрДлина(АдресЭлектроннойПочтыСтр) Цикл

		СтрокаАдресаПроверка = СтрокаАдреса + Сред(АдресЭлектроннойПочтыСтр, ИндексВСтроке, 1);

		Если СтрокаСодержитТолькоДопустимыеСимволы(СтрокаАдресаПроверка) Тогда
			СтрокаАдреса = СтрокаАдресаПроверка;
			ПозицияПоследнегоСимволаАдреса = ИндексВСтроке;
		Иначе
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Результат.Адрес = СтрокаАдреса;

	// Слева от адреса берем представление
	Результат.ОтображаемоеИмя = Лев(АдресЭлектроннойПочтыСтр, ПозицияПервогоСимволаАдреса - 2);
	Результат.ОтображаемоеИмя = СокрЛП(Результат.ОтображаемоеИмя);

	Если Не РаботаСоСтрокамиКлиентСервер.ЭтоАдресЭлектроннойПочты(Результат.Адрес) Тогда
		Результат.Адрес = "";

	Иначе
		Поз = СтрНайти(Результат.Адрес, "@");

		Результат.Пользователь = Лев(Результат.Адрес, Поз - 1);
		Результат.Домен        = Сред(Результат.Адрес, Поз + 1);

	КонецЕсли;

	Если ЗначениеЗаполнено(Результат.ОтображаемоеИмя) Тогда
		Результат.ПолноеИмя = 
			СтрШаблон(
				"%1 <%2>", Результат.ОтображаемоеИмя, Результат.Адрес);
	Иначе
		Результат.ПолноеИмя = Результат.Адрес;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Формирует текст ошибки для записи в протокол событий.
//
// Параметры:
//  ОбщееОписаниеОшибки - Строка - Общая информация об ошибке;
//  ПодробнаяИнформация - Строка - Подробности произошедшего;
//  Уточнения           - Строка - Дополнительные сведения об ошибке.
// 
// Возвращаемое значение:
//  Строка - Сформированный текст ошибки.
//
Функция СформироватьПредставлениеОшибки(ОбщееОписаниеОшибки, ПодробнаяИнформация, Уточнения = "") Экспорт

	Шаблон = 
		"ru = '%1
		|
		|#Текст ошибки (для администратора):#
		|%2
		|
		|Дополнительные сведения:
		|%3'; en = '%1
		|
		|#Error details (for administrator):#
		|%2
		|
		|Additional data:
		|%3'";

	Возврат СтрШаблон(НСтр(Шаблон), ОбщееОписаниеОшибки, ПодробнаяИнформация, Уточнения);

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СтрокаСодержитТолькоДопустимыеСимволы(АдресЭлектроннойПочты)

	ДопустимыеСимволы = "-.0123456789@ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz";

	Для НомерСимвола = 1 По СтрДлина(АдресЭлектроннойПочты) Цикл

		Если СтрНайти(ДопустимыеСимволы, Сред(АдресЭлектроннойПочты, НомерСимвола, 1)) = 0 Тогда
			Возврат Ложь;
		КонецЕсли;

	КонецЦикла;

	Возврат Истина;

КонецФункции

#КонецОбласти
