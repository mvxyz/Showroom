
#Область ПрограммныйИнтерфейс

// Определяет схему ссылки.
//
// Параметры:
//  Href - Строка - Проверяемая ссылка.
// 
// Возвращаемое значение:
//  Строка - Схема ссылки.
//
Функция ОпределитьСхемуСсылки(Href) Экспорт

	Если СтрокаНачинаетсяСПодстроки(Href, "http://") Тогда
		Возврат "http://";
		
	ИначеЕсли СтрокаНачинаетсяСПодстроки(Href, "https://") Тогда
		Возврат "https://";
		
	ИначеЕсли СтрокаНачинаетсяСПодстроки(Href, "ftp://") Тогда
		Возврат "ftp://";
		
	ИначеЕсли СтрокаНачинаетсяСПодстроки(Href, "mailto:") Тогда
		Возврат "mailto:";
		
	Иначе
		Возврат "";
		
	КонецЕсли;

КонецФункции

// Заменяет в строке все спецсимволы на соответствующие им имена,
//  Возвращает измененную строку.
//
// Параметры:
//  Строка           - Строка       - Анализируемая строка;
//  СпецСимволыСоотв - Соответствие - Список спец символов, которые нужно заменить.
// 
// Возвращаемое значение:
//  Строка - Преобразованная исходная строка.
//
Функция ЗаменитьСпецСимволыHTML(Строка, СпецСимволыСоотв = Неопределено) Экспорт

	СоответствиеСпецСимволов = РаботаСHTMLВызовСервераПовтИсп.ПолучитьСпецСимволыВВидеПарыКодПредставление();

	ЗаменитьСпецСимволHTML(Строка, 38, "amp");

	НоваяСтрока = Строка;
	Для Каждого Пара Из СоответствиеСпецСимволов Цикл
		НоваяСтрока = СтрЗаменить(Строка, Пара.Ключ, "&" + Пара.Значение + ";");
	КонецЦикла;

	Строка = НоваяСтрока;

	Возврат Строка;

КонецФункции

// Заменяет в строке все имена спецсимволов на соответствующие им спецсимволы,
//  Возвращает измененную строку.
//
// Параметры:
//  Строка           - Строка       - Анализируемая строка;
//  СпецСимволыСоотв - Соответствие - Список спец символов, которые нужно заменить.
// 
// Возвращаемое значение:
//  Строка - Преобразованная исходная строка.
//
Функция ЗаменитьСпецСимволыHTMLОбратно(Строка, СпецСимволыСоотв = Неопределено) Экспорт

	ОбратноеСоответствиеСпецСимволов = 
		РаботаСHTMLВызовСервераПовтИсп.ПолучитьСпецСимволыВВидеПарыКодПредставление();

	ЗаменитьСпецСимволHTMLОбратно(Строка, 38, "amp");

	Для Каждого СпецСимвол Из ОбратноеСоответствиеСпецСимволов Цикл
		Строка = СтрЗаменить(Строка, "&" + СпецСимвол.Значение + ";", Символ(СпецСимвол.Ключ));
	КонецЦикла;

	Возврат Строка;

КонецФункции

// Заменяет символы табуляции и пробелов на символ неразрывного пробела
//
// Параметры:
//  Строка - Строка - Изменяемая строка HTML текста.
//
Процедура ЗаменитьТабуляцииИПробелы(Строка) Экспорт

	Строка = СтрЗаменить(Строка, Символы.ВТаб, "    ");
	Строка = СтрЗаменить(Строка, Символы.Таб, "    ");
	Строка = СтрЗаменить(Строка, "  ", Символы.НПП + " ");
	Строка = СтрЗаменить(Строка, Символы.НПП + " " + Символы.НПП, Символы.НПП + Символы.НПП + Символы.НПП);
	Строка = СтрЗаменить(Строка, Символы.НПП + " " + Символы.НПП, Символы.НПП + Символы.НПП + Символы.НПП);
	Строка = СтрЗаменить(Строка, Символы.НПП + " " + Символы.НПП, Символы.НПП + Символы.НПП + Символы.НПП);
	Строка = СтрЗаменить(Строка, Символы.НПП + " " + Символы.НПП, Символы.НПП + Символы.НПП + Символы.НПП);
	Строка = СтрЗаменить(Строка, Символы.НПП + " " + Символы.НПП, Символы.НПП + Символы.НПП + Символы.НПП);
	Строка = СтрЗаменить(Строка, Символы.НПП + " " + Символы.НПП, Символы.НПП + Символы.НПП + Символы.НПП);

КонецПроцедуры

// Добавляет теги ко всем ссылкам, находящимся в строке.
//  Обрабатываются следующие схемы обращения к ресурсу:
//  http://, https://, ftp://, mailto:, file://, file:, e1c://, e1cib/
//  Кроме того обрабатываются с использованием схемы http:// ссылки начинающиеся с www. без схемы.
//
// Параметры:
//  ТекстHTML - Строка - Преобразуемый HTML текст.
//
Процедура ДобавитьТегиКСсылкам(ТекстHTML) Экспорт

	// Ссылки со схемой
	ДобавитьТегиКСсылкамСоСхемой(ТекстHTML, "http://");
	ДобавитьТегиКСсылкамСоСхемой(ТекстHTML, "https://");
	ДобавитьТегиКСсылкамСоСхемой(ТекстHTML, "ftp://");

	// Ссылки без схемы
	ДобавитьТегиКСсылкамСоСхемой(ТекстHTML, "www.", "http://www.");
	ДобавитьТегиКСсылкамСоСхемой(ТекстHTML, "mailto:");

	// Заполнить title у ссылок
	ЗаполнитьСвойствоTitleУСсылок(ТекстHTML);

КонецПроцедуры

// Проверяет нахождение переданной позиции внутри тега (в параметрах или содержании)
// Если тег не закрыт, то проверяет только в параметрах тега.
//
// Параметры:
//  ТекстHTML        - Строка - Анализируемый HTML текст;
//  НазваниеЭлемента - Строка - Название искомого элемента;
//  Позиция          - Число  - Начальная позиция, с которой необходимо искать тег;
//  Тег              - Строка - HTML тег.
// 
// Возвращаемое значение:
//  Булево - Истина, если искомая позиция находится по тексту внутри указанного тега.
//
Функция ПозицияНаходитсяВТеге(ТекстHTML, НазваниеЭлемента, Позиция, Тег = Неопределено) Экспорт

	НачалоОткрывающегоТега = "<" + НРег(НазваниеЭлемента);
	ДлинаОткрывающегоТега  = СтрДлина(НачалоОткрывающегоТега);
	ПозицияНаходитсяВТеге  = Ложь;

	НачалоТекстаHTML = Лев(НРег(ТекстHTML), Позиция - 1);
	НайденнаяПозицияНачалаОткрывающегоТега = 0;
	ПозицияОкончанияОткрывающегоТега       = 0;

	ПозицияНачалаОткрывающегоТега = СтрНайти(НачалоТекстаHTML, НачалоОткрывающегоТега);
	Пока ПозицияНачалаОткрывающегоТега <> 0 Цикл

		НачалоТекстаHTML = Сред(НачалоТекстаHTML, ПозицияНачалаОткрывающегоТега + 1);
		НайденнаяПозицияНачалаОткрывающегоТега =
			НайденнаяПозицияНачалаОткрывающегоТега
			+ ПозицияОкончанияОткрывающегоТега
			+ ПозицияНачалаОткрывающегоТега;

		ПозицияОкончанияОткрывающегоТега = СтрНайти(НачалоТекстаHTML, ">");
		Если ПозицияОкончанияОткрывающегоТега <> 0 Тогда
			НачалоТекстаHTML = Сред(НачалоТекстаHTML, ПозицияОкончанияОткрывающегоТега + 1);
		КонецЕсли;

		ПозицияНачалаОткрывающегоТега = СтрНайти(НачалоТекстаHTML, НачалоОткрывающегоТега);

	КонецЦикла;
	
	Если НайденнаяПозицияНачалаОткрывающегоТега <> 0 Тогда

		// Если есть незакрытый открывающий тег до искомой позиции, ищем тег в исходном тексте HTML.
		Тег = ПолучитьТегВТекстеHTML(ТекстHTML, НазваниеЭлемента, НайденнаяПозицияНачалаОткрывающегоТега);

		Если ЗаполненаСтруктураТега(Тег) Тогда

			Если Позиция > Тег.ПозицияНачалаТега И Позиция < Тег.ПозицияОкончанияТега Тогда
				ПозицияНаходитсяВТеге = Истина;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Возврат ПозицияНаходитсяВТеге;

КонецФункции

// Возвращает пустое HTML представление.
// 
// Возвращаемое значение:
//  Строка - Пустой HTML документ.
//
Функция ПолучитьПустоеHTMLПредставление() Экспорт

	Возврат "<html><body></body></html>";

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Проверяет, содержит ли ссылка схему
//
Функция СтрокаНачинаетсяСПодстроки(Строка, Подстрока)

	Возврат (Найти(НРег(СокрЛ(Строка)), НРег(Подстрока)) = 1);

КонецФункции

Процедура ЗаменитьСпецСимволHTML(Строка, КодСимвола, ИмяСимвола)

	Строка = СтрЗаменить(Строка, Символ(КодСимвола), "&" + ИмяСимвола + ";");

КонецПроцедуры

Процедура ЗаменитьСпецСимволHTMLОбратно(Строка, КодСимвола, ИмяСимвола)

	Строка = СтрЗаменить(Строка, "&" + ИмяСимвола + ";", Символ(КодСимвола));

КонецПроцедуры

// Добавляет тег в конкретную позицию. Меняет значение Строка и Смещение.
//
Процедура ДобавитьТегСсылки(
	Строка,
	НачальнаяПозиция,
	КонечнаяПозиция,
	Схема,
	НовоеЗначениеСхемы,
	Смещение,
	ОбрезатьГраничныеСимволыСсылки = Ложь,
	СимволПередСсылкой = "",
	СимволКонцаСсылки = "") 

	НачалоСтроки = Лев(Строка, Смещение + НачальнаяПозиция - 1);

	ЕстьИмяСсылка = Ложь;
	Если СтрЗаканчиваетсяНа(НачалоСтроки, "Ссылка: ") Тогда
		НачалоСтроки = Лев(НачалоСтроки, СтрДлина(НачалоСтроки)-8);
		ЕстьИмяСсылка = Истина;
	КонецЕсли;

	// Обрезание граничных символов
	Если ОбрезатьГраничныеСимволыСсылки Тогда
		Ссылка = Сред(Строка,
			Смещение + НачальнаяПозиция + СтрДлина(СимволПередСсылкой),
			КонечнаяПозиция - НачальнаяПозиция - СтрДлина(СимволПередСсылкой) - СтрДлина(СимволКонцаСсылки));
	Иначе
		Ссылка = Сред(Строка, Смещение + НачальнаяПозиция, КонечнаяПозиция - НачальнаяПозиция);
	КонецЕсли;

	Если ЕстьИмяСсылка Тогда
		ПредставлениеСсылки = НСтр("ru = 'Ссылка'; en = 'Tap here'");
	Иначе
		ПредставлениеСсылки = Ссылка;
	КонецЕсли;
	КонецСтроки         = Прав(Строка, СтрДлина(Строка) - (Смещение + КонечнаяПозиция - 1));

	// Замены схемы в ссылке при необходимости, например "www." => "http://www."
	Если ЗначениеЗаполнено(НовоеЗначениеСхемы) Тогда

		ДлинаСхемы = СтрДлина(Схема);
		СхемаВСсылке = Лев(Ссылка, ДлинаСхемы);

		Если НРег(Схема) = НРег(СхемаВСсылке) Тогда
			Ссылка = НовоеЗначениеСхемы + Сред(Ссылка, ДлинаСхемы + 1);
		КонецЕсли;

	КонецЕсли;

	// Удаление тегов из ссылки
	ПозицияНачалаОткрывающегоТега = СтрНайти(Ссылка, "<");
	Пока ПозицияНачалаОткрывающегоТега <> 0 Цикл

		СтруктураТега = ПолучитьТегВТекстеHTML(Ссылка, , ПозицияНачалаОткрывающегоТега);
		Если ЗаполненаСтруктураТега(СтруктураТега) Тогда

			Ссылка = Лев(Ссылка, СтруктураТега.ПозицияНачалаОткрывающегоТега - 1) + Сред(Ссылка, СтруктураТега.ПозицияОкончанияОткрывающегоТега + 1);
			ПозицияНачалаОткрывающегоТега = ПозицияНачалаОткрывающегоТега - 1;

		КонецЕсли;

		ПозицияНачалаОткрывающегоТега = СтрНайти(Ссылка, "<",, ПозицияНачалаОткрывающегоТега);

	КонецЦикла;

	Если Не СтрНайти(Строка, """") Тогда
		СсылкаСТегом = "<a href=""" + Ссылка + """>" + ПредставлениеСсылки + "</a>";

	ИначеЕсли Не СтрНайти(Строка, "'") Тогда
		СсылкаСТегом = "<a href='" + Ссылка + "'>" + ПредставлениеСсылки + "</a>";

	Иначе
		РаботаСHTMLКлиентСервер.ЗаменитьСпецСимволыHTMLОбратно(Ссылка);
		РаботаСHTMLКлиентСервер.ЗаменитьСпецСимволыHTML(Ссылка);

		СсылкаСТегом = "<a href=""" + Ссылка + """>" + ПредставлениеСсылки + "</a>";

	КонецЕсли;

	Строка   = НачалоСтроки + СсылкаСТегом + КонецСтроки;
	Смещение = СтрДлина(НачалоСтроки + СсылкаСТегом) + 1;

КонецПроцедуры

// Добавляет теги ко всем ссылкам, находящимся в строке и соответствующим указанной схеме.
Процедура ДобавитьТегиКСсылкамСоСхемой(ТекстHTML,Схема, НовоеЗначениеСхемы = "")

	СхемаПоиска         = НРег(Схема);
	ТекстHTMLПоиска     = НРег(ТекстHTML);
	Длина               = СтрДлина(ТекстHTML);
	НоваяСтрока         = "";
	Смещение            = 0;
	КонецТега           = ">";
	ДлинаКонцаТега      = СтрДлина(КонецТега);
	ЯвляетсяТегомЯкоря  = Ложь;
	ЗакрывающийТегЯкоря = "</a>";
	НазваниеЭлементаСсылки     = "a";
	ДлинаЗакрывающегоТегаЯкоря = СтрДлина(ЗакрывающийТегЯкоря);

	НачалоСсылки        = СтрНайти(ТекстHTMLПоиска, СхемаПоиска);
	СписокОграничителейURI = РаботаСHTMLВызовСервераПовтИсп.СписокОграничителейURI();

	Пока НачалоСсылки <> 0 Цикл

		// Проверять что позиция не в параметрах какого-либо тега
		Если ПозицияНаходитсяВПараметреТега(ТекстHTMLПоиска, НачалоСсылки, НазваниеЭлементаСсылки, ЯвляетсяТегомЯкоря) Тогда

			ПозицияОкончанияОткрывающегоТега = 0;

			Если ЯвляетсяТегомЯкоря Тогда

				// Если тег является якорем - ищем 
				ПозицияОкончанияОткрывающегоТега = СтрНайти(ТекстHTMLПоиска, ЗакрывающийТегЯкоря,, НачалоСсылки);
				ПозицияОкончанияОткрывающегоТега = ПозицияОкончанияОткрывающегоТега + ДлинаЗакрывающегоТегаЯкоря;
				ДлинаСмещения = ДлинаЗакрывающегоТегаЯкоря;

			КонецЕсли;

			Если ПозицияОкончанияОткрывающегоТега = 0 Тогда

				ПозицияОкончанияОткрывающегоТега = СтрНайти(ТекстHTMLПоиска, КонецТега,, НачалоСсылки);

				Если ПозицияОкончанияОткрывающегоТега = 0 Тогда

					// Если нет окончания тега - не выделяем больше ссылок
					Прервать;

				КонецЕсли;

				ПозицияОкончанияОткрывающегоТега = ПозицияОкончанияОткрывающегоТега + ДлинаКонцаТега;
				ДлинаСмещения = ДлинаКонцаТега;

			КонецЕсли;

			// Если есть окончание тега - выделяем ссылки после тега
			Смещение        = Смещение + (ПозицияОкончанияОткрывающегоТега - 1);
			ТекстHTMLПоиска = Сред(ТекстHTMLПоиска, ПозицияОкончанияОткрывающегоТега);
			НачалоСсылки    = СтрНайти(ТекстHTMLПоиска, СхемаПоиска);

			Продолжить;

		КонецЕсли;

		Если ПозицияНаходитсяВТеге(ТекстHTMLПоиска, НазваниеЭлементаСсылки, НачалоСсылки) Тогда

			ПозицияЗакрывающегоТегаЯкоря = СтрНайти(ТекстHTMLПоиска, ЗакрывающийТегЯкоря,, НачалоСсылки);

			Если ПозицияЗакрывающегоТегаЯкоря = 0 Тогда

				// Если нет закрывающего "якорь" тега - не выделяем больше ссылок
				Прервать;

			КонецЕсли;

			ПозицияЗакрывающегоТегаЯкоря = ПозицияЗакрывающегоТегаЯкоря + ДлинаЗакрывающегоТегаЯкоря;

			// Если есть закрывающий "якорь" тег - выделяем ссылки после закрывающего тега
			Смещение        = Смещение + (ПозицияЗакрывающегоТегаЯкоря - 1);
			ТекстHTMLПоиска = Сред(ТекстHTMLПоиска, ПозицияЗакрывающегоТегаЯкоря);
			НачалоСсылки    = СтрНайти(ТекстHTMLПоиска, СхемаПоиска);

			Продолжить;

		КонецЕсли;

		Если НачалоСсылки = 1 Тогда
			СимволПередСсылкой = "";

		Иначе

			СимволПередСсылкой = Сред(ТекстHTMLПоиска, НачалоСсылки - 1, 1);

			Если СимволПередСсылкой = ";" Тогда

				ЗакодированныеКавычки = "&quot;";
				ДлинаКавычек          = СтрДлина(ЗакодированныеКавычки);

				Если НачалоСсылки - ДлинаКавычек > 0 Тогда
					ВозможныеКавычки = Сред(ТекстHTMLПоиска, НачалоСсылки - ДлинаКавычек, ДлинаКавычек);

					Если ВозможныеКавычки = ЗакодированныеКавычки Тогда
						СимволПередСсылкой = ЗакодированныеКавычки;
					КонецЕсли;

				КонецЕсли;

			КонецЕсли;

			Если СписокОграничителейURI.НайтиПоЗначению(СимволПередСсылкой) <> Неопределено Тогда
				СимволПередСсылкой = "";

			ИначеЕсли СимволПередСсылкой = ">" Тогда
				СимволПередСсылкой = ""; // Тег перед ссылкой

			КонецЕсли;

		КонецЕсли;

		Если ПустаяСтрока(СимволПередСсылкой) Тогда

			КонецСсылки = НайтиКонецСсылки(ТекстHTMLПоиска, НачалоСсылки + СтрДлина(СхемаПоиска), СписокОграничителейURI);

			// Добавляем теги к оригинальному тексту, т.к. текст поиска в нижнем регистре
			ДобавитьТегСсылки(
				ТекстHTML,
				НачалоСсылки,
				КонецСсылки,
				Схема,
				НовоеЗначениеСхемы,
				Смещение);

			ТекстHTMLПоиска = Сред(ТекстHTMLПоиска, КонецСсылки + 1);
			НачалоСсылки    = СтрНайти(ТекстHTMLПоиска, СхемаПоиска);

			Продолжить;

		ИначеЕсли СимволПередСсылкой = """" Или СимволПередСсылкой = "&quot;" Тогда

			СимволКонцаСсылки = """";
			КонецСсылки       = НайтиКонецСсылки(ТекстHTMLПоиска, НачалоСсылки + СтрДлина(СхемаПоиска), СписокОграничителейURI, Истина, СимволКонцаСсылки);

			// Добавляем теги к оригинальному тексту, т.к. текст поиска в нижнем регистре
			ДобавитьТегСсылки(
				ТекстHTML,
				НачалоСсылки - СтрДлина(СимволПередСсылкой), // Включаем открывающие кавычки в ссылку
				КонецСсылки,
				Схема,
				НовоеЗначениеСхемы,
				Смещение,
				Истина,
				СимволПередСсылкой,
				СимволКонцаСсылки);

			ТекстHTMLПоиска = Сред(ТекстHTMLПоиска, КонецСсылки + 1);
			НачалоСсылки    = СтрНайти(ТекстHTMLПоиска, СхемаПоиска);

			Продолжить;

		КонецЕсли;

		Смещение        = Смещение + НачалоСсылки;
		ТекстHTMLПоиска = Сред(ТекстHTMLПоиска, НачалоСсылки + 1);
		НачалоСсылки    = СтрНайти(ТекстHTMLПоиска, СхемаПоиска);

	КонецЦикла;

КонецПроцедуры

// Возвращает позицию конца ссылки в строке - первый незначащий символ
Функция НайтиКонецСсылки(ТекстHTML, НачальнаяПозиция, СписокНезначащихСимволов,
	РазрешитьПробелВСсылке = Ложь, СимволКонцаСсылки = Неопределено)

	Списки = РаботаСHTMLВызовСервераПовтИсп.ПолучитьСпискиСимволов();

	НайденНезначащийСимвол           = Ложь;
	ОбрабатываемаяСтрока             = Сред(ТекстHTML, НачальнаяПозиция);
	ПоложениеПервогоНезначащегоСимвола = 0;

	Пока Не НайденНезначащийСимвол Цикл

		ПервыйСимвол = Лев(ОбрабатываемаяСтрока, 1);

		Если ЗначениеЗаполнено(СимволКонцаСсылки) И ПервыйСимвол = СимволКонцаСсылки Тогда

			НайденНезначащийСимвол             = Истина;
			ПоложениеПервогоНезначащегоСимвола = ПоложениеПервогоНезначащегоСимвола + 1;

			Прервать;

		ИначеЕсли ЗначениеЗаполнено(СимволКонцаСсылки) И ПервыйСимвол = "&" Тогда

			ВозможныйСпецСимвол = ПолучитьВозможныйСпецСимвол(ОбрабатываемаяСтрока);
			СпецСимвол          = Списки.ОбратноеСоответствиеСпецСимволов.Получить(ВозможныйСпецСимвол);

			Если СпецСимвол <> Неопределено И Символ(СпецСимвол) = СимволКонцаСсылки Тогда

				НайденНезначащийСимвол = Истина;
				СимволКонцаСсылки      = "&" + ВозможныйСпецСимвол + ";";
				ПоложениеПервогоНезначащегоСимвола = ПоложениеПервогоНезначащегоСимвола + СтрДлина(СимволКонцаСсылки);

				Прервать;

			КонецЕсли;

		КонецЕсли;

		Если ПервыйСимвол = "&" Тогда

			ВозможныйСпецСимвол        = ПолучитьВозможныйСпецСимвол(ОбрабатываемаяСтрока);
			ДлинаВозможногоСпецСимвола = СтрДлина(ВозможныйСпецСимвол);

			Если Списки.ЗначимыеВURIСпецСимволы.НайтиПоЗначению(ВозможныйСпецСимвол) <> Неопределено Тогда

				ОбрабатываемаяСтрока = Сред(ОбрабатываемаяСтрока, ДлинаВозможногоСпецСимвола + 3);
				ПоложениеПервогоНезначащегоСимвола = ПоложениеПервогоНезначащегоСимвола + ДлинаВозможногоСпецСимвола + 2;

				Продолжить;

			ИначеЕсли Списки.ДопустимыеВURIСпецСимволы.НайтиПоЗначению(ВозможныйСпецСимвол) <> Неопределено Тогда

				ЕстьЗначимыйСимволДоКонцаСсылки = ЕстьЗначимыйСимволДоКонцаСсылки(
					ОбрабатываемаяСтрока,
					СписокНезначащихСимволов,
					РазрешитьПробелВСсылке,
					ДлинаВозможногоСпецСимвола + 2);

				Если ЕстьЗначимыйСимволДоКонцаСсылки Тогда

					ОбрабатываемаяСтрока = Сред(ОбрабатываемаяСтрока, ДлинаВозможногоСпецСимвола + 3);
					ПоложениеПервогоНезначащегоСимвола = ПоложениеПервогоНезначащегоСимвола + ДлинаВозможногоСпецСимвола + 2;

					Продолжить;

				Иначе
					ПервыйСимвол = "";

				КонецЕсли;

			ИначеЕсли Списки.ОбратноеСоответствиеСпецСимволов.Получить(ВозможныйСпецСимвол) <> Неопределено Тогда
				ПервыйСимвол = "";

			КонецЕсли;

		КонецЕсли;

		Если ПервыйСимвол = "<" Тогда

			СтруктураТега = ПолучитьТегВТекстеHTML(ОбрабатываемаяСтрока);
			Если ЗаполненаСтруктураТега(СтруктураТега) Тогда

				Если СтруктураТега.ПозицияНачалаОткрывающегоТега = 1 Тогда

					Если ТегСодержитсяВСписке(СтруктураТега, Списки.СписокДопустимыхВСсылкеТегов) Тогда

						ОбрабатываемаяСтрока = Сред(ОбрабатываемаяСтрока, 
							СтруктураТега.ПозицияОкончанияОткрывающегоТега + 1);

						ПоложениеПервогоНезначащегоСимвола = 
							ПоложениеПервогоНезначащегоСимвола + СтруктураТега.ПозицияОкончанияОткрывающегоТега;

						Продолжить;

					Иначе
						ПервыйСимвол = "";

					КонецЕсли;

				Иначе
					ПервыйСимвол = "";

				КонецЕсли;

			Иначе
				ПервыйСимвол = "";

			КонецЕсли;

		КонецЕсли;

		Если СписокНезначащихСимволов.НайтиПоЗначению(ПервыйСимвол) <> Неопределено 
			И Не ЕстьЗначимыйСимволДоКонцаСсылки(ОбрабатываемаяСтрока, СписокНезначащихСимволов, РазрешитьПробелВСсылке) Тогда
			ПервыйСимвол = "";

		КонецЕсли;
		
		Если ПервыйСимвол = " " И РазрешитьПробелВСсылке Тогда

			ОбрабатываемаяСтрока = Сред(ОбрабатываемаяСтрока, 2);
			ПоложениеПервогоНезначащегоСимвола = ПоложениеПервогоНезначащегоСимвола + 1;

			Продолжить;

		КонецЕсли;

		Если ПустаяСтрока(ПервыйСимвол) Тогда

			НайденНезначащийСимвол = Истина;

			Прервать;

		КонецЕсли;

		ОбрабатываемаяСтрока = Сред(ОбрабатываемаяСтрока, 2);
		ПоложениеПервогоНезначащегоСимвола = ПоложениеПервогоНезначащегоСимвола + 1;

	КонецЦикла;

	// Если не был найден не значащий символ - все равно возвращаем - позиция конца строки.
	Возврат НачальнаяПозиция + ПоложениеПервогоНезначащегоСимвола;

КонецФункции

// Проверяет наличие значащего символа до конца ссылки. 
// Концом ссылки считаются стандартные незначащие символы.
Функция ЕстьЗначимыйСимволДоКонцаСсылки(Строка, СписокНезначащихСимволов,
	РазрешитьПробелВСсылке = Ложь, НачальнаяПозиция = 0)

	ОбратноеСоответствиеСпецСимволов = РаботаСHTMLВызовСервераПовтИсп.ПолучитьОбратноеСоответствиеСпецСимволов();
	ДопустимыеВURIСпецСимволы        = РаботаСHTMLВызовСервераПовтИсп.ДопустимыеВURIСпецСимволы();
	ЗначимыеВURIСпецСимволы          = РаботаСHTMLВызовСервераПовтИсп.ЗначимыеВURIСпецСимволы();
	СписокДопустимыхВСсылкеТегов     = РаботаСHTMLВызовСервераПовтИсп.СписокДопустимыхВСсылкеТегов();

	ОбрабатываемаяСтрока = Сред(Строка, НачальнаяПозиция + 1);
	НайденЗначащийСимвол = Ложь;

	Пока Не НайденЗначащийСимвол Цикл

		ПервыйСимвол = Лев(ОбрабатываемаяСтрока, 1);

		Если ПервыйСимвол = " " И РазрешитьПробелВСсылке Тогда
			ОбрабатываемаяСтрока = Сред(ОбрабатываемаяСтрока, 2);

		ИначеЕсли ПустаяСтрока(ПервыйСимвол) Тогда
			Прервать;

		ИначеЕсли ПервыйСимвол = "&" Тогда

			ВозможныйСпецСимвол = ПолучитьВозможныйСпецСимвол(ОбрабатываемаяСтрока);
			ДлинаВозможногоСпецСимвола = СтрДлина(ВозможныйСпецСимвол);

			Если ЗначимыеВURIСпецСимволы.НайтиПоЗначению(ВозможныйСпецСимвол) <> Неопределено Тогда
				НайденЗначащийСимвол = Истина;

			ИначеЕсли ДопустимыеВURIСпецСимволы.НайтиПоЗначению(ВозможныйСпецСимвол) <> Неопределено
				Или ОбратноеСоответствиеСпецСимволов.Получить(ВозможныйСпецСимвол) <> Неопределено Тогда

				ОбрабатываемаяСтрока = Сред(ОбрабатываемаяСтрока, ДлинаВозможногоСпецСимвола + 3);

			Иначе

				НайденЗначащийСимвол = Истина;

			КонецЕсли;

		ИначеЕсли ПервыйСимвол = "<" Тогда

			СтруктураТега = ПолучитьТегВТекстеHTML(ОбрабатываемаяСтрока);
			Если ЗаполненаСтруктураТега(СтруктураТега) Тогда

				Если СтруктураТега.ПозицияНачалаОткрывающегоТега = 1 Тогда

					Если ТегСодержитсяВСписке(СтруктураТега, СписокДопустимыхВСсылкеТегов) Тогда

						ОбрабатываемаяСтрока = Сред(ОбрабатываемаяСтрока, СтруктураТега.ПозицияОкончанияОткрывающегоТега + 1);
						Продолжить;

					Иначе
						Прервать;
					КонецЕсли;

				Иначе
					Прервать;
				КонецЕсли;

			Иначе
				Прервать;
			КонецЕсли;

		ИначеЕсли СписокНезначащихСимволов.НайтиПоЗначению(ПервыйСимвол) <> Неопределено Тогда
			ОбрабатываемаяСтрока = Сред(ОбрабатываемаяСтрока, 2);

		Иначе
			НайденЗначащийСимвол = Истина;

		КонецЕсли;

	КонецЦикла;

	Возврат НайденЗначащийСимвол;

КонецФункции

// Возвращает спецсимвол HTML (&СпецСимвол;), если он присутствует.
// Возвращает Неопределено, если нет возможных спецсимволов.
Функция ПолучитьВозможныйСпецСимвол(Строка, ПозицияСпецСимвола = 0)

	ОбрабатываемаяСтрока = Сред(Строка, ПозицияСпецСимвола + 1);
	ПервыйСимвол         = Лев(ОбрабатываемаяСтрока, 1);

	Если ПервыйСимвол = "&" Тогда

		КонецСпецСимвола = СтрНайти(ОбрабатываемаяСтрока, ";");

		Если КонецСпецСимвола <> 0 Тогда

			СпецСимвол = Сред(ОбрабатываемаяСтрока, 2, КонецСпецСимвола - 2);

			Возврат СпецСимвол;

		КонецЕсли;

	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Возвращает структуру первого тега данного элемента в тексте HTML.
// Если не указано название элемента то возвращает первый встреченный тег.
// Поиск тега ведется с переданной начальной позиции.
//
// 	Структура тега: 
//		НазваниеЭлемента - название элемента найденного тега;
//		ПараметрыОткрывающегоТега - строка, содержащая параметры открывающего тега;
//		Содержание - стока, содержащие данные, находящие между открывающим и закрывающим тегом;
//		ПозицияНачалаОткрывающегоТега - позиция символа "<" открывающего тега;
//		ПозицияОкончанияОткрывающегоТега - позиция символа ">" открывающего тега;
//		ПозицияНачалаЗакрывающегоТега - позиция символа "<" закрывающего тега;
//		ПозицияОкончанияЗакрывающегоТега - позиция символа ">" закрывающего тега;
//		ПозицияНачалаТега - позиция символа "<" открывающего тега;
//		ПозицияОкончанияТега - если есть закрывающий тег, то позиция символа ">" закрывающего тега;
//							   если нет закрывающего тега, то позиция символа ">" открывающего тега.
//
Функция ПолучитьТегВТекстеHTML(ТекстHTML, НазваниеЭлемента = "", НачальнаяПозиция = 1)

	Если Не ЗначениеЗаполнено(НазваниеЭлемента) Тогда

		НачалоОткрывающегоТега  = "<";
		НазваниеТега            = "";
		ОбрабатываемыйТекстHTML = ТекстHTML;

		ПозицияНачалаОткрывающегоТега = СтрНайти(ОбрабатываемыйТекстHTML, НачалоОткрывающегоТега);
		Пока ПозицияНачалаОткрывающегоТега <> 0 Цикл

			ОбрабатываемыйТекстHTML  = Сред(ОбрабатываемыйТекстHTML, ПозицияНачалаОткрывающегоТега + 1);
			ПервыйСимволНазванияТега = Лев(ОбрабатываемыйТекстHTML, 1);

			Если ЗначениеЗаполнено(ПервыйСимволНазванияТега) Тогда
				ОчереднойСимволНазванияТега = ПервыйСимволНазванияТега;

				Пока ЗначениеЗаполнено(ОчереднойСимволНазванияТега)
					И ОчереднойСимволНазванияТега <> ">" Цикл

					НазваниеТега                = НазваниеТега + ОчереднойСимволНазванияТега;
					ОбрабатываемыйТекстHTML     = Сред(ОбрабатываемыйТекстHTML, 2);
					ОчереднойСимволНазванияТега = Лев(ОбрабатываемыйТекстHTML, 1);

				КонецЦикла;

				ПозицияНачалаОткрывающегоТега = 0;

			Иначе

				ПозицияНачалаОткрывающегоТега = СтрНайти(ОбрабатываемыйТекстHTML, НачалоОткрывающегоТега);

			КонецЕсли;

		КонецЦикла;

		Если ЗначениеЗаполнено(НазваниеТега) Тогда

			НазваниеЭлемента = НазваниеТега;

		КонецЕсли;

	КонецЕсли;

	ПараметрыОткрывающегоТега        = "";
	Содержание                       = "";
	ПозицияНачалаОткрывающегоТега    = 0;
	ПозицияОкончанияОткрывающегоТега = 0;
	ПозицияНачалаЗакрывающегоТега    = 0;
	ПозицияОкончанияЗакрывающегоТега = 0;
	ПозицияНачалаТега                = 0;
	ПозицияОкончанияТега             = 0;

	НачалоОткрывающегоТега  = "<" + НРег(НазваниеЭлемента);
	КонецОткрывающегоТега   = ">";
	ЗакрывающийТег          = "</" + НРег(НазваниеЭлемента) + ">";
	ОбрабатываемыйТекстHTML = Сред(НРег(ТекстHTML), НачальнаяПозиция);

	Смещение = НачальнаяПозиция - 1;

	ПозицияНачалаОткрывающегоТегаСПараметрами   = СтрНайти(ОбрабатываемыйТекстHTML, НачалоОткрывающегоТега + " ");
	ПозицияНачалаОткрывающегоТегаСПараметрамиПС = СтрНайти(ОбрабатываемыйТекстHTML, НачалоОткрывающегоТега + Символы.ПС);
	ПозицияНачалаОткрывающегоТегаБезПараметров  = СтрНайти(ОбрабатываемыйТекстHTML, НачалоОткрывающегоТега + КонецОткрывающегоТега);
	ПозицияНачалаОткрывающегоТегаСЗакрытием     = СтрНайти(ОбрабатываемыйТекстHTML, НачалоОткрывающегоТега + "/>");
	
	Если ПозицияНачалаОткрывающегоТегаСПараметрами <> 0 Тогда
		Если ПозицияНачалаОткрывающегоТега <> 0 Тогда
			ПозицияНачалаОткрывающегоТега = Мин(ПозицияНачалаОткрывающегоТега, ПозицияНачалаОткрывающегоТегаСПараметрами);
		Иначе
			ПозицияНачалаОткрывающегоТега = ПозицияНачалаОткрывающегоТегаСПараметрами;
		КонецЕсли;
	КонецЕсли;

	Если ПозицияНачалаОткрывающегоТегаСПараметрамиПС <> 0 Тогда
		Если ПозицияНачалаОткрывающегоТега <> 0 Тогда
			ПозицияНачалаОткрывающегоТега = Мин(ПозицияНачалаОткрывающегоТега, ПозицияНачалаОткрывающегоТегаСПараметрамиПС);
		Иначе
			ПозицияНачалаОткрывающегоТега = ПозицияНачалаОткрывающегоТегаСПараметрамиПС;
		КонецЕсли;
	КонецЕсли;

	Если ПозицияНачалаОткрывающегоТегаБезПараметров <> 0 Тогда
		Если ПозицияНачалаОткрывающегоТега <> 0 Тогда
			ПозицияНачалаОткрывающегоТега = Мин(ПозицияНачалаОткрывающегоТега, ПозицияНачалаОткрывающегоТегаБезПараметров);
		Иначе
			ПозицияНачалаОткрывающегоТега = ПозицияНачалаОткрывающегоТегаБезПараметров;
		КонецЕсли;
	КонецЕсли;

	Если ПозицияНачалаОткрывающегоТегаСЗакрытием <> 0 Тогда
		Если ПозицияНачалаОткрывающегоТега <> 0 Тогда
			ПозицияНачалаОткрывающегоТега = Мин(ПозицияНачалаОткрывающегоТега, ПозицияНачалаОткрывающегоТегаСЗакрытием);
		Иначе
			ПозицияНачалаОткрывающегоТега = ПозицияНачалаОткрывающегоТегаСЗакрытием;
		КонецЕсли;
	КонецЕсли;

	Если ПозицияНачалаОткрывающегоТега <> 0 Тогда

		ОбрабатываемыйТекстHTML = Сред(ОбрабатываемыйТекстHTML, ПозицияНачалаОткрывающегоТега + СтрДлина(НачалоОткрывающегоТега));
		Смещение = Смещение + ПозицияНачалаОткрывающегоТега + СтрДлина(НачалоОткрывающегоТега) - 1;

		ПозицияОкончанияОткрывающегоТега = СтрНайти(ОбрабатываемыйТекстHTML, КонецОткрывающегоТега);
		Если ПозицияОкончанияОткрывающегоТега <> 0 Тогда

			ПараметрыОткрывающегоТега = Сред(ТекстHTML, Смещение + 1, ПозицияОкончанияОткрывающегоТега - 1);
			ОбрабатываемыйТекстHTML   = Сред(ОбрабатываемыйТекстHTML, ПозицияОкончанияОткрывающегоТега + СтрДлина(КонецОткрывающегоТега));
			Смещение                  = Смещение + ПозицияОкончанияОткрывающегоТега + СтрДлина(КонецОткрывающегоТега) - 1;

		Иначе

			ПозицияНачалаОткрывающегоТега = 0;

		КонецЕсли;

		ПозицияНачалаЗакрывающегоТега = СтрНайти(ОбрабатываемыйТекстHTML, ЗакрывающийТег);
		Если ПозицияНачалаЗакрывающегоТега <> 0 Тогда
			Содержание = Сред(ТекстHTML, Смещение + 1, ПозицияНачалаЗакрывающегоТега - 1);

		КонецЕсли;

	КонецЕсли;

	Если ПозицияНачалаОткрывающегоТега <> 0 Тогда
		ПозицияНачалаОткрывающегоТега = ПозицияНачалаОткрывающегоТега + (НачальнаяПозиция - 1);
		ПозицияНачалаТега = ПозицияНачалаОткрывающегоТега;
	КонецЕсли;

	Если ПозицияОкончанияОткрывающегоТега <> 0 Тогда
		ПозицияОкончанияОткрывающегоТега = ПозицияОкончанияОткрывающегоТега + (СтрДлина(НачалоОткрывающегоТега) - 1) + ПозицияНачалаОткрывающегоТега;
	КонецЕсли;

	Если ПозицияНачалаЗакрывающегоТега <> 0 Тогда
		ПозицияНачалаЗакрывающегоТега = ПозицияНачалаЗакрывающегоТега + ПозицияОкончанияОткрывающегоТега;
		ПозицияОкончанияЗакрывающегоТега = ПозицияНачалаЗакрывающегоТега + (СтрДлина(ЗакрывающийТег) - 1);
	КонецЕсли;

	Если ПозицияОкончанияЗакрывающегоТега <> 0 Тогда
		ПозицияОкончанияТега = ПозицияОкончанияЗакрывающегоТега;
	ИначеЕсли ПозицияОкончанияОткрывающегоТега <> 0 Тогда
		ПозицияОкончанияТега = ПозицияОкончанияОткрывающегоТега;
	КонецЕсли;

	СтруктураТега = Новый Структура();
	СтруктураТега.Вставить("НазваниеЭлемента", НазваниеЭлемента);
	СтруктураТега.Вставить("ПараметрыОткрывающегоТега", ПараметрыОткрывающегоТега);
	СтруктураТега.Вставить("Содержание", Содержание);
	СтруктураТега.Вставить("ПозицияНачалаОткрывающегоТега", ПозицияНачалаОткрывающегоТега);
	СтруктураТега.Вставить("ПозицияОкончанияОткрывающегоТега", ПозицияОкончанияОткрывающегоТега);
	СтруктураТега.Вставить("ПозицияНачалаЗакрывающегоТега", ПозицияНачалаЗакрывающегоТега);
	СтруктураТега.Вставить("ПозицияОкончанияЗакрывающегоТега", ПозицияОкончанияЗакрывающегоТега);
	СтруктураТега.Вставить("ПозицияНачалаТега", ПозицияНачалаТега);
	СтруктураТега.Вставить("ПозицияОкончанияТега", ПозицияОкончанияТега);

	Возврат СтруктураТега;

КонецФункции

// Проверяет наличие название элемента тега в списке значений
Функция ТегСодержитсяВСписке(СтруктураТега, СписокЗначений)

	Если Не ЗаполненаСтруктураТега(СтруктураТега) Тогда
		Возврат Ложь;
	КонецЕсли;

	НазваниеЭлемента = НРег(СтруктураТега.НазваниеЭлемента);

	Для Каждого ЭлементСписка Из СписокЗначений Цикл

		ЗначениеЭлементаСписка = ЭлементСписка.Значение;
		Если ТипЗнч(ЗначениеЭлементаСписка) = Тип("Строка") Тогда

			ЗначениеЭлементаСписка = НРег(ЗначениеЭлементаСписка);
			ЗначениеЗакрывающегоЭлементаСписка = "/" + ЗначениеЭлементаСписка;

			Если НазваниеЭлемента = ЗначениеЭлементаСписка
				Или НазваниеЭлемента = ЗначениеЗакрывающегоЭлементаСписка Тогда

				Возврат Истина;

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Возврат Ложь;

КонецФункции

// Проверяет заполненность структуры тега: 
// - наличие всех необходимых тегу свойств в структуре;
// - заполненность позиции начала и окончания тега.
Функция ЗаполненаСтруктураТега(СтруктураТега)

	Если (Не СтруктураТега.Свойство("НазваниеЭлемента"))
		Или (Не СтруктураТега.Свойство("ПараметрыОткрывающегоТега"))
		Или (Не СтруктураТега.Свойство("Содержание"))
		Или (Не СтруктураТега.Свойство("ПозицияНачалаОткрывающегоТега"))
		Или (Не СтруктураТега.Свойство("ПозицияОкончанияОткрывающегоТега"))
		Или (Не СтруктураТега.Свойство("ПозицияНачалаЗакрывающегоТега"))
		Или (Не СтруктураТега.Свойство("ПозицияОкончанияЗакрывающегоТега"))
		Или (Не СтруктураТега.Свойство("ПозицияНачалаТега"))
		Или (Не СтруктураТега.Свойство("ПозицияОкончанияТега"))  Тогда

		Возврат Ложь;

	КонецЕсли;

	Если ЗначениеЗаполнено(СтруктураТега.ПозицияНачалаТега)
		И ЗначениеЗаполнено(СтруктураТега.ПозицияОкончанияТега) Тогда

		Возврат Истина;

	КонецЕсли;

	Возврат Ложь;

КонецФункции

// Проверяет нахождение внутри параметров открывающего тега (возможно, который не закрыт).
//
Функция ПозицияНаходитсяВПараметреТега(ТекстHTML, Позиция, НужныйТег = "", ЯвляетсяНужнымТегом = Ложь)

	НачалоТега = "<";
	КонецТега  = ">";
	ОткрытТег  = Ложь;

	ЯвляетсяНужнымТегом = Ложь;
	НачалоТекстаHTML    = Лев(НРег(ТекстHTML), Позиция - 1);

	НайденнаяПозицияНачалаОткрывающегоТега = 0;
	ПозицияНачалаОткрывающегоТега          = СтрНайти(НачалоТекстаHTML, НачалоТега);

	Пока ПозицияНачалаОткрывающегоТега <> 0 Цикл

		НачалоТекстаHTML         = Сред(НачалоТекстаHTML, ПозицияНачалаОткрывающегоТега + 1);
		ПервыйСимволНазванияТега = Сред(НачалоТекстаHTML, 1, 1);
		ПозицияНужногоТега       = СтрНайти(НачалоТекстаHTML, НужныйТег + " ");

		Если ПозицияНужногоТега = 0 Тогда
			ПозицияНужногоТега = СтрНайти(НачалоТекстаHTML, НужныйТег + ">");
		КонецЕсли;

		Если ЗначениеЗаполнено(ПервыйСимволНазванияТега) Тогда

			ПозицияОкончанияОткрывающегоТега = СтрНайти(НачалоТекстаHTML, КонецТега);
			Если ПозицияОкончанияОткрывающегоТега <> 0 Тогда
				НачалоТекстаHTML = Сред(НачалоТекстаHTML, ПозицияОкончанияОткрывающегоТега + 1);

			Иначе

				Если ПозицияНужногоТега = 1 Тогда
					ЯвляетсяНужнымТегом = Истина;
				КонецЕсли;

				ОткрытТег = Истина;

				Прервать;

			КонецЕсли;

		КонецЕсли;

		ПозицияНачалаОткрывающегоТега = СтрНайти(НачалоТекстаHTML, НачалоТега);

	КонецЦикла;

	Возврат ОткрытТег;

КонецФункции

// Дописывать значение из href в свойство title ссылок и картинок.
//
Процедура ЗаполнитьСвойствоTitleУСсылок(ТекстHTML)

	// Для отображения подсказки к относительным ссылкам используется упрощенный
	// метод определения относительной ссылки и работы с тегом BASE, для самых частотных случаев.
	// Ссылка считается относительной, если в нет не присутствует ":".
	// К представлению относительных ссылок дописывается текст тега Base.
	ТегBody   = ПолучитьТегВТекстеHTML(ТекстHTML, "body");
	ТегBase   = ПолучитьТегВТекстеHTML(ТекстHTML, "base");
	ТекстBase = ПолучитьЗначениеПараметраТега(ТегBase, "href");

	Если ТекстBase = Неопределено
		Или (ЗаполненаСтруктураТега(ТегBody) И ТегBase.ПозицияОкончанияТега > ТегBody.ПозицияНачалаТега) Тогда
		ТекстBase = "";
	КонецЕсли;

	Тег = ПолучитьТегВТекстеHTML(ТекстHTML, "a");

	Пока ЗаполненаСтруктураТега(Тег) <> 0 Цикл

		СимволОграниченияHref  = Неопределено;
		СимволОграниченияTitle = Неопределено;
		Смещение    = 0;
		НачалоTitle = 0;
		КонецTitle  = 0;
		ТекстHref   = ПолучитьЗначениеПараметраТега(Тег, "href", СимволОграниченияHref);

		// Считаем ссылку относительной, если в ней нет символа ":"
		Если ТекстBase <> "" И СтрНайти(ТекстHref, ":") = 0 Тогда

			Если (Не СтрНачинаетсяС(ТекстHref, "\") И Не СтрНачинаетсяС(ТекстHref, "/"))
				И (Не СтрЗаканчиваетсяНа(ТекстBase, "\") И Не СтрЗаканчиваетсяНа(ТекстBase, "/")) Тогда

				// Нет "/" в тексте ссылки и Base
				ТекстHref = "/" + ТекстHref;

			ИначеЕсли (СтрНачинаетсяС(ТекстHref, "\") Или СтрНачинаетсяС(ТекстHref, "/"))
				И (СтрЗаканчиваетсяНа(ТекстBase, "\") Или СтрЗаканчиваетсяНа(ТекстBase, "/")) Тогда

				// Есть "/" в тексте ссылки и Base
				ТекстHref = Сред(ТекстHref, 2);

			КонецЕсли;

			ТекстHref = ТекстBase + ТекстHref;

		КонецЕсли;

		Если ТекстHref = Неопределено Тогда
			Тег = ПолучитьТегВТекстеHTML(ТекстHTML, "a", Тег.ПозицияОкончанияТега + 1);
			Продолжить;
		КонецЕсли;

		ТекстTitle = ПолучитьЗначениеПараметраТега(Тег, "title", СимволОграниченияTitle, НачалоTitle, КонецTitle);

		Если ТекстTitle = Неопределено Тогда

			ТекстTitle = СтрШаблон(
				"title=%1%2%1", СимволОграниченияHref, ТекстHref);
			Смещение = Смещение + СтрДлина(ТекстTitle) + 1;

			НовыйОткрывающийТег = СтрШаблон(
				"<%1%3 %2>", Тег.НазваниеЭлемента, ТекстTitle, Тег.ПараметрыОткрывающегоТега);

		ИначеЕсли СтрНайти(ТекстTitle, ТекстHref) = 0 Тогда

			ТекстДоTitle = Лев(Тег.ПараметрыОткрывающегоТега, НачалоTitle - 1);
			ТекстПослеTitle = Сред(Тег.ПараметрыОткрывающегоТега, КонецTitle + 1);

			Если СимволОграниченияTitle <> СимволОграниченияHref Тогда
				Если СимволОграниченияTitle = """" Тогда
					ТекстHref = СтрЗаменить(ТекстHref, """", "'");
				ИначеЕсли СимволОграниченияTitle = "'" Тогда
					ТекстHref = СтрЗаменить(ТекстHref, "'", """");
				КонецЕсли;
			КонецЕсли;

			Если СимволОграниченияTitle = "" Тогда
				ТекстTitle = СтрЗаменить(ТекстTitle, """", "'");
				ТекстHref  = СтрЗаменить(ТекстHref, """", "'");
				СимволОграниченияTitle = """";
			КонецЕсли;
			
			ТекстTitle = СтрШаблон(
				"title=%1%2%3%1", СимволОграниченияTitle, ТекстTitle, Символы.ПС + ТекстHref);

			Смещение  = Смещение + СтрДлина(ТекстHref) + 1;

			НовыйОткрывающийТег = СтрШаблон(
				"<%1%2%3%4>", Тег.НазваниеЭлемента, ТекстДоTitle, ТекстTitle, ТекстПослеTitle);

		Иначе

			Тег = ПолучитьТегВТекстеHTML(ТекстHTML, "a", Тег.ПозицияОкончанияТега + Смещение + 1);
			Продолжить;

		КонецЕсли;

		ТекстHTML =
			Лев(ТекстHTML, Тег.ПозицияНачалаОткрывающегоТега - 1)
			+ НовыйОткрывающийТег
			+ Сред(ТекстHTML, Тег.ПозицияОкончанияОткрывающегоТега + 1);

		Тег = ПолучитьТегВТекстеHTML(ТекстHTML, "a", Тег.ПозицияОкончанияТега + Смещение + 1);

	КонецЦикла;

	Тег = ПолучитьТегВТекстеHTML(ТекстHTML, "img");

	Пока ЗаполненаСтруктураТега(Тег) <> 0 Цикл

		СимволОграниченияHref  = Неопределено;
		СимволОграниченияTitle = Неопределено;
		Смещение         = 0;
		ВнешнийТегСсылки = Неопределено;
		НачалоTitle      = 0;
		КонецTitle       = 0;

		Если Не ПозицияНаходитсяВТеге(ТекстHTML, "a", Тег.ПозицияНачалаТега, ВнешнийТегСсылки) Тогда
			Тег = ПолучитьТегВТекстеHTML(ТекстHTML, "img", Тег.ПозицияОкончанияТега + Смещение + 1);
			Продолжить;
		КонецЕсли;

		ТекстHref = ПолучитьЗначениеПараметраТега(ВнешнийТегСсылки, "href", СимволОграниченияHref);
		Если ТекстHref = Неопределено Тогда
			Тег = ПолучитьТегВТекстеHTML(ТекстHTML, "img", Тег.ПозицияОкончанияТега + Смещение + 1);
			Продолжить;
		КонецЕсли;

		ТекстTitle = ПолучитьЗначениеПараметраТега(Тег, "title", СимволОграниченияTitle, НачалоTitle, КонецTitle);
		Если ТекстTitle = Неопределено Тогда

			ТекстTitle = СтрШаблон(
				"title=%1%2%1", СимволОграниченияHref, ТекстHref);

			Смещение   = Смещение + СтрДлина(ТекстTitle) + 1;

			НовыйОткрывающийТег = СтрШаблон(
				"<%1%3 %2>", Тег.НазваниеЭлемента, ТекстTitle, Тег.ПараметрыОткрывающегоТега);

		ИначеЕсли СтрНайти(ТекстTitle, ТекстHref) = 0 Тогда

			ТекстДоTitle    = Лев(Тег.ПараметрыОткрывающегоТега, НачалоTitle - 1);
			ТекстПослеTitle = Сред(Тег.ПараметрыОткрывающегоТега, КонецTitle + 1);

			Если СимволОграниченияTitle <> СимволОграниченияHref Тогда

				Если СимволОграниченияTitle = """" Тогда
					ТекстHref = СтрЗаменить(ТекстHref, """", "'");

				ИначеЕсли СимволОграниченияTitle = "'" Тогда
					ТекстHref = СтрЗаменить(ТекстHref, "'", """");

				ИначеЕсли СимволОграниченияTitle = "" Тогда

					ТекстTitle = СтрЗаменить(ТекстHref, """", "'");
					ТекстHref  = СтрЗаменить(ТекстHref, """", "'");
					СимволОграниченияTitle = """";

				КонецЕсли;

			КонецЕсли;

			ТекстTitle = СтрШаблон(
				"title=%1%2%3%1", СимволОграниченияTitle, ТекстTitle, Символы.ПС + ТекстHref);

			Смещение   = Смещение + СтрДлина(ТекстHref) + 1;

			НовыйОткрывающийТег = СтрШаблон(
				"<%1%2%3%4>", Тег.НазваниеЭлемента, ТекстДоTitle, ТекстTitle, ТекстПослеTitle);

		Иначе

			Тег = ПолучитьТегВТекстеHTML(ТекстHTML, "img", Тег.ПозицияОкончанияТега + Смещение + 1);
			Продолжить;

		КонецЕсли;

		ТекстHTML =
			Лев(ТекстHTML, Тег.ПозицияНачалаОткрывающегоТега - 1)
			+ НовыйОткрывающийТег
			+ Сред(ТекстHTML, Тег.ПозицияОкончанияОткрывающегоТега + 1);

		Тег = ПолучитьТегВТекстеHTML(ТекстHTML, "img", Тег.ПозицияОкончанияТега + Смещение + 1);

	КонецЦикла;

	Тег = ПолучитьТегВТекстеHTML(ТекстHTML, "area");

	Пока ЗаполненаСтруктураТега(Тег) <> 0 Цикл

		СимволОграниченияHref = Неопределено;
		СимволОграниченияTitle = Неопределено;
		Смещение    = 0;
		НачалоTitle = 0;
		КонецTitle  = 0;
		ТекстHref   = ПолучитьЗначениеПараметраТега(Тег, "href", СимволОграниченияHref);

		Если ТекстHref = Неопределено Тогда
			Тег = ПолучитьТегВТекстеHTML(ТекстHTML, "area", Тег.ПозицияОкончанияТега + 1);
			Продолжить;
		КонецЕсли;

		ТекстTitle = ПолучитьЗначениеПараметраТега(Тег, "title", СимволОграниченияTitle, НачалоTitle, КонецTitle);

		Если ТекстTitle = Неопределено Тогда

			ТекстTitle = СтрШаблон(
				"title=%1%2%1", СимволОграниченияHref, ТекстHref);

			Смещение   = Смещение + СтрДлина(ТекстTitle) + 1;

			НовыйОткрывающийТег = СтрШаблон(
				"<%1%3 %2>", Тег.НазваниеЭлемента, ТекстTitle, Тег.ПараметрыОткрывающегоТега);

		ИначеЕсли СтрНайти(ТекстTitle, ТекстHref) = 0 Тогда

			ТекстДоTitle    = Лев(Тег.ПараметрыОткрывающегоТега, НачалоTitle - 1);
			ТекстПослеTitle = Сред(Тег.ПараметрыОткрывающегоТега, КонецTitle + 1);

			Если СимволОграниченияTitle <> СимволОграниченияHref Тогда

				Если СимволОграниченияTitle = """" Тогда
					ТекстHref = СтрЗаменить(ТекстHref, """", "'");

				ИначеЕсли СимволОграниченияTitle = "'" Тогда
					ТекстHref = СтрЗаменить(ТекстHref, "'", """");

				ИначеЕсли СимволОграниченияTitle = "" Тогда

					ТекстTitle = СтрЗаменить(ТекстTitle, """", "'");
					ТекстHref  = СтрЗаменить(ТекстHref, """", "'");
					СимволОграниченияTitle = """";

				КонецЕсли;

			КонецЕсли;

			ТекстTitle = СтрШаблон(
				"title=%1%2%3%1", СимволОграниченияTitle, ТекстTitle, Символы.ПС + ТекстHref);

			Смещение = Смещение + СтрДлина(ТекстHref) + 1;

			НовыйОткрывающийТег = СтрШаблон(
				"<%1%2%3%4>", Тег.НазваниеЭлемента, ТекстДоTitle, ТекстTitle, ТекстПослеTitle);

		Иначе

			Тег = ПолучитьТегВТекстеHTML(ТекстHTML, "area", Тег.ПозицияОкончанияТега + Смещение + 1);
			Продолжить;

		КонецЕсли;

		ТекстHTML =
			Лев(ТекстHTML, Тег.ПозицияНачалаОткрывающегоТега - 1)
			+ НовыйОткрывающийТег
			+ Сред(ТекстHTML, Тег.ПозицияОкончанияОткрывающегоТега + 1);

		Тег = ПолучитьТегВТекстеHTML(ТекстHTML, "area", Тег.ПозицияОкончанияТега + Смещение + 1);

	КонецЦикла;

КонецПроцедуры

// Возвращает значение свойства параметра тега
Функция ПолучитьЗначениеПараметраТега(Тег, Параметр,
	СимволОграничения = Неопределено, НачалоПараметра = Неопределено, КонецПараметра = Неопределено)

	Если Не ЗаполненаСтруктураТега(Тег) Тогда
		Возврат Неопределено;
	КонецЕсли;

	ПараметрыДляПоиска = НРег(Тег.ПараметрыОткрывающегоТега);
	ПараметрДляПоиска  = НРег(Параметр);
	ПозицияПараметра   = СтрНайти(ПараметрыДляПоиска, ПараметрДляПоиска);

	Если ПозицияПараметра = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	НачалоПараметра = СтрНайти(ПараметрыДляПоиска, ПараметрДляПоиска + "=""");
	Если НачалоПараметра <> 0 Тогда
		СимволОграничения = """";
	Иначе
		НачалоПараметра = СтрНайти(ПараметрыДляПоиска, ПараметрДляПоиска + "='");
		Если НачалоПараметра <> 0 Тогда
			СимволОграничения = "'";
		Иначе
			НачалоПараметра = СтрНайти(ПараметрыДляПоиска, ПараметрДляПоиска + "=");
			Если НачалоПараметра <> 0 Тогда
				СимволОграничения = "";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если НачалоПараметра = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если СимволОграничения = "" Тогда

		ЗакрывающийСимволОграничения = " ";
		КонецПараметра = СтрНайти(ПараметрыДляПоиска, ЗакрывающийСимволОграничения,,
			НачалоПараметра + СтрДлина(ПараметрДляПоиска + "=" + СимволОграничения));

		Если КонецПараметра = 0 Тогда

			ЗакрывающийСимволОграничения = Символы.ПС;
			КонецПараметра = СтрНайти(ПараметрыДляПоиска, ЗакрывающийСимволОграничения,,
				НачалоПараметра + СтрДлина(ПараметрДляПоиска + "=" + СимволОграничения));

			Если КонецПараметра = 0 Тогда
				КонецПараметра = СтрДлина(ПараметрыДляПоиска) + 1;
			КонецЕсли;

		КонецЕсли;

	Иначе

		КонецПараметра = СтрНайти(ПараметрыДляПоиска, СимволОграничения,,
			НачалоПараметра + СтрДлина(ПараметрДляПоиска + "=" + СимволОграничения));

		Если КонецПараметра = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;

	КонецЕсли;

	Если КонецПараметра = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	ЗначениеПараметраТега = Сред(Тег.ПараметрыОткрывающегоТега, НачалоПараметра + СтрДлина(Параметр + "=" + СимволОграничения),
		КонецПараметра - (НачалоПараметра + СтрДлина(Параметр + "=" + СимволОграничения)));

	Возврат ЗначениеПараметраТега;

КонецФункции

#КонецОбласти
