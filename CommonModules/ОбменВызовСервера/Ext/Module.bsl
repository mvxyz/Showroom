
#Область ПрограммныйИнтерфейс

// Функция - Запустить синхронизацию с сервером в фоне
//
// Параметры:
//  ПараметрыЗапуска	 - Структура - Параметры запуска фонового задания;
//  ИдентификаторЗадания - УникальныйИдентификатор - Идентификатор формы;
//  АдресХранилища		 - Строка - Адрес хранилища дополнительной информации.
// 
// Возвращаемое значение:
//  Булево - Истина, если задание запущено.
//
Функция ЗапуститьСинхронизациюССерверомВФоне(
	ПараметрыЗапуска, ИдентификаторЗадания, АдресХранилища) Экспорт

	//// Перед запуском фонового задания синхронизации необходимо отменить
	//// задание очистки от устаревших данных, если оно активно
	ОчисткаБазыДанныхВызовСервера.ПрерватьОчисткуОтСтарыхДанныхВФоне();
	
	ИмяФоновогоЗадания = ПараметрыЗапуска.РежимСинхронизации;

	// Проверим наличие активного задания синхронизации.
	ОтборЗаданий = Новый Структура();
	ОтборЗаданий.Вставить("Наименование", ИмяФоновогоЗадания);
	ОтборЗаданий.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);

	Задания = ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборЗаданий);
	Если Не Задания.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;

	// Запустим новое задание синхронизации.
	ВыполнениеВФоне = Истина;
	Данные = Неопределено;

	Если Не ПараметрыЗапуска.Свойство("Данные", Данные) Тогда
		АдресХранилища = 
			ПоместитьВоВременноеХранилище(
				Неопределено, ПараметрыЗапуска.УникальныйИдентификатор);
		Данные = АдресХранилища;
	КонецЕсли;

	Параметры = Новый Массив();
	Параметры.Добавить(ПараметрыЗапуска.ДатаНачалаСинхронизации);
	Параметры.Добавить(ПараметрыЗапуска.РежимСинхронизации);
	Параметры.Добавить(ВыполнениеВФоне);
	Параметры.Добавить(Данные);

	Задание = 
		ФоновыеЗадания.Выполнить("ОбменВызовСервера.ОтправитьИПолучитьДанные", 
			Параметры, Новый УникальныйИдентификатор, ИмяФоновогоЗадания);

	ИдентификаторЗадания = Задание.УникальныйИдентификатор;

	Возврат Истина;

КонецФункции

// Выполняет отправку сообщения на сервер и обработку ответного сообщения, если требуется получать 
// ответ от сервера.
//
// Параметры:
//  ДатаНачалаСинхронизации - Дата         - Дата начала синхронизации с мобильным клиентом;
//  РежимСинхронизации      - Строка       - Идентификатор режима синхронизации;
//  ВыполнениеВФоне         - Булево       - Признак вызова функции как фоновое задание;
//  Данные                  - Произвольный - Данные передаваемые на сервер.
//
// Возвращаемое значение:
//	Структура СведенияОЗагруженныхДанных - описывает загруженные данные;
//		*КоличествоОбработанныхОбъектов - количество обработанных объектов;
//		*НовыеДанные - массив ссылок на новые объекты, загруженные с сервера;
//		*НовыеКонтрагенты - количество новых контрагентов;
//		*НовыеТовары - количество новых товаров;
//
Процедура ОтправитьИПолучитьДанные(
	ДатаНачалаСинхронизации, РежимСинхронизации, 
	ВыполнениеВФоне, Данные = Неопределено) Экспорт

	// Выполняем подготовительные действия
	ТекущаяСтадияРаботы = "Подготовка";
	СообщитьПользователю(ТекущаяСтадияРаботы, ВыполнениеВФоне);

	ОбновитьПовторноИспользуемыеЗначения();
	ОбщегоНазначенияВызовСервера.УстановитьПараметрыСеанса();
	УстановитьТекущуюСессияСинхронизации(Константы.СессияСинхронизации.Получить());
	ВыполнитьДействияПередПодключением();

	// Инициализируем постоянные переменные для уведомления пользователя
	ЕстьОшибкиПриПодключении = Ложь;
	ВСообщенияхЕстьДанные = Ложь;

	СчетчикиОбъектов = Новый Массив();
	Для Индекс = 0 По 3 Цикл
		СчетчикиОбъектов.Добавить(0);
	КонецЦикла;

	//ЭтоДемоРежим = Константы.ЭтоДемоРежим.Получить();
	ЕстьНеотправленныеДанные = Константы.ЕстьНеотправленныеДанные.Получить();
	СведенияОЗагруженныхДанных  = ИнициализироватьСведенияОЗагруженныхДанных();
	ВыводитьРасширенныйПротокол = 
		ОбменВызовСервераПовтИсп.ИспользоватьРасширенноеПротоколированиеОпераций();

	// подключаемся к сервису для определения версии формата обмена
	ТекущаяСтадияРаботы = "Подключение";
	СообщитьПользователю(ТекущаяСтадияРаботы, ВыполнениеВФоне);

	Попытка
		
		СостояниеОбмена = ПолучитьПараметрыСостоянияОбмена();
		
		НачалоОперации = ТекущаяДата();
		ВерсияСервиса = ОбменВызовСервераПовтИсп.ПолучитьВерсиюСервиса();
		
		ДобавитьИнформациюОЗамереВремени(
		СведенияОЗагруженныхДанных.ПоказателиОбмена.ВременныеПоказатели, 
		НСтр("ru = 'Установка соединения'; en = 'Connection'"), НачалоОперации);
		
		Если ЗначениеЗаполнено(ВерсияСервиса) Тогда
			
			ТекущаяСтадияРаботы = "СозданиеСообщений";
			СообщитьПользователю(ТекущаяСтадияРаботы, ВыполнениеВФоне);
			
			НачалоОперации = ТекущаяДата();
			
			Если РежимСинхронизации = "ПодключитьНовоеУстройство" Тогда
				ОбменФормированиеСообщенийВызовСервера.СоздатьСообщениеДляПодключенияУстройства(
				ВерсияСервиса);
				
			ИначеЕсли РежимСинхронизации = "ОтключитьУстройство" Тогда
				ОбменФормированиеСообщенийВызовСервера.СоздатьСообщениеДляОтключенияУстройства(
				ВерсияСервиса)
				
			ИначеЕсли РежимСинхронизации = "ВыполнитьСинхронизацию" Тогда
				ОбменФормированиеСообщенийВызовСервера.СоздатьСообщениеДляВыгрузкиВсехИзмененныхДанных(
				ВерсияСервиса, ЕстьНеотправленныеДанные)
				
			ИначеЕсли РежимСинхронизации = "ЗагрузитьФайлССервера" Тогда
				ОбменФормированиеСообщенийВызовСервера.СоздатьСообщениеДляПолученияОдногоФайла(
				ВерсияСервиса, Данные)
				
			ИначеЕсли РежимСинхронизации = "ОтправитьОдиночныйЗаказ"     ///
				И ЗначениеЗаполнено(Данные) Тогда    
				ОбменФормированиеСообщенийВызовСервера.СоздатьСообщениеДляПередачиОдногоЗаказа(
				ВерсияСервиса, Данные);
				
			ИначеЕсли РежимСинхронизации = "ОтправитьОтчетОПроблеме" Тогда
				
				ОбменФормированиеСообщенийВызовСервера.СоздатьСообщениеДляПередачиСообщенияОПроблеме(
				ВерсияСервиса, Данные);
				
			КонецЕсли;
			
			ДобавитьИнформациюОЗамереВремени(
			СведенияОЗагруженныхДанных.ПоказателиОбмена.ВременныеПоказатели, 
			НСтр("ru = 'Создание исходящего сообщения'; 
			|en = 'Creating an outgoing message'"), НачалоОперации);
			
			
			ТекущаяСтадияРаботы = "ОтправкаДанных";
			СообщитьПользователю(ТекущаяСтадияРаботы, ВыполнениеВФоне);
			
			НачалоОперации = ТекущаяДата();
			
			ОтправитьДанные(СостояниеОбмена, СведенияОЗагруженныхДанных);
			
			ДобавитьИнформациюОЗамереВремени(
			СведенияОЗагруженныхДанных.ПоказателиОбмена.ВременныеПоказатели, 
			НСтр("ru = 'Отправка данных'; en = 'Sending data'"), НачалоОперации);
			
		ИначеЕсли РежимСинхронизации = "ОтключитьУстройство" Тогда
			// при отключении устройства - просто продолжаем очищать базу.
		Иначе
			
			СообщитьПользователю(ТекущаяСтадияРаботы, ВыполнениеВФоне, Истина);
			Возврат;
			
		КонецЕсли;
		
	Исключение
		
		ЗаписатьОшибкуПриОбмене(ИнформацияОбОшибке());
		
		ТекущаяСтадияРаботы = "Завершение";
		СообщитьПользователю(ТекущаяСтадияРаботы, ВыполнениеВФоне, Истина);
		
		ТекущаяСтадияРаботы = "ОбновитьДатуСинхронизации";
		СообщитьПользователю(ТекущаяСтадияРаботы, ВыполнениеВФоне, Истина);
		
		Возврат;
		
	КонецПопытки;

	Если РежимСинхронизации = "ОтправитьОдиночныйЗаказ" Тогда
		
		// В этом режиме просто переходим к концу процедуры

	Иначе

		Если СведенияОЗагруженныхДанных.ЕстьОшибки Тогда

			ТекущаяСтадияРаботы = "Завершение";
			СообщитьПользователю(ТекущаяСтадияРаботы, ВыполнениеВФоне, Истина, Ложь, СчетчикиОбъектов);

			Возврат;

		КонецЕсли;

		Попытка

			ТекущаяСтадияРаботы = "ЗагрузкаДанных";
			СообщитьПользователю(ТекущаяСтадияРаботы, ВыполнениеВФоне);

			ЗагрузитьДанные(СостояниеОбмена, СведенияОЗагруженныхДанных, ДатаНачалаСинхронизации);

			ТекущаяСтадияРаботы = "ПросмотрДанных";
			СообщитьПользователю(ТекущаяСтадияРаботы, ВыполнениеВФоне, Ложь);

			ВСообщенияхЕстьДанные = ПросмотретьДанные(СведенияОЗагруженныхДанных);

			СчетчикиОбъектов[0] = СведенияОЗагруженныхДанных.ПоказателиОбмена.НовыеКонтрагенты;
			СчетчикиОбъектов[1] = СведенияОЗагруженныхДанных.ПоказателиОбмена.НовыеТовары;

			ТекущаяСтадияРаботы = "ЗаписьДанных";
			СообщитьПользователю(
				ТекущаяСтадияРаботы, ВыполнениеВФоне, Ложь, ВСообщенияхЕстьДанные, 
				СчетчикиОбъектов);

			ЗаписатьДанные(
				ВСообщенияхЕстьДанные, СведенияОЗагруженныхДанных, ДатаНачалаСинхронизации);

			ВозвращаемыеДанные = Новый СписокЗначений;
			Для Каждого Пара Из СведенияОЗагруженныхДанных.НовыеДанные Цикл
				ВозвращаемыеДанные.Добавить(
					Новый Структура("Ключ, Значение", Пара.Ключ, Пара.Значение));
			КонецЦикла;

			Адрес = ПоместитьВоВременноеХранилище(ВозвращаемыеДанные, Данные);

			ТекущаяСтадияРаботы = "Завершение";
			СообщитьПользователю(ТекущаяСтадияРаботы, ВыполнениеВФоне);

		Исключение

			ЗаписатьОшибкуПриОбмене(ИнформацияОбОшибке());

			ТекущаяСтадияРаботы = "Завершение";
			СообщитьПользователю(ТекущаяСтадияРаботы, ВыполнениеВФоне, Истина);

			Возврат;

		КонецПопытки;

	КонецЕсли;

	СообщитьПользователю("ОбновитьДатуСинхронизации", ВыполнениеВФоне);

	ЗавершитьОтправкуИПолучение(СведенияОЗагруженныхДанных, РежимСинхронизации);

КонецПроцедуры

// Увеличить счетчики о загруженных данных.
//
// Параметры:
//  СведенияОЗагруженныхДанных	 - Структура - общие сведения о текущем сеансе обмена
//	* СчетчикиОбъектов	- Соответствие - список счетчиков по типам объектов.
//  ИмяТипа						 - Строка - Тип учитываемого объекта.
//
Процедура УвеличитьСчетчикиПоТипамОбъектов(СведенияОЗагруженныхДанных, ИмяТипа) Экспорт

	// Обновляем общий счетчик объектов
	СведенияОЗагруженныхДанных.ПоказателиОбмена.КоличествоЗагружаемыхОбъектов = 
		СведенияОЗагруженныхДанных.ПоказателиОбмена.КоличествоЗагружаемыхОбъектов + 1;

	// Получаем счетчик указанного типа
	ДанныеОТипеОбъекта = СведенияОЗагруженныхДанных.ПоказателиОбмена.СчетчикиОбъектов[ИмяТипа];
	
	// Создаем новый счетчик, если он еще не инициализирован
	Если ДанныеОТипеОбъекта = Неопределено Тогда
		ДанныеОТипеОбъекта = Новый Структура("Количество", 0);
	КонецЕсли;

	// Увеличиваем количество указанного типа
	ДанныеОТипеОбъекта.Количество = ДанныеОТипеОбъекта.Количество + 1;

	// Обновляем параметры текущего сеанса синхронизации
	СведенияОЗагруженныхДанных.ПоказателиОбмена.СчетчикиОбъектов.Вставить(ИмяТипа, ДанныеОТипеОбъекта);

КонецПроцедуры

// Проверяет состояние задания фоновой синхронизации.
//
// Параметры:
//  ФоновоеЗаданиеИдентификатор	 - УникальныйИдентификатор - Идентификатор задания;
//  ФоновоеЗаданиеАдресХранилища - Строка - Адрес хранилища на сервере для помещения результат;
//  ОписаниеПоследнегоОбновления - Строка - Описание текщей операции и истории обновления.
// 
// Возвращаемое значение:
//  Результат - Структура возвращаемых данных.
//
Функция ПроверитьСостояниеФоновойСинхронизации(
		ФоновоеЗаданиеИдентификатор,
		ФоновоеЗаданиеАдресХранилища,
		ОписаниеПоследнегоОбновления) Экспорт

	Результат = Новый Структура();
	Результат.Вставить("ЗаданиеВыполнено", Ложь);
	Результат.Вставить("СообщениеОбОшибке", Неопределено);
	Результат.Вставить("ОбновитьДатуСинхронизации", Ложь);

	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ФоновоеЗаданиеИдентификатор);

	Если Задание = Неопределено Тогда
		Результат.СообщениеОбОшибке = 
			НСтр("ru = 'Не удалось выполнить синхронизацию. См. протокол обмена'");

	ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
		Результат.СообщениеОбОшибке = ПодробноеПредставлениеОшибки(Задание.ИнформацияОбОшибке);

	ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
		Результат.ЗаданиеВыполнено = Истина;

	КонецЕсли;

	Если Не Задание = Неопределено Тогда

		ВсеСообщения = Задание.ПолучитьСообщенияПользователю(Ложь);
		Если ВсеСообщения = Неопределено Тогда
			ВсеСообщения = Новый Массив();
		КонецЕсли;

		ЕстьОшибки = Ложь;

		Для Каждого СообщениеПользователю Из ВсеСообщения Цикл

			МассивРезультатовРаботы = СтрРазделить(СообщениеПользователю.Текст, ";");

			ТекущаяСтадияРаботы = МассивРезультатовРаботы[0];
			ЕстьОшибки = Булево(МассивРезультатовРаботы[1]);
			ВСообщенияхЕстьДанные = Булево(МассивРезультатовРаботы[2]);

			Если СтрНайти(МассивРезультатовРаботы[3], ",") Тогда
				СчетчикиОбъектов = СтрРазделить(МассивРезультатовРаботы[3], ",");
			Иначе

				Если ТекущаяСтадияРаботы = "Завершение" 
					И ЗначениеЗаполнено(ФоновоеЗаданиеАдресХранилища) Тогда

					Результат.Вставить("СведенияОЗагруженныхДанных", 
						ПолучитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища));

				КонецЕсли;

			КонецЕсли;

			Результат.Вставить("ТекущаяСтадияРаботы", ТекущаяСтадияРаботы);
			Результат.Вставить("ЕстьОшибки", ЕстьОшибки);
			Результат.Вставить("ВСообщенияхЕстьДанные", ВСообщенияхЕстьДанные);

			Если ТекущаяСтадияРаботы = "ЗаписьДанных" Тогда
				Результат.Вставить("СчетчикиОбъектов", СчетчикиОбъектов);

			ИначеЕсли ТекущаяСтадияРаботы = "ОбновитьДатуСинхронизации" Тогда
				Результат.ОбновитьДатуСинхронизации = Истина;

			КонецЕсли;

		КонецЦикла;

		СформироватьОписаниеТекущегоСостояния(
			ЕстьОшибки, ТекущаяСтадияРаботы, ОписаниеПоследнегоОбновления);

	КонецЕсли;

	Результат.Вставить("ОписаниеПоследнегоОбновления", ОписаниеПоследнегоОбновления);

	Возврат Результат;

КонецФункции

#Область СервисныеФункции

// Сбрасывает значения в константах, описывающих состояние загрузки частей сообщений с сервера,
//	чтобы дать возможность загрузить сообщения с начала очереди.
//
Процедура СброситьСостояниеЗагрузкиЧастейСообщений() Экспорт

	Константы.ИдентификаторПоследнегоЗагруженногоСообщения.Установить(УникальныйИдентификаторПустой());
	Константы.НомерПоследнейЗагруженнойЧастиСообщения.Установить(0);

КонецПроцедуры

// Удаляет регистрацию изменений на центральном узле обмена и увеличивает счетчик отправленных сообщений.
//
Процедура УдалитьРегистрациюИзмененийОтправленныхДанных() Экспорт

	ЦентральныйУзелОбмена = ОбменВызовСервераПовтИсп.ПолучитьЦентральныйУзелОбмена();

	// После записи сообщения в очередь регистрация изменений очищается
	ПланыОбмена.УдалитьРегистрациюИзменений(ЦентральныйУзелОбмена);

	ЦентральныйУзелОбменаОбъект = ЦентральныйУзелОбмена.ПолучитьОбъект();
	ЦентральныйУзелОбменаОбъект.НомерОтправленного = ЦентральныйУзелОбменаОбъект.НомерОтправленного + 1;
	ЦентральныйУзелОбменаОбъект.Записать();

КонецПроцедуры

// Выполняет настройку ИБ после первого подключения к серверу.
//
Процедура ВыполнитьДействияПослеПервогоПодключенияКСерверу() Экспорт

	Константы.ДатаПоследнегоОбновления.Установить(ТекущаяДата());

КонецПроцедуры

#КонецОбласти // СервисныеФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СформироватьОписаниеТекущегоСостояния(ЕстьОшибки, ТекущаяСтадияРаботы, ОписаниеПоследнегоОбновления)

	Если ОбменВызовСервераПовтИсп.ИспользоватьРасширенноеПротоколированиеОпераций() Тогда
		Если ТекущаяСтадияРаботы = "Подготовка"
			Или Не ЗначениеЗаполнено(ТекущаяСтадияРаботы) Тогда
			Процент = 5;
			ПредставлениеЭтапа = НСтр("ru = 'Запуск'; en = 'Launching'");

		ИначеЕсли ТекущаяСтадияРаботы = "Подключение" Тогда
			Процент = 10;
			ПредставлениеЭтапа = НСтр("ru = 'Подключение'; en = 'Connecting'");

		ИначеЕсли ТекущаяСтадияРаботы = "СозданиеСообщений" Тогда
			Процент = 15;
			ПредставлениеЭтапа = НСтр("ru = 'Подготовка'; en = 'Preparing'");

		ИначеЕсли ТекущаяСтадияРаботы = "ОтправкаДанных" Тогда
			Процент = 35;
			ПредставлениеЭтапа = НСтр("ru = 'Отправка данных'; en = 'Sending data'");

		ИначеЕсли ТекущаяСтадияРаботы = "ЗагрузкаДанных" Тогда
			Процент = 50;
			ПредставлениеЭтапа = НСтр("ru = 'Загрузка данных'; en = 'Download data'");

		ИначеЕсли ТекущаяСтадияРаботы = "ПросмотрДанных" Тогда
			Процент = 65;
			ПредставлениеЭтапа = НСтр("ru = 'Анализ данных'; en = 'Preview data'");

		ИначеЕсли ТекущаяСтадияРаботы = "ЗаписьДанных" Тогда
			Процент = 80;
			ПредставлениеЭтапа = НСтр("ru = 'Запись данных'; en = 'Writing data'");

		ИначеЕсли ТекущаяСтадияРаботы = "Завершение"
			Или ТекущаяСтадияРаботы = "ОбновитьДатуСинхронизации" Тогда
			Процент = 95;
			ПредставлениеЭтапа = НСтр("ru = 'Завершение'; en = 'Finishing'");

		КонецЕсли;
	Иначе
		Если (Не ЗначениеЗаполнено(ТекущаяСтадияРаботы) 
			Или ТекущаяСтадияРаботы = "Подготовка" 
			Или ТекущаяСтадияРаботы = "Подключение" 
			Или ТекущаяСтадияРаботы = "СозданиеСообщений" 
			Или ТекущаяСтадияРаботы = "ОтправкаДанных") Тогда

			ПредставлениеЭтапа = НСтр("ru = 'Подключение'; en = 'Connecting'");

		ИначеЕсли ТекущаяСтадияРаботы = "ЗагрузкаДанных" Тогда
			ПредставлениеЭтапа = НСтр("ru = 'Загрузка'; en = 'Loading'");

		ИначеЕсли (ТекущаяСтадияРаботы = "ПросмотрДанных" 
			Или ТекущаяСтадияРаботы = "ЗаписьДанных" 
			Или ТекущаяСтадияРаботы = "Завершение"
			Или ТекущаяСтадияРаботы = "ОбновитьДатуСинхронизации") Тогда
			ПредставлениеЭтапа = НСтр("ru = 'Обработка'; en = 'Processing'");

		КонецЕсли;

	КонецЕсли;

	Если ЕстьОшибки Тогда
		ОписаниеПоследнегоОбновления = 
			СтрШаблон("%1", НСтр("ru = 'Ошибка (см. протокол)'; en = 'Error (view protocol)!'"));

	ИначеЕсли ОбменВызовСервераПовтИсп.ИспользоватьРасширенноеПротоколированиеОпераций() Тогда
		ОписаниеПоследнегоОбновления = 
			СтрШаблон("%1 (%2%%)...", ПредставлениеЭтапа, Процент);

	Иначе
		ОписаниеПоследнегоОбновления = 
			СтрШаблон("%1...", ПредставлениеЭтапа);

	КонецЕсли;

КонецПроцедуры

// Создает XDTO указанного типа.
//
// Параметры:
//  ТипОбъекта			 - Строка - Имя объекта XDTO;
//  НомерВерсииФормата	 - Строка - Номер версии используемого формата обмена;
//  Прокси				 - WSПрокси - Прокси для доступа к web-сервису.
// 
// Возвращаемое значение:
//  ОбъектXDTO - Созданный объект XDTO указанного типа.
//
Функция СоздатьОбъект(ТипОбъекта, НомерВерсииФормата, Прокси = Неопределено)

	Если Прокси = Неопределено Тогда
		Фабрика = ПолучитьФабрикуXDTO(НомерВерсииФормата);
	Иначе
		Фабрика = Прокси.ФабрикаXDTO;
	КонецЕсли;

	Если НомерВерсииФормата >= "101" Тогда
		Возврат Фабрика.Создать(Фабрика.Тип("http://www.wizard-c.ru/WMC", ТипОбъекта));
	КонецЕсли;

КонецФункции

// Записывает ошибку в протокол работы пользователя.
//
// Параметры:
//  Инфо - ИнформацияОбОшибке - Информация о произошедшей ошибке.
//
Процедура ЗаписатьОшибкуПриОбмене(Инфо)

	ОбщееОписаниеОшибки = 
		НСтр("ru = 'При выполнении обмена произошла ошибка.'; en = 'Synchronization error.'");

	ТекстОшибки = 
		РаботаСоСтрокамиКлиентСервер.СформироватьПредставлениеОшибки(
			ОбщееОписаниеОшибки, Инфо.Описание, ПодробноеПредставлениеОшибки(Инфо));

	РаботаСПротоколомСобытийВызовСервера.ДобавитьОшибку(ТекстОшибки);

КонецПроцедуры

// Создает объект фабрики XDTO указанной версии протокола обмена.
//
Функция ПолучитьФабрикуXDTO(НомерВерсииФормата)

	Если НомерВерсииФормата >= "101" Тогда
		Возврат WSСсылки["WMC"].ПолучитьWSОпределения().ФабрикаXDTO;
	КонецЕсли;

КонецФункции

// Устанавливает номер сессии синхронизации используемую в текущей операции обмена
//
// Возвращаемое значение:
//  Число - Номер текущей сессии обмена.
//
Функция ВыполнитьДействияПередПодключением()

	РаботаСПротоколомСобытийВызовСервера.ДобавитьИнформацию(НСтр("ru = 'Подключение'; en = 'Connecting'"));

	НомерСессии = ПараметрыСеанса.ТекущаяСессияСинхронизации;

	Если НомерСессии = 0 Тогда

		// Получаем текущую сессию из константы и сразу увеличиваем ее до текущей
		НомерСессии = Константы.СессияСинхронизации.Получить()+ 1;

		// Сразу обновляем константу
		Константы.СессияСинхронизации.Установить(НомерСессии);

		// Обновим параметры для быстрого доступа
		УстановитьТекущуюСессияСинхронизации(НомерСессии);

	КонецЕсли;

	Возврат НомерСессии;

КонецФункции

// Устанавливает номер сессии синхронизации используемую в текущей операции обмена.
//
Процедура УстановитьТекущуюСессияСинхронизации(НомерСессии = 0) Экспорт

	ПараметрыСеанса.ТекущаяСессияСинхронизации = НомерСессии;

КонецПроцедуры

// Получает структуру состояния новой операции запроса к серверу.
// 
// Возвращаемое значение:
//  Структура - Параметры состояния операции по-умолчанию
//   ЕстьОшибки                  - Булево - По-умолчанию Истина, пока не подтверждено, что операция успешна;
//   ПродолжитьЗагрузку          - Булево - По-умолчанию: Ложь, пока сервере не ответил, что есть данные для загрузки;
//   КоличествоСообщенийВОчереди - Число - Количество сообщений в очереди на сервере, ожидающие загрузки;
//   ОбъемПолученныхДанных       - Число - Объем загруженных текущей операцией данных;
//   ВремяЗагрузкиДанных         - Число - Время загрузки очередной порции данных в сек;
//   ПроцентГотовностиЗагружаемогоСообщения - Число - Процент готовности сообщения на сервере.
//
Функция ПолучитьПараметрыСостоянияОбмена()

	// Инициализация структуры, описывающей состояние обмена.
	// По умолчанию считаем, что сообщений на сервере нет и обмен продолжаться не будет.

	СостояниеОбмена = Новый Структура;
	СостояниеОбмена.Вставить("ЕстьОшибки", Истина);
	СостояниеОбмена.Вставить("ПродолжитьЗагрузку", Ложь); // ПМВ
	СостояниеОбмена.Вставить("КоличествоСообщенийВОчереди", 0);
	СостояниеОбмена.Вставить("ОбъемПолученныхДанных", 0);
	СостояниеОбмена.Вставить("ВремяЗагрузкиДанных", 0);
	СостояниеОбмена.Вставить("ПроцентГотовностиЗагружаемогоСообщения", 0);

	Возврат СостояниеОбмена;

КонецФункции

// Получает структура данных служебной информации для обмена.
//
Функция ИнициализироватьСведенияОЗагруженныхДанных()

	ВыводитьРасширенныйПротокол = ОбменВызовСервераПовтИсп.ИспользоватьРасширенноеПротоколированиеОпераций();

	ПоказателиОбмена = Новый Структура();
	ПоказателиОбмена.Вставить("КоличествоОбработанныхОбъектов", 0);
	ПоказателиОбмена.Вставить("КоличествоЗагружаемыхОбъектов" , 0);
	ПоказателиОбмена.Вставить("ОбъемПолученныхДанных"    , 0);
	ПоказателиОбмена.Вставить("ОбъемПолученныхФайлов"    , 0);
	ПоказателиОбмена.Вставить("КоличествоИтерацийОбмена" , 0);
	ПоказателиОбмена.Вставить("КоличествоПустыхПакетов"  , 0);
	ПоказателиОбмена.Вставить("КоличествоПакетовСДанными", 0);
	ПоказателиОбмена.Вставить("ВсегоПолученоСообщений"   , 0);
	ПоказателиОбмена.Вставить("ВремяЗагрузкиДанных"      , 0);

	ПоказателиОбмена.Вставить("НовыеКонтрагенты" , 0);
	ПоказателиОбмена.Вставить("НовыеТовары" , 0);

	ПоказателиОбмена.Вставить("ВременныеПоказатели", Новый Массив());
	ПоказателиОбмена.Вставить("СчетчикиОбъектов", Новый Соответствие());

	// Начальное заполнение структуры, описывающей загруженные данные при синхронизации
	СведенияОЗагруженныхДанных = Новый Структура();
	СведенияОЗагруженныхДанных.Вставить("ЕстьОшибки", Ложь);

	СведенияОЗагруженныхДанных.Вставить("НовыеДанные"           , Новый Соответствие());
	СведенияОЗагруженныхДанных.Вставить("УдаляемыеДанные"       , Новый Соответствие());
	
	СведенияОЗагруженныхДанных.Вставить("СписокКонтрагентов", Новый Соответствие());
	СведенияОЗагруженныхДанных.Вставить("СписокНоменклатуры", Новый Соответствие());

	СведенияОЗагруженныхДанных.Вставить("ПоказателиОбмена", ПоказателиОбмена);
	
	Возврат СведенияОЗагруженныхДанных;

КонецФункции 

// Отправляет данные в центральную базу
//
// Параметры:
//	ДанныеДляПередачи - хранилище значения в двоичными данными;
//	НеобходимоПолучитьДанныеОтСервера - признак того, что серверу необходимо будет подготовить ответ.
//
Процедура ОтправитьДанные(СостояниеОбмена, СведенияОЗагруженныхДанных)

	РаботаСПротоколомСобытийВызовСервера.ДобавитьИнформацию(
		НСтр("ru = 'Начало отправки сообщения на сервер'"));

	// Получаем состояние константы перед началом обмен
	СведенияОЗагруженныхДанных.Вставить("ЕстьНеотправленныеДанные", 
		Константы.ЕстьНеотправленныеДанные.Получить());

	ДанныеОПрокси = ОбменВызовСервераПовтИсп.ПолучитьПрокси(СостояниеОбмена);

	Если ДанныеОПрокси = Неопределено Тогда

		СведенияОЗагруженныхДанных.ЕстьОшибки = Истина;

	Иначе

		Если ДанныеОПрокси.ВерсияСервиса >= "101" Тогда
			ОтправитьДанныеПоФорматуWMC(
				СостояниеОбмена, ДанныеОПрокси, СведенияОЗагруженныхДанных);
		КонецЕсли;

		СведенияОЗагруженныхДанных.ЕстьОшибки = СостояниеОбмена.ЕстьОшибки;

	КонецЕсли;

КонецПроцедуры

// Загружает очередную порцию данных с сервера.
//
// Параметры:
//  СостояниеОбмена            - Структура - Структура параметров текущей операции обмена;
//  СведенияОЗагруженныхДанных - Структура - Кэш данных синхронизации;
//  ДатаНачалаСинхронизации    - Дата - Дата и время начала процесса обмена.
//
Процедура ЗагрузитьДанные(СостояниеОбмена, СведенияОЗагруженныхДанных, ДатаНачалаСинхронизации)

	ДобавитьИнформациюОЗамереВремени(
		СведенияОЗагруженныхДанных.ПоказателиОбмена.ВременныеПоказатели, 
		НСтр("ru = 'Загрузка данных'; en = 'Downloading data'"), ДатаНачалаСинхронизации);

	НачалоОперации = ТекущаяДата();
	ПервыйПакетСДанными = Неопределено;

	// Загрузка данных с сервера
	Пока СостояниеОбмена.ПродолжитьЗагрузку Цикл

		ОбъемПолученныхДанных = ПолучитьДанные(СостояниеОбмена, 
			СведенияОЗагруженныхДанных.ПоказателиОбмена);

		Если Не ОбъемПолученныхДанных = 0 И ПервыйПакетСДанными = Неопределено Тогда

			ДобавитьИнформациюОЗамереВремени(
				СведенияОЗагруженныхДанных.ПоказателиОбмена.ВременныеПоказатели,
				НСтр("ru = 'Получение изменений на сервере'; en = 'Getting changes'"), 
				НачалоОперации - (СостояниеОбмена.ВремяЗагрузкиДанных / 1000), 
				ТекущаяДата());

			ПервыйПакетСДанными = ТекущаяДата();
			НачалоОперации = 
				ТекущаяДата() - (СостояниеОбмена.ВремяЗагрузкиДанных / 1000);

		КонецЕсли;

	КонецЦикла;

	ДобавитьИнформациюОЗамереВремени(
		СведенияОЗагруженныхДанных.ПоказателиОбмена.ВременныеПоказатели,
		НСтр("ru = 'Загрузка изменений с сервера'"), 
		НачалоОперации, 
		ТекущаяДата());

КонецПроцедуры

// Получает с сервера очередную часть сообщения обмена, записывает ее в регистр.
// При этом обновляются показатели состояния процесса загрузки.
//
Функция ПолучитьДанные(СостояниеОбмена, ПоказателиОбмена)

	ДанныеОПрокси   = ОбменВызовСервераПовтИсп.ПолучитьПрокси(СостояниеОбмена);
	СостояниеОбмена = ПолучитьПараметрыСостоянияОбмена();

	Если ДанныеОПрокси.ВерсияСервиса >= "101" Тогда
		ПолучитьДанныеПоФорматуWMC(ДанныеОПрокси, СостояниеОбмена);
	КонецЕсли;

	// Обновим показатели обмена
	Если СостояниеОбмена.ОбъемПолученныхДанных = 0 Тогда
		ПоказателиОбмена.КоличествоПустыхПакетов = ПоказателиОбмена.КоличествоПустыхПакетов + 1;

	Иначе
		ПоказателиОбмена.КоличествоПакетовСДанными = ПоказателиОбмена.КоличествоПакетовСДанными + 1;

		ВремяВСекундах = Формат(СостояниеОбмена.ВремяЗагрузкиДанных / 1000, "ЧЦ=15; ЧДЦ=2; ЧГ=");
		ОбъемВКб = Формат(СостояниеОбмена.ОбъемПолученныхДанных / 1024, "ЧЦ=15; ЧДЦ=2; ЧГ=");

		Если СостояниеОбмена.ВремяЗагрузкиДанных = 0 Тогда
			Скорость = 0;
		Иначе
			Скорость = 
				(СостояниеОбмена.ОбъемПолученныхДанных / 1024) / (СостояниеОбмена.ВремяЗагрузкиДанных / 1000);
			Скорость = Формат(Скорость, "ЧЦ=15; ЧДЦ=2; ЧГ=");
		КонецЕсли;
		
		ТекстИнформации = 
			СтрШаблон(
				НСтр("ru = 'Получена часть сообщения обмена. 
					|Объем данных: %1 кб
					|Затраченное время : %2 сек.
					|Скорость: %3 кб/сек'; 
					|en = 'Data part arrived: 
					|Data volume: %1 kb
					|Elapsed time: %2 sec
					|Speed: %3 kb/sec'"),
				ОбъемВКб, ВремяВСекундах, Скорость);

		РаботаСПротоколомСобытийВызовСервера.ДобавитьИнформацию(
			ТекстИнформации);

	КонецЕсли;

	ПоказателиОбмена.КоличествоИтерацийОбмена = ПоказателиОбмена.КоличествоИтерацийОбмена + 1;

	ПоказателиОбмена.ОбъемПолученныхДанных = ПоказателиОбмена.ОбъемПолученныхДанных 
		+ СостояниеОбмена.ОбъемПолученныхДанных;

	ПоказателиОбмена.ВремяЗагрузкиДанных = ПоказателиОбмена.ВремяЗагрузкиДанных 
		+ СостояниеОбмена.ВремяЗагрузкиДанных;

	Возврат СостояниеОбмена.ОбъемПолученныхДанных;

КонецФункции


// Выполняет обработку очередного сообщения
//
// Параметры:
//	ДатаНачалаСинхронизации - дата и время начала процесса синхронизации.
//	СведенияОЗагруженныхДанных - структура,описывающая загруженные данные.
//
Процедура ОбработатьСледующееСообщение(ДатаНачалаСинхронизации, СведенияОЗагруженныхДанных)

	Сообщение = РегистрыСведений.ПолученныеДанныеОбмена.ПолучитьСообщение();

	ОбработатьСообщение(Сообщение, СведенияОЗагруженныхДанных);

	РегистрыСведений.ПолученныеДанныеОбмена.УдалитьСообщение(Сообщение.ИдентификаторСообщения);

	Если ЗначениеЗаполнено(Константы.ДатаПоследнегоОбновления.Получить()) Тогда
		Константы.ДатаПоследнегоОбновления.Установить(ДатаНачалаСинхронизации);
	КонецЕсли;

КонецПроцедуры

// Выполняет разбор сообщения, полученного от сервера, и обработка полученных данных.
//
// Параметры:
//  Сообщение					 - 	 - 
//  СведенияОЗагруженныхДанных	 - 	 - 
//
Процедура ОбработатьСообщение(Сообщение, СведенияОЗагруженныхДанных)

	Версия = ПолучитьВерсиюФорматаСообщенияОбмена(Сообщение.ИмяФайла);

	Если Версия >= "101" Тогда
		ОбменОбработкаWMCСервер.ОбработатьСообщение(Сообщение, СведенияОЗагруженныхДанных);

	Иначе

		// Не известный формат обмена!

	КонецЕсли;

КонецПроцедуры

// Выполняет предварительный анализ полученных данных.
//
// Параметры:
//  СведенияОЗагруженныхДанных - Структура - Кэш данных синхронизации;
// 
// Возвращаемое значение:
//  Булево - Признак того, что в сообщении есть данные.
//
Функция ПросмотретьДанные(СведенияОЗагруженныхДанных)

	НачалоОперации = ТекущаяДата();

	КоличествоЗагруженныхСообщений = ПолучитьКоличествоСообщений();
	ВСообщенияхЕстьДанные          = Ложь;

	СведенияОЗагруженныхДанных.ПоказателиОбмена.ВсегоПолученоСообщений = КоличествоЗагруженныхСообщений;

	Для Счетчик = 1 По КоличествоЗагруженныхСообщений Цикл

		ЕстьДанные            = ПросмотретьСледующееСообщение(Счетчик, СведенияОЗагруженныхДанных);
		ВСообщенияхЕстьДанные = ВСообщенияхЕстьДанные Или ЕстьДанные;

	КонецЦикла;

	ДобавитьИнформациюОЗамереВремени(
		СведенияОЗагруженныхДанных.ПоказателиОбмена.ВременныеПоказатели, 
		НСтр("ru = 'Просмотр сообщений'; en = 'Preview messages'"), 
		НачалоОперации, 
		ТекущаяДата());

	Возврат ВСообщенияхЕстьДанные;

КонецФункции

// Получает количество различных сообщений, части которых хранятся в регистре ЗагруженныеЧастиСообщений.
//
Функция ПолучитьКоличествоСообщений()

	МассивУникальныхИдентификаторов = Новый Массив();
	Выборка = РегистрыСведений.ПолученныеДанныеОбмена.Выбрать();

	Пока Выборка.Следующий() Цикл
		Если МассивУникальныхИдентификаторов.Найти(Выборка.ИдентификаторСообщения) = Неопределено Тогда
			МассивУникальныхИдентификаторов.Добавить(Выборка.ИдентификаторСообщения);
		КонецЕсли;
	КонецЦикла;

	Возврат МассивУникальныхИдентификаторов.Количество();

КонецФункции

// Выполняет чтение очередного сообщения из входящей очереди и получает количество новых данных.
//
// Параметры:
//	СведенияОЗагруженныхДанных - Структура, описывающая загружаемые данные;
//		КоличествоОбработанныхОбъектов - общее количество объектов в сообщении;
//		НовыеДанные - массив ссылок на новые данные;
//		НовыеКонтрагенты - количество новых контрагентов;
//		НовыеТовары - количество новых товаров
//
Функция ПросмотретьСледующееСообщение(Счетчик, СведенияОЗагруженныхДанных)

	// Обработка загруженных сообщений
	РаботаСПротоколомСобытийВызовСервера.ДобавитьИнформацию(
		НСтр("ru = 'Просмотр сообщения'; en = 'Preview message'"));

	Сообщение = РегистрыСведений.ПолученныеДанныеОбмена.ПолучитьСообщение(Счетчик);

	Если ОбменВызовСервераПовтИсп.ИспользоватьРасширенноеПротоколированиеОпераций() Тогда

		Файл = Новый Файл(Сообщение.ИмяФайла);

		Если Файл.Существует() Тогда
			СведенияОЗагруженныхДанных.ПоказателиОбмена.ОбъемПолученныхФайлов = 
				СведенияОЗагруженныхДанных.ПоказателиОбмена.ОбъемПолученныхФайлов + Файл.Размер();
		КонецЕсли;

	КонецЕсли;

	Возврат ПросмотретьСообщение(Сообщение, СведенияОЗагруженныхДанных);

КонецФункции

// Записывает полученные с сервера данные.
//
// Параметры:
//  ВСообщенияхЕстьДанные		 - Булево - Признак наличия данных в сообщении обмена;
//  СведенияОЗагруженныхДанных	 - Структура - Кэш данных синхронизации;
//  ДатаНачалаСинхронизации		 - Дата - Дата и время начала процесса обмена.
// 
// Возвращаемое значение:
//  Число - количество загруженных сообщений.
//
Функция ЗаписатьДанные(ВСообщенияхЕстьДанные, СведенияОЗагруженныхДанных, ДатаНачалаСинхронизации)

	НачалоОперации = ТекущаяДата();

	Если Не ВСообщенияхЕстьДанные Тогда

		РаботаСПротоколомСобытийВызовСервера.ДобавитьИнформацию(
			НСтр("ru = 'Данных для обработки нет'; en = 'There are no data for processing'"));

		ОчисткаБазыДанныхВызовСервера.ОчиститьПринятыеДанные();

		КоличествоЗагруженныхСообщений = 0;

	Иначе

		РаботаСПротоколомСобытийВызовСервера.ДобавитьИнформацию(
			НСтр("ru = 'Начало записи загруженных данных'; en = 'The beginning of record of the loaded data'"));

		КоличествоЗагруженныхСообщений = ПолучитьКоличествоСообщений();

		Для Счетчик = 1 По КоличествоЗагруженныхСообщений Цикл

			ОбработатьСледующееСообщение(ДатаНачалаСинхронизации, СведенияОЗагруженныхДанных);

		КонецЦикла;

		РаботаСПротоколомСобытийВызовСервера.ДобавитьИнформацию(
			НСтр("ru = 'Конец записи загруженных данных'; en = 'loaded data are written down'"));

	КонецЕсли;

	ДобавитьИнформациюОЗамереВремени(
		СведенияОЗагруженныхДанных.ПоказателиОбмена.ВременныеПоказатели, 
		НСтр("ru = 'Запись данных'; en = 'Data record'"), НачалоОперации, ТекущаяДата());

	Возврат КоличествоЗагруженныхСообщений;

КонецФункции

// Выполняет финальные действия после обмена с сервером.
//
// Параметры:
//	СведенияОЗагруженныхДанных - Структура, описывающая загружаемые данные;
//  РежимСинхронизации         - Строка - Текущий режим синхронизации.
//
Процедура ЗавершитьОтправкуИПолучение(СведенияОЗагруженныхДанных, РежимСинхронизации)

	Начало = ТекущаяДата();

	Если Не РежимСинхронизации = "ОтключитьУстройство" Тогда

		ИнформацияОПакете = "";

		Если СведенияОЗагруженныхДанных.ПоказателиОбмена.КоличествоОбработанныхОбъектов = 0 Тогда
			Константы.ДатаПоследнегоОбновления.Установить(ТекущаяДата());
		КонецЕсли;

		ДатаСинхронизацииУстановлена = 
			ЗначениеЗаполнено(Константы.ДатаПоследнегоОбновления.Получить());

		Если Не ДатаСинхронизацииУстановлена Тогда
			Константы.ДатаПоследнегоОбновления.Установить(ТекущаяДата());
		КонецЕсли;

	КонецЕсли;

	ДобавитьИнформациюОЗамереВремени(
		СведенияОЗагруженныхДанных.ПоказателиОбмена.ВременныеПоказатели, 
		НСтр("ru = 'Окончание синхронизации'; en = 'End'"), Начало);

	ПолучитьОписаниеСеансаОбмена(СведенияОЗагруженныхДанных.ПоказателиОбмена);

	Если СведенияОЗагруженныхДанных.ЕстьОшибки Тогда
		ОбщегоНазначенияВызовСервера.УстановитьЗначениеКонстанты(
			"ЕстьНеотправленныеДанные", Истина);
	Иначе
		ОбщегоНазначенияВызовСервера.ОчиститьОчередьСообщенийДляСервера();
		ОбщегоНазначенияВызовСервера.УстановитьЗначениеКонстанты(
			"ЕстьНеотправленныеДанные", Ложь);
	КонецЕсли;

	ОбщегоНазначенияВызовСервера.ОбновитьПовторноИспользуемыеЗначенияСервер();
	
	// ПМВ
	//ОбщегоНазначенияВызовСервера.УстановитьЗначениеКонстанты(
	//		"МногоСессий", СведенияОЗагруженныхДанных.МногоСессий = "1");

КонецПроцедуры


// Сообщает пользователю текущую информацию о процессе синхронизации с сервером.
//
// Параметры:
//  ТекущаяСтадия	 - Строка - Текущая стадия в процедуре синхронизации;
//  ВыполнениеВФоне	 - Булево - Признак, что сообщения пользователю идут из фонового задания;
//  ЕстьОшибки		 - Булево - Признак наличия ошибок при обмене;
//  ЕстьДанные		 - Булево - Признак наличия данных загруженных с сервера;
//  Данные			 - Массив[4], Строка - Данные, которые нужно передать на клиент.
//
Процедура СообщитьПользователю(ТекущаяСтадия, ВыполнениеВФоне, ЕстьОшибки = Ложь, ЕстьДанные = Ложь, Данные = Неопределено)

	Если Не ВыполнениеВФоне Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(Данные) = Тип("Массив") Тогда
		ТекстСообщения = 
			СтрШаблон(
				"%1;%2;%3;%4",
				ТекущаяСтадия, ЕстьОшибки, ЕстьДанные, 
				СтрШаблон("%1,%2,%3,%4", Данные[0],Данные[1], Данные[2], Данные[3]));
	Иначе
		ТекстСообщения = 
			СтрШаблон(
				"%1;%2;%3;%4",
				ТекущаяСтадия, ЕстьОшибки, ЕстьДанные, Данные);
	КонецЕсли;

	Сообщение = Новый СообщениеПользователю();
	Сообщение.Текст = ТекстСообщения;

	Сообщение.Сообщить();

КонецПроцедуры


// Начинает процесс отправки данных по протоколу WMC.
//
// Параметры:
//  СостояниеОбмена						 - Структура - Параметры текущего вызова сервера;
//  ДанныеОПрокси						 - Структура - Параметры подключения;
//  НеобходимоПолучитьДанныеОтСервера	 - Булево - Признак необходимости получения ответа от сервера;
//  СведенияОЗагруженныхДанных			 - Структура - Описание текущих загруженных данных.
//
Процедура ОтправитьДанныеПоФорматуWMC(СостояниеОбмена, ДанныеОПрокси, СведенияОЗагруженныхДанных)

	Прокси = ДанныеОПрокси.Прокси;
	НомерВерсииСервиса = ДанныеОПрокси.ВерсияСервиса;

	ИдентификаторПоследнегоЗагруженногоСообщения = 
		Строка(Константы.ИдентификаторПоследнегоЗагруженногоСообщения.Получить());

	НомерПоследнейЗагруженнойЧастиСообщения = 
		Константы.НомерПоследнейЗагруженнойЧастиСообщения.Получить();

	ИнформацияОбУстройстве = ПолучитьПредставлениеУстройства();
	КодУстройства          = Константы.КодУстройства.Получить();

	Сообщения = Новый Массив;
	Выборка   = РегистрыСведений.ОчередьСообщенийНаСервер.Выбрать(, "МоментВремени");

	Пока Выборка.Следующий() Цикл

		// Формирование объекта XDTO, который передаст данные на сервер
		//	и запустит процесс формирования ответного сообщения.
		ОбъектXDTOСообщение = СоздатьОбъект("XRequest", НомерВерсииСервиса, Прокси);
		ОбъектXDTOСообщение.ClientCode = КодУстройства;
		ОбъектXDTOСообщение.ExchangeData = Выборка.Данные.Получить();
		ОбъектXDTOСообщение.LastResponseID = "0";
		ОбъектXDTOСообщение.LastResponsePartIndex = 1;

		СтруктураСообщение = Новый Структура();
		СтруктураСообщение.Вставить("Идентификатор", Выборка.Идентификатор);
		СтруктураСообщение.Вставить("Сообщение"    , ОбъектXDTOСообщение);

		Сообщения.Добавить(СтруктураСообщение);

	КонецЦикла;

	//
	Если Сообщения.Количество() > 0 Тогда

		ПоследнийЭлементМассива = Сообщения[Сообщения.Количество() - 1];
		ПоследнийЭлементМассива.Сообщение.LastResponseID = ИдентификаторПоследнегоЗагруженногоСообщения;

	Иначе

		// Формируем пустое сообщение с указанием используемой версии обмена
		ИмяФайлаСообщенияОбмена = ПолучитьИмяВременногоФайла("xml");
		Версия = ОбменВызовСервераПовтИсп.ПолучитьВерсиюСервиса();

		ЗаписьXML = ОбменФормированиеСообщенийВызовСервера.НачатьЗаписьВXML(
			Версия, ИмяФайлаСообщенияОбмена);

		ОбменФормированиеWMCСервер.ЗаписатьВXMLИнформациюОКлиенте(
			ЗаписьXML, Версия);

		ОбменФормированиеСообщенийВызовСервера.ЗакончитьЗаписьВXML(ЗаписьXML);

		ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяФайлаСообщенияОбмена);

		// записываем сообщение 
		ОбъектXDTOСообщение = СоздатьОбъект("XRequest", НомерВерсииСервиса, Прокси);
		ОбъектXDTOСообщение.ClientCode = КодУстройства;
		ОбъектXDTOСообщение.ExchangeData = Base64Строка(ДвоичныеДанныеФайла);
		ОбъектXDTOСообщение.LastResponseID = ИдентификаторПоследнегоЗагруженногоСообщения;
		ОбъектXDTOСообщение.LastResponsePartIndex = 1;

		СтруктураСообщение = Новый Структура();
		СтруктураСообщение.Вставить("Идентификатор", Неопределено);
		СтруктураСообщение.Вставить("Сообщение"    , ОбъектXDTOСообщение);

		Сообщения.Добавить(СтруктураСообщение);

	КонецЕсли;

	МоментВремени = РаботаСПротоколомСобытийВызовСервера.ДобавитьИнформацию(
		СтрШаблон(
			НСтр("ru = 'На сервер отправлено сообщений: %1'; 
				|en = 'Send message to server: %1'"), 
			Сообщения.Количество()));

	Для Каждого СтруктураСообщение Из Сообщения Цикл

		Попытка

			Ответ = Прокси.Put(СтруктураСообщение.Сообщение);

		Исключение

			МоментВремени = РегистрыСведений.ПротоколСобытий.ДобавитьОшибку(
				ПолучитьПредставлениеОшибкиПриПодключении(ИнформацияОбОшибке()));

			РегистрыСведений.ПротоколСобытий.УстановитьНеобходимостьОтображенияПослеСинхронизации(
				МоментВремени, Истина);

			Возврат;

		КонецПопытки;

		ОбработатьДанныеОбменаWMC(Ответ, СостояниеОбмена);

	КонецЦикла;

	СостояниеОбмена.ЕстьОшибки = Ложь;

	РаботаСПротоколомСобытийВызовСервера.ДобавитьИнформацию(
		НСтр("ru = 'Сообщение отправлено на сервер'"));

КонецПроцедуры 

// Начинает процесс получения данных по протоколу WMC.
//
// Параметры:
//  ДанныеОПрокси	 - Структура - Параметры подключения;
//  СостояниеОбмена	 - Структура - Параметры текущего вызова сервера.
//
Процедура ПолучитьДанныеПоФорматуWMC(ДанныеОПрокси, СостояниеОбмена)

	НомерВерсииСервиса = ДанныеОПрокси.ВерсияСервиса;
	Прокси = ДанныеОПрокси.Прокси;

	ЗапросНаСледующуюЧасть = СоздатьОбъект("XRequest", НомерВерсииСервиса, Прокси);
	ЗапросНаСледующуюЧасть.ClientCode = Константы.КодУстройства.Получить();
	ЗапросНаСледующуюЧасть.ExchangeData = Base64Строка("");
	ЗапросНаСледующуюЧасть.LastResponseID = 
		Строка(Константы.ИдентификаторПоследнегоЗагруженногоСообщения.Получить());

	ЗапросНаСледующуюЧасть.LastResponsePartIndex = 
		Константы.НомерПоследнейЗагруженнойЧастиСообщения.Получить();

	// Зафиксируем время начала операции
	НачалоОперации = ТекущаяУниверсальнаяДатаВМиллисекундах();

	Ответ = Прокси.Get(ЗапросНаСледующуюЧасть);

	// Зафиксируем время выполнения операции
	СостояниеОбмена.ВремяЗагрузкиДанных = ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоОперации;

	ОбработатьДанныеОбменаWMC(Ответ, СостояниеОбмена);

КонецПроцедуры

// Получает представление ошибки для пользователя.
//
// Параметры:
//  Инфо - Информация о ошибке - информация о произошедшей ошибке;
// 
// Возвращаемое значение:
//  Строка - Пользовательское представление ошибки.
//
Функция ПолучитьПредставлениеОшибкиПриПодключении(Инфо)

	ТекстИсключенияПодробно = ПодробноеПредставлениеОшибки(Инфо);

	Если СтрНайти(НРег(ТекстИсключенияПодробно), "работа с мобильными клиентами выключена") > 0 Тогда

		ОбщееОписаниеОшибки = 
			НСтр("ru = 'На сервере не включена работа с мобильными клиентами.
				|Обратитесь к администратору.'
				|; en = 'Mobile client support on server is disabled.
				|Contact your administrator.'");

		ТекстОшибки = 
			РаботаСоСтрокамиКлиентСервер.СформироватьПредставлениеОшибки(
				ОбщееОписаниеОшибки, ПодробноеПредставлениеОшибки(Инфо));

	ИначеЕсли СтрНайти(НРег(ТекстИсключенияПодробно), "не разрешен доступ к программе") > 0 Тогда

		ОбщееОписаниеОшибки = 
			НСтр("ru = 'Указанному пользователю не разрешен доступ к Центральной базе с использованием мобильного клиента.
				|Обратитесь к администратору.'
				|; en = 'You don''t have access previlegies to database with mobile device.
				|Contact your administrator.'");

		ТекстОшибки = 
			РаботаСоСтрокамиКлиентСервер.СформироватьПредставлениеОшибки(
				ОбщееОписаниеОшибки, ПодробноеПредставлениеОшибки(Инфо));

	ИначеЕсли СтрНайти(НРег(ТекстИсключенияПодробно), "xml") > 0 Тогда

		ОбщееОписаниеОшибки = СтрШаблон(
			НСтр("ru = 'При отправке данных на сервер возникла ошибка.
				|Вероятно, не работает интернет-соединение или запрещен доступ к Центральной базе по адресу %1.
				|Повторите попытку синхронизации.
				|Если повторные попытки синхронизации не удаются, обратитесь к администратору.
				|'; en = 'An error occured while send data to server
				|Probably internet connection %1 is does not work properly or mobile client support on server is disabled
				|Try again later
				|If another attempt will be failed, contact your administrator'"), 
			Константы.АдресЦентральнойБазы.Получить());

		ТекстОшибки = 
			РаботаСоСтрокамиКлиентСервер.СформироватьПредставлениеОшибки(
				ОбщееОписаниеОшибки, ПодробноеПредставлениеОшибки(Инфо));

	Иначе

		ОбщееОписаниеОшибки = 
			НСтр("ru = 'При отправке данных на сервер возникла ошибка.'
				|; en = 'An error occured while send data to server'");

		ТекстОшибки = 
			РаботаСоСтрокамиКлиентСервер.СформироватьПредставлениеОшибки(
				ОбщееОписаниеОшибки, ПодробноеПредставлениеОшибки(Инфо));

	КонецЕсли;

	Возврат ТекстОшибки;

КонецФункции

// Получает используемую в файле версию протокола обмена.
//
// Параметры:
//  ИмяВременногоФайла - Строка - имя временного файла с сообщением сервера.
// 
// Возвращаемое значение:
//  Строка - "101", (...) в зависимости от версии формата сообщения.
//
Функция ПолучитьВерсиюФорматаСообщенияОбмена(ИмяВременногоФайла)

	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяВременногоФайла);
	ЧтениеXML.Прочитать();

	Версия = Строка(ЧтениеXML.ПолучитьАтрибут("Version"));

	Если СтрНайти(Константы.ПоддерживаемыеВерсииФорматаОбмена.Получить(), Версия) = 0 Тогда

		ТекстИсключения = 
			СтрШаблон(
				НСтр("ru = 'Клиент не поддерживает данную версию сервера ДО (%1). 
					|Для обеспечения работы мобильного клиента необходимо обновить сервер.
					|Обратитесь к администратору.'; 
					|en = 'The client does not support this version of the server (1%).
					|To ensure the operation of the mobile client must update the server.
					|Contact your administrator.'"),
				Версия);

		ВызватьИсключение ТекстИсключения;

	КонецЕсли;

	ЧтениеXML.Закрыть();

	Возврат Версия;

КонецФункции

// Выполняет диспетчеризацию просмотра сообщения в зависимости от версии формата.
//
// Параметры:
//  Сообщение - Структура - параметры сообщения обмена
//   * ИмяФайла               - Строка     - Имя временного файла с данными сообщения;
//   * ИдентификаторСообщения - Строка(36) - Идентификатор загруженного сообщения;
//  СведенияОЗагруженныхДанных - Структура - сеансовые данные обмена.
// 
// Возвращаемое значение:
//  Истина - Если в сообщении есть данные для загрузки.
//
Функция ПросмотретьСообщение(Сообщение, СведенияОЗагруженныхДанных)

	ОбщегоНазначенияВызовСервера.СкопироватьФайлДанных(Сообщение.ИмяФайла, "-in-");

	Версия = ПолучитьВерсиюФорматаСообщенияОбмена(Сообщение.ИмяФайла);

	Если Версия >= "101" Тогда
		Возврат ОбменОбработкаWMCСервер.ПросмотретьСообщение(Сообщение, СведенияОЗагруженныхДанных);

	Иначе

		// С сервера может быть получено пустое сообщение
		Возврат Ложь;

	КонецЕсли;

КонецФункции


// Записывает принятую часть сообщения от сервера в регистр и добавляет имя этого файла в
//  массив имен частей.
//
// Параметры:
//  ОбъектXDTOЧастьСообщения - ОбъектXDTO - Очередная часть сообщения, полученная с сервера;
//  СостояниеОбмена          - Структура  - Параметры текущего вызова сервера;
//  ВремяЗакачки             - Число      - Время скачивания очередной части.
//
Процедура ОбработатьДанныеОбменаWMC(ОбъектXDTOЧастьСообщения, СостояниеОбмена)

	// Запись данных части сообщения в регистр 
	Если ОбъектXDTOЧастьСообщения.ExchangeData <> Неопределено Тогда

		ИдентификаторСообщения = Новый УникальныйИдентификатор(ОбъектXDTOЧастьСообщения.ResponseID);

		ДанныеСообщения = 
			Новый ХранилищеЗначения(ОбъектXDTOЧастьСообщения.ExchangeData, Новый СжатиеДанных(9));

		РегистрыСведений.ПолученныеДанныеОбмена.ДобавитьЗапись(
			ИдентификаторСообщения,
			ОбъектXDTOЧастьСообщения.PartIndex,
			ДанныеСообщения);

		Константы.ИдентификаторПоследнегоЗагруженногоСообщения.Установить(
			ИдентификаторСообщения);

		Константы.НомерПоследнейЗагруженнойЧастиСообщения.Установить(
			ОбъектXDTOЧастьСообщения.PartIndex);

		СостояниеОбмена.ОбъемПолученныхДанных = ОбъектXDTOЧастьСообщения.ExchangeData.Размер();

	КонецЕсли;

	СостояниеОбмена.КоличествоСообщенийВОчереди = ОбъектXDTOЧастьСообщения.PartCount;
	СостояниеОбмена.ПродолжитьЗагрузку = 
		(ОбъектXDTOЧастьСообщения.PartIndex = -1 Или Не ОбъектXDTOЧастьСообщения.PartCount = 0);

КонецПроцедуры


// Получает текст описания сеанса обмена.
//
// Параметры:
//  СведенияОЗагруженныхДанных	 - Структура - Данные о операциях проведенных в сеансе.
//
// Возвращаемое значение:
//  Строка - Текстовое представление сеанса обмена.
//
Процедура ПолучитьОписаниеСеансаОбмена(ПоказателиОбмена)

	ВыводитьРасширенныйПротокол = ОбменВызовСервераПовтИсп.ИспользоватьРасширенноеПротоколированиеОпераций();

	ИнформацияОПакете = НСтр("ru = 'Сводка по загруженным по объектам'; en = 'The report on loaded on objects'");

	// Отсортируем показатели объектов по алфавиту
	Список = Новый СписокЗначений();
	Для Каждого Показатель Из ПоказателиОбмена.СчетчикиОбъектов Цикл
		Список.Добавить(Показатель.Значение, Показатель.Ключ);
	КонецЦикла;
	Список.СортироватьПоПредставлению(НаправлениеСортировки.Возр);

	Для Каждого ЭлементДанных Из Список Цикл

		ПоказателиОбъекта = ЭлементДанных.Значение;
		ИнформацияОПакете = ИнформацияОПакете + Символы.ПС 
			+ СтрШаблон(
				НСтр("ru = 'Тип: %1, кол-во: %2'; en = 'Type: %1, count: %2'"),
				ЭлементДанных.Представление, 
				ПоказателиОбъекта.Количество);

	КонецЦикла;

	ИнформацияОПакете = ИнформацияОПакете + Символы.ПС 
		+ СтрШаблон(
			НСтр("ru = 'Всего объектов: %1'; en = 'Total: %1'"), 
			ПоказателиОбмена.КоличествоЗагружаемыхОбъектов);

	Начало = ПоказателиОбмена.ВременныеПоказатели[0].Начало;
	Конец  = ПоказателиОбмена.ВременныеПоказатели[
		ПоказателиОбмена.ВременныеПоказатели.ВГраница()].Начало;
	ЗатраченноеВремя = Конец - Начало;

	Если ВыводитьРасширенныйПротокол Тогда

		ИнформацияОПакете = ИнформацияОПакете + Символы.ПС + Символы.ПС 
			+ НСтр("ru = '#Подробная информация для администратора:#'");

		ИнформацияОПакете = ИнформацияОПакете + Символы.ПС + Символы.ПС 	
			+ СтрШаблон(
				НСтр("ru = 'Обращений к серверу: %1
					|Получено сообщений с сервера: %2
					//|Объем полученных файлов: %4 кб
					|Общий объем данных: %3 кб
					|Общее количество объектов в сеансе обмена: %5'"),
				ПоказателиОбмена.КоличествоИтерацийОбмена,
				ПоказателиОбмена.ВсегоПолученоСообщений,
				Формат(ПоказателиОбмена.ОбъемПолученныхДанных /1024, "ЧЦ=15"),
				//Формат(ПоказателиОбмена.ОбъемПолученныхФайлов / 1024, "ЧЦ=15"),
				ПоказателиОбмена.КоличествоЗагружаемыхОбъектов);

		ИнформацияОПакете = ИнформацияОПакете + Символы.ПС + Символы.ПС 
			+ СтрШаблон(
				НСтр("ru = 'Новых контрагентов: %1
					|Новых товаров: %2'"),
				ПоказателиОбмена.НовыеКонтрагенты, 
				ПоказателиОбмена.НовыеТовары);

		ИнформацияОПакете = ИнформацияОПакете + Символы.ПС + Символы.ПС 
			+ НСтр("ru = 'Показатели обмена по операциям'");

		Для Каждого Показатель Из ПоказателиОбмена.ВременныеПоказатели Цикл

			ИнформацияОПакете = ИнформацияОПакете + Символы.ПС 
				+ СтрШаблон(
					НСтр("ru = '%2: %1'; en = '%2: %1'"),
					Показатель.Описание, Формат(Показатель.Начало, "ДЛФ=T"));

			Если Не Показатель.Конец = Неопределено Тогда
				ИнформацияОПакете = ИнформацияОПакете 
					+ " " + СтрШаблон(
						НСтр("ru = '(%1 сек)'; en = '(%1 s)'"),
						(Показатель.Конец - Показатель.Начало));
			КонецЕсли;

		КонецЦикла;

		ИнформацияОПакете = ИнформацияОПакете + Символы.ПС 
			+ СтрШаблон(
				НСтр("ru = 'Всего затрачено времени: %1 сек'; en = 'Total time elapsed: %1 s'"),
				(ЗатраченноеВремя));

	КонецЕсли;

	МоментВремени = РаботаСПротоколомСобытийВызовСервера.ДобавитьИнформацию(ИнформацияОПакете);

	Если ОбменВызовСервераПовтИсп.ИспользоватьРасширенноеПротоколированиеОпераций() Тогда
		РаботаСПротоколомСобытийВызовСервера.УстановитьПризнакПоказаСобытияПослеСинхронизации(МоментВремени);
	КонецЕсли;

КонецПроцедуры 

// Добавляет информацию о замере времени для протокола.
//
Процедура ДобавитьИнформациюОЗамереВремени(
	ВременныеПоказатели, Описание, Начало, Конец = Неопределено)

	Результат = Новый Структура();
	Результат.Вставить("Описание", Описание);
	Результат.Вставить("Начало"  , Начало);
	Результат.Вставить("Конец"   , Конец);

	ВременныеПоказатели.Добавить(Результат);

КонецПроцедуры

// Формирует представление файла с указанием его размера.
//
// Параметры:
//  ПредставлениеФайла	 - Строка - Представление файла;
//  Размер				 - Число - Размер файла.
//
Процедура СформироватьПредставлениеРазмераФайла(ПредставлениеФайла, Размер) Экспорт

	Если Не ЗначениеЗаполнено(Размер) Тогда
		Размер = 0;
	КонецЕсли;

	Если Размер >= 0 И Размер < 1024 Тогда

		РазмерСтрокой = Формат(Размер, "ЧГ=");
		Представление = НСтр("ru = 'б'; en = 'b'");

	ИначеЕсли Размер >= 1024 И Размер < 1024 * 1024 Тогда
		РазмерСтрокой = Формат(Размер/1024, "ЧДЦ=0; ЧГ=");
		Представление = НСтр("ru = 'Кб'; en = 'Kb'");

	ИначеЕсли Размер >= 1024*1024 Тогда

		РазмерСтрокой = Формат(Размер/(1024*1024), "ЧДЦ=0; ЧГ=");
		Представление = НСтр("ru = 'Мб'; en = 'Mb'");

	КонецЕсли;

	ПредставлениеФайла = СтрШаблон("%1 %2",
		РазмерСтрокой, Представление);

КонецПроцедуры

// Обновляет данные файла, данными файла-основания полученным с сервера
//
// Параметры:
//  Объект	 - Ссылка - Ссылка на файл-основание.
//
Процедура ОбновитьПодчиненныеФайлы(Объект) Экспорт

	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ФайлОснование", Объект.Ссылка);

	ВыборкаФайлыОснование = Справочники.Файлы.Выбрать(,, СтруктураОтбора);
	Пока ВыборкаФайлыОснование.Следующий() Цикл

		ФайлОбъект = ВыборкаФайлыОснование.Ссылка.ПолучитьОбъект();
		ФайлОбъект.Данные          = Объект.Данные;
		ФайлОбъект.ТолькоЗаголовок = Объект.ТолькоЗаголовок;

		Если Не ФайлОбъект.ТолькоЗаголовок Тогда
			ФайлОбъект.ФайлОснование = Справочники.Файлы.ПустаяСсылка();
		КонецЕсли;

		ФайлОбъект.Записать();

		РегистрыСведений.ДатыЗагрузкиОбъектов.ОбновитьДатуПоследнегоИзмененияОбъекта(ФайлОбъект.Ссылка);

	КонецЦикла;

КонецПроцедуры

// Получить представление устройства для обмена.
// 
// Возвращаемое значение:
//  Строка - Представление устройства в виде строки.
//
Функция ПолучитьПредставлениеУстройства()

	СистемнаяИнформация     = Новый СистемнаяИнформация;
	ПредставлениеУстройства = СтрШаблон(
				НСтр("ru = 'Версия:%5, ОС:%2, ОЗУ:%3, WS:%1, Экран:%4""';
					 |en = 'Version:%5, OS:%2, RAM:%3, WS:%1, Screen:%4""'"),
					ИмяКомпьютера(),
					СистемнаяИнформация.ВерсияОС,
					Строка(СистемнаяИнформация.ОперативнаяПамять),
					Формат(ЭкранКлиентСервер.ДиагональЭкрана(),"ЧЦ=3; ЧДЦ=1"),
					Метаданные.Версия);

	ПредставлениеУстройстваПослеОбработки = ОбщегоНазначенияВызовСервера.УдалитьНедопустимыеСимволыXML(ПредставлениеУстройства);

	Если Не ПредставлениеУстройстваПослеОбработки = ПредставлениеУстройства Тогда

		ТекстПредупреждения = СтрШаблон(
				НСтр("ru = 'Представление устройства содержит недопустимые символы:
					|Возможно задано неверное имя устройства
					|Должно быть: %1,
					|Есть: %2';
					|en = 'Wrong character in device name
					|Must be: %1
					|Presently: %2'"),
				ПредставлениеУстройстваПослеОбработки,
				ПредставлениеУстройства);

		МоментВремени = РаботаСПротоколомСобытийВызовСервера.ДобавитьИнформацию(ТекстПредупреждения);

		РаботаСПротоколомСобытийВызовСервера.УстановитьПризнакПоказаСобытияПослеСинхронизации(МоментВремени);

	КонецЕсли;

	Возврат ПредставлениеУстройстваПослеОбработки;

КонецФункции 

#КонецОбласти
