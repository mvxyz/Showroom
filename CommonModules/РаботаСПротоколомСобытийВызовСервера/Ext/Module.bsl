
#Область ПрограммныйИнтерфейс

// Добавляет запись протокола с видом "предупреждение" для конкретного объекта.
//
// Параметры:
//  Описание - Строка - Описание произошедшего события.
//  ТипОбъекта - Строка - Тип объекта, для которого добавляется запись.
//  ИдентификаторОбъекта - УникальныйИдентификатор - идентификатор объекта, для которого
//													добавляется запись.
// 
// Возвращаемое значение:
//  МоментВремени - Момент времени, в который добавлена запись протокола.
//
Функция ДобавитьИнформациюПоОбъекту(Описание, ТипОбъекта, ИдентификаторОбъекта) Экспорт

	Возврат РегистрыСведений.ПротоколСобытий.ДобавитьИнформациюПоОбъекту(
		Описание,
		ТипОбъекта,
		ИдентификаторОбъекта);

КонецФункции

// Добавляет запись протокола с видом "информация".
//
// Параметры:
//  Описание - Строка - Описание произошедшего события.
// 
// Возвращаемое значение:
//  МоментВремени - Момент времени, в который добавлена запись протокола.
//
Функция ДобавитьИнформацию(Описание) Экспорт

	Возврат РегистрыСведений.ПротоколСобытий.ДобавитьИнформацию(Описание);

КонецФункции

// Добавляет запись протокола с видом "ошибка".
//
// Параметры:
//  Описание - Строка - Описание произошедшего события.
// 
// Возвращаемое значение:
//  МоментВремени - Момент времени, в который добавлена запись протокола.
//
Функция ДобавитьОшибку(Описание) Экспорт

	МоментВремени = РегистрыСведений.ПротоколСобытий.ДобавитьОшибку(Описание);

	РегистрыСведений.ПротоколСобытий.УстановитьНеобходимостьОтображенияПослеСинхронизации(МоментВремени, Истина);
	
	Возврат МоментВремени;

КонецФункции

// Добавляет запись протокола с видом "предупреждение".
//
// Параметры:
//  Описание - Строка - Описание произошедшего события.
// 
// Возвращаемое значение:
//  МоментВремени - Момент времени, в который добавлена запись протокола.
//
Функция ДобавитьПредупреждение(Описание) Экспорт

	Возврат РегистрыСведений.ПротоколСобытий.ДобавитьПредупреждение(Описание);

КонецФункции

// Формирует текст протокола по указанным параметрам.
//
// Параметры:
//  Период		 - Число  - Количество секунд назад от текущей даты .
//  ТолькоОшибки - Булево - Включить в выборку только ошибки.
//
// Возвращаемое значение:
//  Строка - Сформированный по указанным параметрам текст протокола.
//
Функция ПолучитьТекстПротокола(Период = Неопределено, ТолькоОшибки = Ложь) Экспорт
	
	Если Период = Неопределено Тогда

		// По-умолчанию за последнюю неделю
		Период = 7*24*60*60;

	КонецЕсли;

	Текст   = "";
	Выборка = РегистрыСведений.ПротоколСобытий.Выбрать(ТекущаяДата() - Период,,, "МоментВремени Убыв");
	Пока Выборка.Следующий() Цикл

		Если ТолькоОшибки И Не Выборка.ТипСобытия = Перечисления.ТипыСобытийПротокола.Ошибка Тогда
			Продолжить;
		КонецЕсли;

		НомерСессии = "";
		Если Не Выборка.СессияСинхронизации = 0 Тогда
			НомерСессии = "("+Выборка.СессияСинхронизации+")";
		КонецЕсли;

		Текст = Текст
			+ СтрШаблон(
				"%1 %2
				|%3
				| ",
				Выборка.Период, НомерСессии, Выборка.Описание)
			+ "__________________" + Символы.ПС;

	КонецЦикла;

	Возврат Текст;

КонецФункции

// Устанавливает признак необходимости показа сообщения в окне ошибок после
// окончания обмена с сервером.
//
// Параметры:
//  МоментВремени - Число - Момент, когда произошла ошибка.
//
Процедура УстановитьПризнакПоказаСобытияПослеСинхронизации(МоментВремени) Экспорт

	РегистрыСведений.ПротоколСобытий.УстановитьНеобходимостьОтображенияПослеСинхронизации(МоментВремени, Истина);

КонецПроцедуры

// Записывает информацию в протокол если включено расширенное протоколирование.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка, Строка - Ссылка на объект или уникальный идентификатор объекта;
//  Информация     - Строка - Описание события.
//
Процедура ДобавитьЗаписьРасширенногоПротокола(СсылкаНаОбъект, Информация) Экспорт

	Если Не ОбменВызовСервераПовтИсп.ИспользоватьРасширенноеПротоколированиеОпераций() Тогда
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Возврат;
	КонецЕсли;

	ТипОбъекта = ТипЗнч(СсылкаНаОбъект);

	Если ТипОбъекта = Тип("Строка") 
	 Или ТипОбъекта = Тип("УникальныйИдентификатор") Тогда
		РегистрыСведений.ПротоколСобытий.ДобавитьИнформациюПоОбъекту(Информация, "", СсылкаНаОбъект);

	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.Заказ")
		 Или ТипОбъекта = Тип("СправочникСсылка.Валюты")
		 Или ТипОбъекта = Тип("СправочникСсылка.ВидыНоменклатуры")
		 Или ТипОбъекта = Тип("СправочникСсылка.ДоговорыКонтрагентов")
		 Или ТипОбъекта = Тип("СправочникСсылка.ЕдиницыИзмерения")
		 Или ТипОбъекта = Тип("СправочникСсылка.Качество")
		 Или ТипОбъекта = Тип("СправочникСсылка.Контрагенты")
		 Или ТипОбъекта = Тип("СправочникСсылка.Номенклатура")
		 Или ТипОбъекта = Тип("СправочникСсылка.Пользователи")
		 Или ТипОбъекта = Тип("СправочникСсылка.СерииНоменклатуры")
		 Или ТипОбъекта = Тип("СправочникСсылка.Склады")
		 Или ТипОбъекта = Тип("СправочникСсылка.ТипыЦенНоменклатуры")
		 Или ТипОбъекта = Тип("СправочникСсылка.ХарактеристикиНоменклатуры")
		 Или ТипОбъекта = Тип("СправочникСсылка.ХранилищеДополнительнойИнформации")Тогда
		 
			РегистрыСведений.ПротоколСобытий.ДобавитьИнформациюПоОбъекту(Информация, 
				Строка(ТипОбъекта), СсылкаНаОбъект.УникальныйИдентификатор());

	Иначе			
		РегистрыСведений.ПротоколСобытий.ДобавитьИнформациюПоОбъекту(Информация, "", "");
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти