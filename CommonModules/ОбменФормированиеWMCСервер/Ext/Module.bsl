
#Область ПрограммныйИнтерфейс

// Инициирует запись команды подключения нового устройства в XML в зависимости от указанной версии.
//
// Параметры:
//  ЗаписьXML - ЗаписьXML - Объект записи данных XML;
//  Версия    - Строка - Желаемая версия формата данных.
//
Процедура ЗаписатьВXMLКомандуПодключенияУстройства(ЗаписьXML, Версия) Экспорт

	Если Версия >= "101" Тогда
		ВыгрузитьСообщениеДляПодключенияУстройстваПоВерсии101(ЗаписьXML, Версия);
	КонецЕсли;

КонецПроцедуры

// Инициирует запись команды отключения устройства в XML в зависимости от указанной версии.
//
// Параметры:
//  ЗаписьXML - ЗаписьXML - Объект записи данных XML;
//  Версия    - Строка - Желаемая версия формата данных.
//
Процедура ЗаписатьВXMLКомандуОтключенияУстройства(ЗаписьXML, Версия) Экспорт

	Если Версия >= "101" Тогда
		ВыгрузитьСообщениеДляОтключенияУстройстваПоВерсии101(ЗаписьXML, Версия);
	КонецЕсли;

КонецПроцедуры

// Инициирует запись запроса файла с сервера в XML в зависимости от указанной версии.
//
// Параметры:
//  ЗаписьXML  - ЗаписьXML - Объект записи данных XML;
//  Версия     - Строка - Желаемая версия формата данных;
//  ФайлСсылка - СправочникСсылка.Файлы - Ссылка на запрашиваемый файл.
//
Процедура ЗаписатьВXMLКомандуПолученияОдногоФайла(ЗаписьXML, Версия, ФайлСсылка) Экспорт

	Если Версия >= "101" Тогда
		ВыгрузитьСообщениеДляПолученияОдногоФайлаПоВерсии101(ЗаписьXML, Версия, ФайлСсылка);
	КонецЕсли;

КонецПроцедуры

// Инициирует запись данных информации о клиентском устройстве в XML в зависимости от указанной версии.
//
// Параметры:
//  ЗаписьXML - ЗаписьXML - Объект записи данных XML;
//  Версия    - Строка - Желаемая версия формата данных.
//
Процедура ЗаписатьВXMLИнформациюОКлиенте(ЗаписьXML, Версия) Экспорт

	Если Версия >= "101" Тогда
		ВыгрузитьИнформациюОКлиентеПоВерсии101(ЗаписьXML);
	КонецЕсли;

КонецПроцедуры

// Записывает указанный объект в виде XML для передачи на сервер.
//
// Параметры:
//  ЗаписьXML     - ЗаписьXML - Объект записи данных XML;
//  ВерсияСервиса - Строка - Желаемая версия формата данных;
//  Объект        - Произвольный - Объект, передаваемый на сервер (Ссылка или НаборЗаписей).
//
Процедура ЗаписатьОбъектВXML(ЗаписьXML, ВерсияСервиса, Объект) Экспорт

	Если ТипЗнч(Объект) = Тип("УдалениеОбъекта") Тогда

		ЗаписатьВXMLУдалениеОбъекта(ЗаписьXML, ВерсияСервиса, Объект);

	ИначеЕсли ТипЗнч(Объект) = Тип("РегистрСведенийНаборЗаписей.ПротоколСобытий") Тогда

		Для Каждого Запись Из Объект Цикл
			ЗаписатьВXMLЗаписьПротоколаСобытий(ЗаписьXML, ВерсияСервиса, Запись);
		КонецЦикла;
		
	//////////////////////////////////////////////////////////////////////////////	
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.Заказ") Тогда
		ЗаписатьВXMLЗаказ(ЗаписьXML, ВерсияСервиса, Объект.Ссылка);	
	//////////////////////////////////////////////////////////////////////////////	
	
	Иначе

		Описание = СтрШаблон(
			НСтр("ru = 'Пропущен объект (%1, %2)'; en = 'object skipped (%1, %2)'"), 
			ТипЗнч(Объект),
			Строка(Объект));

		РегистрыСведений.ПротоколСобытий.ДобавитьПредупреждение(Описание);

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура - Записать заголовок элемента данных.
//
// Параметры:
//  ЗаписьXML       - ЗаписьXML - Объект записи;
//  ИмяТипаОбъекта  - Строка - Строковое представление типа выгружаемого объекта;
//  ВерсияФормата   - Строка - Использованная при выгрузке версия формата.
//
Процедура ЗаписатьЗаголовокОбъекта(ЗаписьXML, ИмяТипаОбъекта, ВерсияФормата) Экспорт

	ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяТипаОбъекта);
	ЗаписьXML.ЗаписатьАтрибут("Version", ВерсияФормата);

КонецПроцедуры

// Выполняет проверку, получение и запись идентификатора объекта.
//
// Параметры:
//  ЗаписьXML        - ЗаписьXML - Объект записи;
//  ИмяЭлемента		 - Строка - Имя записываемого элемента;
//  ЗначениеЭлемента - Ссылка - Ссылка на объект выгружаемый на сервер.
//
Процедура ЗаписатьИдентификаторЭлементаДанных(ЗаписьXML, ИмяЭлемента, ЗначениеЭлемента)

	Если Не ЗначениеЗаполнено(ЗначениеЭлемента) Тогда
		Возврат;
	КонецЕсли;

	УИД = ЗначениеЭлемента.УникальныйИдентификатор();

	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, ИмяЭлемента, УИД);

КонецПроцедуры

// Записывает значение элемента данных в поток XML.
//
// Параметры:
//  ЗаписьXML				   - ЗаписьXML - Объект записи;
//  ИмяЭлемента				   - Строка - имя типа выгружаемого элемента;
//  ЗначениеЭлемента		   - Произвольный - выгружаемый объект;
//  УдалитьНедопустимыеСимволы - Булево - Признак, что для выгружаемого значения нужно удалить недопустимые символы.
//
Процедура ЗаписатьЭлементОбъектаДанных(ЗаписьXML, ИмяЭлемента, ЗначениеЭлемента) Экспорт

	//Не удалять!
	Если Не ЗначениеЗаполнено(ЗначениеЭлемента) Тогда
		Возврат;
	КонецЕсли;

	ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяЭлемента);
	ЗаписьXML.ЗаписатьТекст(XMLСтрока(ЗначениеЭлемента));
	ЗаписьXML.ЗаписатьКонецЭлемента();

КонецПроцедуры

// Выгружает XML представление ссылки на объект.
//
// Параметры:
//  ВерсияКлиента	- Строка - Версия формата запрошенная клиентом;
//  ЭлементДанных	- ДокументСсылка.ВходящееПисьмо - Выгружаемый элемент данных.
// 
// Возвращаемое значение:
//  Строка - XML представление ссылки на объект.
//
Процедура ЗаписатьСсылкуНаЭлементДанных(ЗаписьXML, ИмяЭлемента, ЭлементДанных)

	Если Не ЗначениеЗаполнено(ЭлементДанных) Тогда
		Возврат;
	КонецЕсли;

	// Записываем в поток открывающий тег
	ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяЭлемента);

	// Записываем данные 
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Type", 
		ОбменВызовСервераПовтИсп.ПолучитьПредставлениеТипаПоСсылке(ЭлементДанных));

	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXML, "ID", ЭлементДанных);

	// Записываем закрывающий тег
	ЗаписьXML.ЗаписатьКонецЭлемента();

КонецПроцедуры

#КонецОбласти

#Область ОбработкаКоманд

Процедура ВыгрузитьСообщениеДляПодключенияУстройстваПоВерсии101(ЗаписьXML, Версия)

	// Записываем в поток открывающий тег и версию протокола
	ЗаписатьЗаголовокОбъекта(ЗаписьXML, "Connect", "101");

	// Записываем данные в пакет
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "ClientCode", Константы.КодУстройства.Получить());

	// Записываем закрывающий тег
	ЗаписьXML.ЗаписатьКонецЭлемента();

	ЗаписатьВXMLИнформациюОКлиенте(ЗаписьXML, Версия);

КонецПроцедуры

Процедура ВыгрузитьСообщениеДляОтключенияУстройстваПоВерсии101(ЗаписьXML, Версия)

	// Записываем в поток открывающий тег и версию протокола
	ЗаписатьЗаголовокОбъекта(ЗаписьXML, "Disconnect", "101");

	// Записываем данные 
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Client", Константы.КодУстройства.Получить());

	// Записываем закрывающий тег
	ЗаписьXML.ЗаписатьКонецЭлемента();

КонецПроцедуры

Процедура ВыгрузитьСообщениеДляПолученияОдногоФайлаПоВерсии101(ЗаписьXML, Версия, ФайлСсылка)

	// Записываем в поток открывающий тег и версию протокола
	ЗаписатьЗаголовокОбъекта(ЗаписьXML, "GetFile", "101");

	// Записываем данные 
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXML, "ID", ФайлСсылка);

	// Записываем закрывающий тег
	ЗаписьXML.ЗаписатьКонецЭлемента();

КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииВыгрузкиДанных

#Область ИнформацияОКлиенте

Процедура ВыгрузитьИнформациюОКлиентеПоВерсии101(ЗаписьXML)

	СистемнаяИнформация = Новый СистемнаяИнформация;

	// Записываем в поток открывающий тег и версию протокола
	ЗаписатьЗаголовокОбъекта(ЗаписьXML, "ClientInfo", "101");

	// Записываем данные 
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "AppVersion", 
		Константы.ВерсияПротоколаМобильногоКлиента.Получить());

	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "OS", 
		ОбщегоНазначенияВызовСервера.УдалитьНедопустимыеСимволыXML(СистемнаяИнформация.ВерсияОС));

	РазмерПамяти = СистемнаяИнформация.ОперативнаяПамять;
	РазмерПамяти = ?(РазмерПамяти = 0, 64, РазмерПамяти);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "RAM", РазмерПамяти);

	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "DeviceName", 
		ОбщегоНазначенияВызовСервера.УдалитьНедопустимыеСимволыXML(ИмяКомпьютера()));

	РазмерЭкрана = ЭкранКлиентСервер.ДиагональЭкрана();
	РазмерЭкрана = ?(ЗначениеЗаполнено(РазмерЭкрана), РазмерЭкрана, 4);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "ScreenSize", 
		Формат(РазмерЭкрана,"ЧЦ=3; ЧДЦ=1; ЧРД=.; ЧГ="));
		
	// Записываем закрывающий тег
	ЗаписьXML.ЗаписатьКонецЭлемента(); 

КонецПроцедуры

#КонецОбласти

#Область УдалениеОбъекта

// Определяет какую версию объекта нужно использовать для удаления объекта.
//
// Параметры:
//  ЗаписьXML		 - ЗаписьXML - Объект записи XML файла;
//  ВерсияСервиса	 - Строка - Версия протокола обмена заявленная клиентом;
//  ЭлементДанных	 - Ссылка, Набор, УдалениеОбъекта - Элемент выгружаемых данных.
//
Процедура ЗаписатьВXMLУдалениеОбъекта(ЗаписьXML, ВерсияСервиса, ЭлементДанных)

	// Выбираем версию выгрузки в зависимости от используемой версии клиента
	Если ВерсияСервиса >= "101" Тогда
		ВыгрузитьУдалениеОбъектаПоВерсии101(ЗаписьXML, ЭлементДанных);
	КонецЕсли;

КонецПроцедуры

// Выгружает удаление объекта в терминах версии 101.
//
// Параметры:
//  ЗаписьXML		 - ЗаписьXML - Объект записи XML файла;
//  ЭлементДанных	 - Ссылка, Набор, УдалениеОбъекта - Элемент выгружаемых данных.
//
Процедура ВыгрузитьУдалениеОбъектаПоВерсии101(ЗаписьXML, ЭлементДанных)

	// Записываем в поток открывающий тег и версию протокола
	ЗаписатьЗаголовокОбъекта(ЗаписьXML, "ObjectDeletion", "101");

	// Записываем данные 
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Type", 
		ОбменВызовСервераПовтИсп.ПолучитьПредставлениеТипаПоСсылке(ЭлементДанных.Ссылка));

	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXML, "ID", ЭлементДанных.Ссылка);

	// Записываем закрывающий тег
	ЗаписьXML.ЗаписатьКонецЭлемента();

КонецПроцедуры

#КонецОбласти

#Область Заказ

Процедура ЗаписатьВXMLЗаказ(ЗаписьXML, ВерсияСервиса, ЭлементДанных)

	Если ВерсияСервиса >= "101" Тогда
		ВыгрузитьЗаказПоВерсии101(ЗаписьXML, ЭлементДанных);
	КонецЕсли;

КонецПроцедуры

Процедура ВыгрузитьЗаказПоВерсии101(ЗаписьXML, ЭлементДанных)

	ЗначенияРеквизитов = ОбщегоНазначенияВызовСервера.ЗначенияРеквизитовОбъекта(ЭлементДанных, 
		"Ссылка, Проведен, ПометкаУдаления, Номер, Дата, 
		|Организация, Контрагент, ДоговорКонтрагента, Комментарий, Ответственный, 
		|ТипЦен, ВалютаДокумента, Товары");

	Если Не ЗначениеЗаполнено(ЗначенияРеквизитов.Ссылка) Тогда
		Возврат;
	КонецЕсли;

	// Записываем в поток открывающий тег и версию протокола
	ЗаписатьЗаголовокОбъекта(ЗаписьXML, "Order", "101");

	// Записываем данные 
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXML, "ID", ЗначенияРеквизитов.Ссылка);
	
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Number"		, ЗначенияРеквизитов.Номер);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Date"			, ЗначенияРеквизитов.Дата);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Posted"		, ЗначенияРеквизитов.Проведен);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "DeletionMark"	, ЗначенияРеквизитов.ПометкаУдаления);
	
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXML, "Organization", ЗначенияРеквизитов.Организация);
	
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXML, "Counterparty", ЗначенияРеквизитов.Контрагент);
	
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXML, "Contract", ЗначенияРеквизитов.ДоговорКонтрагента);
	
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXML, "User", ЗначенияРеквизитов.Ответственный);
	
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXML, "PriceType", ЗначенияРеквизитов.ТипЦен);
	
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXML, "Currency", ЗначенияРеквизитов.ВалютаДокумента);
	
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Comment", ОбщегоНазначенияВызовСервера.УдалитьНедопустимыеСимволыXML(ЗначенияРеквизитов.Комментарий));
	
	// Выгружаем ТЧ Товары
	ЗаписьXML.ЗаписатьНачалоЭлемента("Products"); 
	Выборка = ЗначенияРеквизитов.Товары.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("ProductRecord"); // Строка ТЧ Товары
	
		ЗаписатьИдентификаторЭлементаДанных(ЗаписьXML, "Nomenclature", Выборка.Номенклатура);
		
		Если ЗначениеЗаполнено(Выборка.ХарактеристикаНоменклатуры) Тогда
			ЗаписатьИдентификаторЭлементаДанных(ЗаписьXML, "Characteristic", Выборка.ХарактеристикаНоменклатуры);
		КонецЕсли;
		
		ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Price", Выборка.Цена);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "amount", Выборка.Количество);
		ЗаписатьИдентификаторЭлементаДанных(ЗаписьXML, "unit", Выборка.ЕдиницаИзмерения);
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	// Записываем закрывающий тег Products
	ЗаписьXML.ЗаписатьКонецЭлемента();

	// Записываем закрывающий тег Order
	ЗаписьXML.ЗаписатьКонецЭлемента();

КонецПроцедуры

#КонецОбласти 

///////////////////////////////////////////////////////////////

#Область ПротоколСобытий

Процедура ЗаписатьВXMLЗаписьПротоколаСобытий(ЗаписьXML, ВерсияСервиса, ЭлементДанных)

	Если Не ЗначениеЗаполнено(СокрЛП(ЭлементДанных.Описание)) Тогда
		Возврат;
	КонецЕсли;

	Если ВерсияСервиса >= "101" Тогда
		ВыгрузитьЗаписьПротоколаСобытийПоВерсии101(ЗаписьXML, ЭлементДанных);
	КонецЕсли;

КонецПроцедуры

Процедура ВыгрузитьЗаписьПротоколаСобытийПоВерсии101(ЗаписьXML, ЭлементДанных)

	// Записываем в поток открывающий тег и версию протокола
	ЗаписатьЗаголовокОбъекта(ЗаписьXML, "JournalRecord", "101");

	// Записываем данные 
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "RecordType", 
		ОбменВызовСервераПовтИсп.ПолучитьПредставлениеТипаСобытияПротокола(ЭлементДанных.ТипСобытия));
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "ObjectType", ЭлементДанных.ТипОбъекта);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "ObjectID", ЭлементДанных.ИдентификаторОбъекта);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Description", 
		ОбщегоНазначенияВызовСервера.УдалитьНедопустимыеСимволыXML(ЭлементДанных.Описание));
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "RecordDate", ЭлементДанных.Период);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "RecordMSecs", ЭлементДанных.МоментВремени);

	// Записываем закрывающий тег
	ЗаписьXML.ЗаписатьКонецЭлемента();

КонецПроцедуры

#КонецОбласти

#КонецОбласти
