
#Область ПрограммныйИнтерфейс

// Обновляет повторно используемые значения после синхронизации.
//
Процедура ОбновитьПовторноИспользуемыеЗначенияСервер() Экспорт

	ОбновитьПовторноИспользуемыеЗначения();

КонецПроцедуры

// Устанавливает параметры сеанса отвечающие за уведомления.
//
Процедура УстановитьПараметрыСеанса() Экспорт

	ПараметрыСеанса.ВерсияСервиса = "";

КонецПроцедуры

// Устанавливает настройки по умолчанию на устройстве.
//
// Параметры:
//  ИмяКаталогаВременныхФайлов - Строка - Путь к каталогу временных файлов.
// 
// Возвращаемое значение:
//  Структура - Параметры запуска базы.
//    * ЭтоЧистаяБаза - Булево - Признак того, что в базе нет данных;
//    * ТекущийРаздел - Строка - Текущий используемый раздел приложения.
//
Функция УстановитьПервоначальныеНастройки(ИмяКаталогаВременныхФайлов) Экспорт

	УстановитьПараметрыСеанса();

	ОбменВызовСервера.УстановитьТекущуюСессияСинхронизации();

	РаботаСПротоколомСобытийВызовСервера.ДобавитьИнформацию(
		НСтр("ru = 'Запуск приложения'; en = 'Program started'"));

	ТекстИнформации = 
		СтрШаблон(
			"Current language: %1
			|System language: %2
			|Locale code: %3",
			ТекущийЯзык(), ТекущийЯзыкСистемы(), ТекущийКодЛокализации());
	РаботаСПротоколомСобытийВызовСервера.ДобавитьИнформацию(ТекстИнформации);

	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("ЭтоЧистаяБаза", Ложь);

	Если ЗначениеЗаполнено(Константы.ДатаПоследнегоОбновления.Получить()) Тогда

		ПараметрыСеанса.ЭтоЧистаяБаза = Ложь;

		Возврат ВозвращаемоеЗначение;

	КонецЕсли;

	УстановитьКодУстройства();
	ЦентральныйУзелОбмена = ОбменВызовСервераПовтИсп.ПолучитьЦентральныйУзелОбмена();

	Диагональ = 10;

	// Вычисление параметров данного устройства

	#Если МобильноеПриложениеСервер Тогда

		Диагональ = ЭкранКлиентСервер.ПараметрыЭкрана()[0].Диагональ;

		Константы.ДиагональЭкрана.Установить(Диагональ);

		РаботаСПротоколомСобытийВызовСервера.ДобавитьИнформацию(СтрШаблон(
			НСтр("ru = 'Диагональ экрана определена как %1 дюймов(а)';
				|en = 'The diagonal of the screen is determined as %1 inches'"),
			Формат(Диагональ, "ЧЦ=10; ЧДЦ=1")));

	#КонецЕсли

	СистемнаяИнформация = Новый СистемнаяИнформация;
	ВерсияОС = СистемнаяИнформация.ВерсияОС;
	ИмяОС     = "Android";

	Если СтрНайти(НРег(ВерсияОС), "ios") > 0 Тогда
		ИмяОС = "iOS";

	ИначеЕсли СтрНайти(НРег(ВерсияОС), "android") > 0 Тогда
		ИмяОС = "Android";

	ИначеЕсли СтрНайти(НРег(ВерсияОС), "windows") > 0 Тогда
		ИмяОС = "Windows";

	КонецЕсли;

	Константы.ИмяОперационнойСистемы.Установить(ИмяОС);
	
	УстановитьЗначениеКонстантыПоУмолчанию("СрокУстареванияДанных", 7);
	УстановитьЗначениеКонстантыПоУмолчанию("АдресЦентральнойБазы", "https://");
	УстановитьЗначениеКонстантыПоУмолчанию("ПользовательЦентральнойБазы", "");
	УстановитьЗначениеКонстантыПоУмолчанию("ПарольПользователя", "");

	Константы.ВерсияПротоколаМобильногоКлиента.Установить(Метаданные.Версия);
	Константы.ИспользоватьФоновуюСинхронизацию.Установить(Истина);
	Константы.ВыгружатьПротоколСобытийНаСервер.Установить(Истина);
	Константы.ИдентификаторПоследнегоЗагруженногоСообщения.Установить(УникальныйИдентификаторПустой());
	Константы.СессияСинхронизации.Установить(0);
	Константы.НомерПоследнейЗагруженнойЧастиСообщения.Установить(0);
	Константы.ПоддерживаемыеВерсииФорматаОбмена.Установить("101");
	Константы.ИспользуемаяВерсияФорматаОбмена.Установить("");

	ПараметрыСеанса.ЭтоЧистаяБаза = Истина;
	ВозвращаемоеЗначение.ЭтоЧистаяБаза = Истина;

	Возврат ВозвращаемоеЗначение;

КонецФункции

Функция ИнициированаОчисткаБазы() Экспорт

	Возврат Константы.ИнициированаОчисткаБазы.Получить();

КонецФункции

// Возвращает признак того что база готова для начала работы.
// 
// Возвращаемое значение:
//  Булево - Признак того, что в базе нет данных.
//
Функция ЭтоЧистаяБаза() Экспорт

	Возврат ПараметрыСеанса.ЭтоЧистаяБаза;

КонецФункции

// Удаляет все исходящие сообщения на сервере.
//
Процедура ОчиститьОчередьСообщенийДляСервера() Экспорт

	РегистрыСведений.ОчередьСообщенийНаСервер.ОчиститьОчередьСообщенияДляСервера();

КонецПроцедуры

// Очищает очередь отправленных и полученных сообщений.
//
Процедура ОчиститьОчередьСообщенияИПолученныеДанныеНаСервере() Экспорт

	РегистрыСведений.ОчередьСообщенийНаСервер.ОчиститьОчередьСообщенияДляСервера();
	РегистрыСведений.ПолученныеДанныеОбмена.ОчиститьРегистр();

КонецПроцедуры

// Устанавливает указанное значение у указанной константы.
//
// Параметры:
//  ИмяКонстанты      - Строка - Имя константы;
//  ЗначениеКонстанты - Произвольный - Устанавливаемое значение константы..
//
Процедура УстановитьЗначениеКонстанты(ИмяКонстанты, ЗначениеКонстанты) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Константы[ИмяКонстанты].Установить(ЗначениеКонстанты);

КонецПроцедуры

// Возвращает значение указанной константы.
//
// Параметры:
//  ИмяКонстанты - Строка - Имя константы.
// 
// Возвращаемое значение:
//  Произвольный - Значение константы.
//
Функция ПолучитьЗначениеКонстанты(ИмяКонстанты) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	Возврат Константы[ИмяКонстанты].Получить();

КонецФункции

// Получает значение реквизита у ссылки на объект.
//
// Параметры:
//  Ссылка		 - Ссылка - Ссылка на объект;
//  ИмяРеквизита - Строка - Имя получаемого реквизита.
// 
// Возвращаемое значение:
//  Произвольный - Значение реквизита объекта.
//
Функция ЗначениеРеквизита(Ссылка, ИмяРеквизита) Экспорт

	Возврат Ссылка[ИмяРеквизита];

КонецФункции

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
// 
//  Если доступа к одному из реквизитов нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Функция не предназначена для получения значений реквизитов пустых ссылок.
//
// Параметры:
//  Ссылка    - ЛюбаяСсылка - объект, значения реквизитов которого необходимо получить.
//
//  Реквизиты - Строка - имена реквизитов, перечисленные через запятую, в формате
//              требований к свойствам структуры.
//              Например, "Код, Наименование, Родитель".
//            - Структура, ФиксированнаяСтруктура - в качестве ключа передается
//              псевдоним поля для возвращаемой структуры с результатом, а в качестве
//              значения (опционально) фактическое имя поля в таблице.
//              Если значение не определено, то имя поля берется из ключа.
//            - Массив, ФиксированныйМассив - имена реквизитов в формате требований
//              к свойствам структуры.
//
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения затребованных реквизитов.
//              Если строка затребованных реквизитов пуста, то возвращается пустая структура.
//              Если в качестве объекта передана пустая ссылка, то все реквизиты вернутся со значением Неопределено.
//
Функция ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты) Экспорт

	Если ТипЗнч(Реквизиты) = Тип("Строка") Тогда

		Если ПустаяСтрока(Реквизиты) Тогда
			Возврат Новый Структура;
		КонецЕсли;

		Реквизиты = СтрРазделить(Реквизиты, ",");

	КонецЕсли;

	СтруктураРеквизитов = Новый Структура;
	Если ТипЗнч(Реквизиты) = Тип("Структура") 
		Или ТипЗнч(Реквизиты) = Тип("ФиксированнаяСтруктура") Тогда

		СтруктураРеквизитов = Реквизиты;

	ИначеЕсли ТипЗнч(Реквизиты) = Тип("Массив") 
		Или ТипЗнч(Реквизиты) = Тип("ФиксированныйМассив") Тогда

		Для Каждого Реквизит Из Реквизиты Цикл
			СтруктураРеквизитов.Вставить(СтрЗаменить(Реквизит, ".", ""), Реквизит);
		КонецЦикла;

	Иначе
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неверный тип второго параметра Реквизиты: %1'; en = 'Wrong parameter type: %1'"),
			Строка(ТипЗнч(Реквизиты)));

	КонецЕсли;

	ТекстПолей = "";
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл

		ИмяПоля   = ?(ЗначениеЗаполнено(КлючИЗначение.Значение),
					СокрЛП(КлючИЗначение.Значение), СокрЛП(КлючИЗначение.Ключ));

		Псевдоним  = СокрЛП(КлючИЗначение.Ключ);
		ТекстПолей = ТекстПолей + ?(ПустаяСтрока(ТекстПолей), "", ",") + "
		|	" + ИмяПоля + " КАК " + Псевдоним;

	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|" + ТекстПолей + "
	|ИЗ
	|	" + Ссылка.Метаданные().ПолноеИмя() + " КАК ПсевдонимЗаданнойТаблицы
	|ГДЕ
	|	ПсевдонимЗаданнойТаблицы.Ссылка = &Ссылка
	|";

	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

	Результат = Новый Структура;
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		Результат.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;

	ЗаполнитьЗначенияСвойств(Результат, Выборка);

	Возврат Результат;

КонецФункции

// Получает имя значения перечисления как объекта метаданных.
//
// Параметры:
//  Значение - ЗначениеПеречисления - для которого необходимо получить имя перечисления.
//
// Возвращаемое значение:
//  Строка - имя значения перечисления как объекта метаданных.
//
Функция ИмяЗначенияПеречисления(Значение) Экспорт

	ОбъектМетаданных = Значение.Метаданные();
	ИндексЗначения   = Перечисления[ОбъектМетаданных.Имя].Индекс(Значение);

	Возврат ОбъектМетаданных.ЗначенияПеречисления[ИндексЗначения].Имя;

КонецФункции 


// Удаляет из строки символы, недопустимые к использованию в XML.
//
// Параметры:
//  Текст - Строка - Анализируемый текст.
// 
// Возвращаемое значение:
//  Строка - Текст, из которого удалены недопустимые для XML символы.
//
Функция УдалитьНедопустимыеСимволыXML(Знач Текст) Экспорт

	#Если Не ВебКлиент Тогда

		ПозицияНачала = 1;

		Пока Истина Цикл

			Если ПозицияНачала > СтрДлина(Текст) Тогда
				Прервать;
			КонецЕсли;

			Позиция = НайтиНедопустимыеСимволыXML(Текст, ПозицияНачала);

			Если Позиция = 0 Тогда
				Прервать;
			КонецЕсли;

			// Если возвращаемая позиция, больше чем должна быть, то корректируем ее.
			Если Позиция > 1 Тогда
				НедопустимыйСимвол = Сред(Текст, Позиция - 1, 1);
				Если НайтиНедопустимыеСимволыXML(НедопустимыйСимвол) > 0 Тогда
					Текст = СтрЗаменить(Текст, НедопустимыйСимвол, "");
				КонецЕсли;
			КонецЕсли;

			НедопустимыйСимвол = Сред(Текст, Позиция, 1);
			Если НайтиНедопустимыеСимволыXML(НедопустимыйСимвол) > 0 Тогда
				Текст = СтрЗаменить(Текст, НедопустимыйСимвол, "");
			КонецЕсли;

			ПозицияНачала = Макс(1, Позиция - 1);

		КонецЦикла;

	#КонецЕсли

	Возврат Текст;

КонецФункции

// Получает список моментов времени ошибок, у которых установлен флаг
//  "НеобходимоОтобразитьПослеСинхронизации".
//
// Параметры:
//  ЕстьКритическиеОшибки - Булево - Признак наличия критических ошибок.
// 
// Возвращаемое значение:
//  Массив - Массив не показанных ошибок.
//
Функция ПолучитьОтметкиВремениНепоказанныеОшибок(ЕстьКритическиеОшибки) Экспорт

	МоментыВремениСобытий = Новый Массив;
	СтруктураОтбора       = Новый Структура;

	СтруктураОтбора.Вставить("НеобходимоОтобразитьПослеСинхронизации", Истина);

	Выборка = РегистрыСведений.ПротоколСобытий.Выбрать(,,СтруктураОтбора);
	Пока Выборка.Следующий() Цикл

		МоментыВремениСобытий.Добавить(Выборка.МоментВремени);
		Если Выборка.ТипСобытия = Перечисления.ТипыСобытийПротокола.Ошибка Тогда
			ЕстьКритическиеОшибки = Истина;
		КонецЕсли;

	КонецЦикла;

	Возврат МоментыВремениСобытий;

КонецФункции

// Получает признаки необходимости данных для отправки.
//
// Параметры:
//  ДатаПоследнегоОбновления - Дата - Дата последнего удачного подключения к серверу;
//  ЕстьДанныеДляОтправки	 - Булево - Признак наличия данных для отправки.
//
Процедура ПолучитьДатуПоследнегоОбновленияИНаличиеДанныхДляОтправки(ДатаПоследнегоОбновления, ЕстьДанныеДляОтправки) Экспорт

	ДатаПоследнегоОбновления = Константы.ДатаПоследнегоОбновления.Получить();
	ЕстьДанныеДляОтправки    = Константы.ЕстьНеотправленныеДанные.Получить();

КонецПроцедуры

// Формирует табличный документ 1С из файла на диске устройства.
//
// Параметры:
//  ИмяФайла - Строка - Имя открываемого файла в формате MXL.
// 
// Возвращаемое значение:
//  ТабличныйДокумент - Прочитанный табличный документ.
//
Функция ПолучитьТабличныйДокументИзФайлаНаСервере(ИмяФайла) Экспорт

	ТабличныйДокумент = Новый ТабличныйДокумент();
	ТабличныйДокумент.Прочитать(ИмяФайла);
	ТабличныйДокумент.ТолькоПросмотр = Истина;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОтображатьСетку = Ложь;
	ТабличныйДокумент.ОтображатьЗаголовки = Ложь;

	Возврат ТабличныйДокумент;

КонецФункции

// Копирует полученный файл данных обмена для последующего анализа и отладки.
//
// Параметры:
//  ИмяФайлаСообщенияОбмена	 - Строка - Имя копируемого исходного файла;
//  Направление				 - Строка - Параметр указывающий входящий это файл, или исходящий.
//
Процедура СкопироватьФайлДанных(ИмяФайлаСообщенияОбмена, Направление) Экспорт

	#Если НЕ МобильноеПриложениеСервер И НЕ МобильныйКлиент И НЕ ВебКлиент Тогда

	Каталог = "C:\1C_SOURCE\" + Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd")+"\";

	Файл = Новый Файл(Каталог);
	Если Не Файл.Существует() Тогда
		СоздатьКаталог(Каталог);
	КонецЕсли;

	ИмяФайлаНазначения = Каталог + Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd-HH-mm-ss") 
		+ Направление +"client-"+ ТекущаяУниверсальнаяДатаВМиллисекундах()+ ".xml";

	Попытка
		КопироватьФайл(ИмяФайлаСообщенияОбмена, ИмяФайлаНазначения);
	Исключение

		Инфо = ИнформацияОбОшибке();

		РаботаСПротоколомСобытийВызовСервера.ДобавитьОшибку(
			СтрШаблон(
				НСтр("ru = 'Не удалось скопировать файл данных (%1)
					|по причине: %2';
					|en = 'Can''t copy data file (%1)
					|by reason: %2'"), 
				ИмяФайлаСообщенияОбмена, ПодробноеПредставлениеОшибки(Инфо)));

	КонецПопытки;

	#КонецЕсли

КонецПроцедуры

// Формирует список разделов в окне настроек.
//
// Параметры:
//  СписокРазделов - ТаблицаЗначений - Таблица разделов в форме настроек.
//
Процедура ЗаполнитьСписокРазделовНастроек(СписокРазделов) Экспорт

	СписокРазделов.Очистить();
	СтрокаРаздел = СписокРазделов.Добавить();
	СтрокаРаздел.Раздел   = "Подключение";
	СтрокаРаздел.Описание = НСтр("ru = 'Подключение и настройка'; en = 'Connection'");

	СтрокаРаздел = СписокРазделов.Добавить();
	СтрокаРаздел.Раздел   = "Сервис";
	СтрокаРаздел.Описание = НСтр("ru = 'Сервис'; en = 'Service'");

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Устанавливает указанное значение если текущее значение константы пустое или не заполненное.
//
// Параметры:
//  ИмяКонстанты		 - Строка - Имя устанавливаемой константы;
//  ЗначениеПоУмолчанию	 - Произвольный - Устанавливаемое значение.
//
Процедура УстановитьЗначениеКонстантыПоУмолчанию(ИмяКонстанты, ЗначениеПоУмолчанию)

	ТекущееЗначение = Константы[ИмяКонстанты].Получить();

	Если Не ЗначениеЗаполнено(ТекущееЗначение) Тогда
		Константы[ИмяКонстанты].Установить(ЗначениеПоУмолчанию);
	КонецЕсли;

КонецПроцедуры

// Устанавливает уникальный код устройства для однозначной идентификации устройства в центральной базе.
//
Процедура УстановитьКодУстройства()

	Код = Константы.КодУстройства.Получить();

	Если Код = Неопределено Или ПустаяСтрока(Код) Тогда

		Код = Строка(Новый УникальныйИдентификатор());

		Константы.КодУстройства.Установить(Код);

	КонецЕсли;

КонецПроцедуры

// Удаляет из указанного имени файла запрещенные символы.
//
// Параметры:
//  ИмяФайла - Строка - Имя файла проверяемое на наличие запрещенных символов.
//
Процедура УдалитьЗапрещенныеСимволы(ИмяФайла)

	ИмяФайла = СтрЗаменить(ИмяФайла, """", "_");
	ИмяФайла = СтрЗаменить(ИмяФайла, "/", "_");
	ИмяФайла = СтрЗаменить(ИмяФайла, "\", "_");
	ИмяФайла = СтрЗаменить(ИмяФайла, "[", "_");
	ИмяФайла = СтрЗаменить(ИмяФайла, "]", "_");
	ИмяФайла = СтрЗаменить(ИмяФайла, ":", "_");
	ИмяФайла = СтрЗаменить(ИмяФайла, ";", "_");
	ИмяФайла = СтрЗаменить(ИмяФайла, "=", "_");
	ИмяФайла = СтрЗаменить(ИмяФайла, "?", "_");
	ИмяФайла = СтрЗаменить(ИмяФайла, "*", "_");
	ИмяФайла = СтрЗаменить(ИмяФайла, "<", "_");
	ИмяФайла = СтрЗаменить(ИмяФайла, ">", "_");

КонецПроцедуры

// Проверяет, является ли текущий или указанный пользователь полноправным.
// 
Функция ЭтоПолноправныйПользователь(Пользователь = Неопределено,
                                    ПроверятьПраваАдминистрированияСистемы = Ложь,
                                    УчитыватьПривилегированныйРежим = Истина) Экспорт

	Возврат Пользователи.ЭтоПолноправныйПользователь(Пользователь,
                                    ПроверятьПраваАдминистрированияСистемы,
                                    УчитыватьПривилегированныйРежим);	
									
КонецФункции 

#КонецОбласти

#Область ДанныеВБазе

////////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции для работы с данными в базе.

// (См. ОбщегоНазначения.ЕстьСсылкиНаОбъект)
Функция ЕстьСсылкиНаОбъект(Знач СсылкаИлиМассивСсылок, Знач ИскатьСредиСлужебныхОбъектов = Ложь) Экспорт
	
	Возврат ОбщегоНазначения.ЕстьСсылкиНаОбъект(СсылкаИлиМассивСсылок, ИскатьСредиСлужебныхОбъектов);
	
КонецФункции

// (См. ОбщегоНазначения.ПроверитьПроведенностьДокументов)
Функция ПроверитьПроведенностьДокументов(Знач Документы) Экспорт
	
	Возврат ОбщегоНазначения.ПроверитьПроведенностьДокументов(Документы);
	
КонецФункции

// (См. ОбщегоНазначения.ПровестиДокументы)
Функция ПровестиДокументы(Документы) Экспорт
	
	Возврат ОбщегоНазначения.ПровестиДокументы(Документы);
	
КонецФункции 

#КонецОбласти

#Область ХранилищеНастроек

////////////////////////////////////////////////////////////////////////////////
// Сохранение, чтение и удаление настроек из хранилищ.

// (См. ОбщегоНазначения.ХранилищеОбщихНастроекСохранить)
Процедура ХранилищеОбщихНастроекСохранить(КлючОбъекта, КлючНастроек, Настройки,
			ОписаниеНастроек = Неопределено,
			ИмяПользователя = Неопределено,
			ОбновитьПовторноИспользуемыеЗначения = Ложь) Экспорт
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		КлючОбъекта,
		КлючНастроек,
		Настройки,
		ОписаниеНастроек,
		ИмяПользователя);
		
КонецПроцедуры

// (См. ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить)
Функция ХранилищеОбщихНастроекЗагрузить(КлючОбъекта, КлючНастроек, ЗначениеПоУмолчанию = Неопределено,
			ОписаниеНастроек = Неопределено,
			ИмяПользователя = Неопределено) Экспорт
	
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		КлючОбъекта,
		КлючНастроек,
		ЗначениеПоУмолчанию,
		ОписаниеНастроек,
		ИмяПользователя);
		
КонецФункции

// (См. ОбщегоНазначения.ХранилищеОбщихНастроекУдалить)
Процедура ХранилищеОбщихНастроекУдалить(КлючОбъекта, КлючНастроек, ИмяПользователя) Экспорт
	
	ОбщегоНазначения.ХранилищеОбщихНастроекУдалить(КлючОбъекта, КлючНастроек, ИмяПользователя);
	
КонецПроцедуры

// (См. ОбщегоНазначения.ХранилищеОбщихНастроекСохранитьМассив)
Процедура ХранилищеОбщихНастроекСохранитьМассив(МассивСтруктур, ОбновитьПовторноИспользуемыеЗначения = Ложь) Экспорт
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранитьМассив(МассивСтруктур, ОбновитьПовторноИспользуемыеЗначения);
	
КонецПроцедуры

// (См. ОбщегоНазначения.ХранилищеСистемныхНастроекСохранить)
Процедура ХранилищеСистемныхНастроекСохранить(КлючОбъекта, КлючНастроек, Настройки,
			ОписаниеНастроек = Неопределено,
			ИмяПользователя = Неопределено,
			ОбновитьПовторноИспользуемыеЗначения = Ложь) Экспорт
	
	ОбщегоНазначения.ХранилищеСистемныхНастроекСохранить(
		КлючОбъекта,
		КлючНастроек,
		Настройки,
		ОписаниеНастроек,
		ИмяПользователя,
		ОбновитьПовторноИспользуемыеЗначения);
	
КонецПроцедуры

// (См. ОбщегоНазначения.ХранилищеСистемныхНастроекЗагрузить)
Функция ХранилищеСистемныхНастроекЗагрузить(КлючОбъекта, КлючНастроек, ЗначениеПоУмолчанию = Неопределено, 
			ОписаниеНастроек = Неопределено,
			ИмяПользователя = Неопределено) Экспорт
	
	Возврат ОбщегоНазначения.ХранилищеСистемныхНастроекЗагрузить(
		КлючОбъекта,
		КлючНастроек,
		ЗначениеПоУмолчанию,
		ОписаниеНастроек,
		ИмяПользователя);
	
КонецФункции

// (См. ОбщегоНазначения.ХранилищеСистемныхНастроекУдалить)
Процедура ХранилищеСистемныхНастроекУдалить(КлючОбъекта, КлючНастроек, ИмяПользователя) Экспорт
	
	ОбщегоНазначения.ХранилищеСистемныхНастроекУдалить(КлючОбъекта, КлючНастроек, ИмяПользователя);
	
КонецПроцедуры

// (См. ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить)
Процедура ХранилищеНастроекДанныхФормСохранить(КлючОбъекта, КлючНастроек, Настройки,
			ОписаниеНастроек = Неопределено,
			ИмяПользователя = Неопределено,
			ОбновитьПовторноИспользуемыеЗначения = Ложь) Экспорт
	
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(
		КлючОбъекта,
		КлючНастроек,
		Настройки,
		ОписаниеНастроек,
		ИмяПользователя,
		ОбновитьПовторноИспользуемыеЗначения);
	
КонецПроцедуры

// (См. ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить)
Функция ХранилищеНастроекДанныхФормЗагрузить(КлючОбъекта, КлючНастроек, ЗначениеПоУмолчанию = Неопределено,
			ОписаниеНастроек = Неопределено,
			ИмяПользователя = Неопределено) Экспорт
	
	Возврат ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(
		КлючОбъекта,
		КлючНастроек,
		ЗначениеПоУмолчанию,
		ОписаниеНастроек,
		ИмяПользователя);
	
КонецФункции

// (См. ОбщегоНазначения.ХранилищеНастроекДанныхФормУдалить)
Процедура ХранилищеНастроекДанныхФормУдалить(КлючОбъекта, КлючНастроек, ИмяПользователя) Экспорт
	
	ОбщегоНазначения.ХранилищеНастроекДанныхФормУдалить(КлючОбъекта, КлючНастроек, ИмяПользователя);
	
КонецПроцедуры

#КонецОбласти

#Область УстаревшиеПроцедурыИФункции

// Устарела. Следует использовать РаботаВМоделиСервиса.УстановитьРазделениеСеанса.
Процедура УстановитьРазделениеСеанса(Знач Использование, Знач ОбластьДанных = Неопределено) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
		МодульРаботаВМоделиСервиса.УстановитьРазделениеСеанса(Использование, ОбластьДанных);
	КонецЕсли;
	
КонецПроцедуры

// Устарела. Следует использовать функцию ХранилищеОбщихНастроекСохранить.
Процедура ХранилищеОбщихНастроекСохранитьМассивИОбновитьПовторноИспользуемыеЗначения(МассивСтруктур) Экспорт
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранитьМассив(МассивСтруктур, Истина);
	
КонецПроцедуры

// Устарела. Следует использовать функцию ХранилищеОбщихНастроекСохранить.
Процедура ХранилищеОбщихНастроекСохранитьИОбновитьПовторноИспользуемыеЗначения(КлючОбъекта,
			КлючНастроек, Настройки) Экспорт
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючОбъекта, КлючНастроек, Настройки,,, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область Стили

////////////////////////////////////////////////////////////////////////////////
// Функции для работы с цветами стиля в клиентском коде.

// (См. ОбщегоНазначенияКлиент.ЦветСтиля)
Функция ЦветСтиля(ИмяЦветаСтиля) Экспорт
	
	Возврат ЦветаСтиля[ИмяЦветаСтиля];
	
КонецФункции

// (См. ОбщегоНазначенияКлиент.ШрифтСтиля)
Функция ШрифтСтиля(ИмяШрифтаСтиля) Экспорт
	
	Возврат ШрифтыСтиля[ИмяШрифтаСтиля];
	
КонецФункции

#КонецОбласти
