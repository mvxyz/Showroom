
#Область ПрограммныйИнтерфейс

// Выполняет предварительный анализ данных полученного сообщения обмена.
//
// Параметры:
//  Сообщение - Структура - Описание сообщения обмена;
//   * ИмяФайла               - Строка - Имя файла сообщения;
//   * ИдентификаторСообщения - УУИД - Уникальный идентификатор сообщения в регистре;
//  СведенияОЗагруженныхДанных - Структура - Описание загруженных данных.
// 
// Возвращаемое значение:
//  Число - Число объектов в файле.
//
Функция ПросмотретьСообщение(Сообщение, СведенияОЗагруженныхДанных) Экспорт

	ДатаПоследнейСинхронизации = Константы.ДатаПоследнегоОбновления.Получить();
	ИмяФайлаСообщенияОбмена = Сообщение.ИмяФайла;

	ЦентральныйУзелОбмена = ОбменВызовСервераПовтИсп.ПолучитьЦентральныйУзелОбмена();
	ОбъектЧтенияXML = Новый ЧтениеXML;
	ОбъектЧтенияXML.ОткрытьФайл(ИмяФайлаСообщенияОбмена);
	
	ОбъектЧтенияXML.Прочитать(); // Тег Message
	Если ОбъектЧтенияXML.ТипУзла = ТипУзлаXML.НачалоЭлемента 
		И ОбъектЧтенияXML.Имя = "Message" Тогда
		Сессии = ОбъектЧтенияXML.ПолучитьАтрибут("ManySessions");
		Если Сессии <> Неопределено Тогда
			ОбщегоНазначенияВызовСервера.УстановитьЗначениеКонстанты("МногоСессий", Сессии = "1");
		Иначе
			ОбщегоНазначенияВызовСервера.УстановитьЗначениеКонстанты("МногоСессий", Ложь);
		КонецЕсли;
	КонецЕсли;

	Пока ОбъектЧтенияXML.Прочитать() Цикл

		Если Не ОбъектЧтенияXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Продолжить;
		КонецЕсли;

		// Проверяем версию - она есть только у узлов объектов
		Версия = ОбъектЧтенияXML.ПолучитьАтрибут("Version");
		Если Версия = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ИмяТипа = ОбъектЧтенияXML.Имя;

		СтруктураДанныхОбъекта = ПолучитьЗначенияРеквизитовОбъекта(ОбъектЧтенияXML, ИмяТипа);

		ОбменВызовСервера.УвеличитьСчетчикиПоТипамОбъектов(СведенияОЗагруженныхДанных, ИмяТипа);

		УИДЗначение = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "ID", "Строка", Ложь);

		Если Не СтрСравнить(ИмяТипа, "ObjectDeletion") = 0 
			И Не УИДЗначение = Неопределено
			И Не СведенияОЗагруженныхДанных.УдаляемыеДанные[УИДЗначение] = Неопределено Тогда
			СведенияОЗагруженныхДанных.УдаляемыеДанные.Удалить(УИДЗначение);
		КонецЕсли;

		Ссылка   = Неопределено;
		Значение = Неопределено;

		Если СтрСравнить(ИмяТипа, "ObjectDeletion") = 0 Тогда

			СведенияОЗагруженныхДанных.УдаляемыеДанные.Вставить(УИДЗначение, 
				ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу(
					ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Type", "Строка", Истина), 
					УИДЗначение));

		///////////////////////////////////////////////////////////////////////////////////////
		ИначеЕсли СтрСравнить(ИмяТипа, "Nomenclature") = 0 Тогда

			Ссылка = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу(ИмяТипа, УИДЗначение);
			
		ИначеЕсли СтрСравнить(ИмяТипа, "ViewNomenclature") = 0 И НЕ УИДЗначение = "NotFilled" Тогда
			
			Ссылка = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу(ИмяТипа, УИДЗначение);
			
		ИначеЕсли СтрСравнить(ИмяТипа, "TypeNomenclature") = 0 И НЕ УИДЗначение = "NotFilled" Тогда
			
			Ссылка = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу(ИмяТипа, УИДЗначение);
			
		ИначеЕсли СтрСравнить(ИмяТипа, "unit") = 0 Тогда
			
			Ссылка = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу(ИмяТипа, УИДЗначение);
			
		ИначеЕсли СтрСравнить(ИмяТипа, "Counterparty") = 0 Тогда
			
			Ссылка = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу(ИмяТипа, УИДЗначение);
			
		ИначеЕсли СтрСравнить(ИмяТипа, "UrFizLico") = 0 Тогда
			
			Ссылка = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу(ИмяТипа, УИДЗначение);
			
		ИначеЕсли СтрСравнить(ИмяТипа, "Characteristic") = 0 И НЕ УИДЗначение = "NotFilled" Тогда
			
			Ссылка = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу(ИмяТипа, УИДЗначение);
			
		ИначеЕсли СтрСравнить(ИмяТипа, "PriceType") = 0 И НЕ УИДЗначение = "NotFilled" Тогда
			
			Ссылка = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу(ИмяТипа, УИДЗначение);
	
		ИначеЕсли СтрСравнить(ИмяТипа, "Currency") = 0 И НЕ УИДЗначение = "NotFilled" Тогда
			
			Ссылка = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу(ИмяТипа, УИДЗначение);

		ИначеЕсли СтрСравнить(ИмяТипа, "Stock") = 0 Тогда
			
			Ссылка = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу(ИмяТипа, УИДЗначение);
			
		ИначеЕсли СтрСравнить(ИмяТипа, "Series") = 0 Тогда
			
			Ссылка = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу(ИмяТипа, УИДЗначение);
			
		ИначеЕсли СтрСравнить(ИмяТипа, "User") = 0 Тогда
			
			Ссылка = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу(ИмяТипа, УИДЗначение);
			
	    ИначеЕсли СтрСравнить(ИмяТипа, "Quality") = 0 Тогда
			
			Ссылка = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу(ИмяТипа, УИДЗначение);
			
		ИначеЕсли СтрСравнить(ИмяТипа, "Contract") = 0 Тогда
			
			Ссылка = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу(ИмяТипа, УИДЗначение);

		ИначеЕсли СтрСравнить(ИмяТипа, "Picture") = 0 Тогда
			
			Ссылка = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу(ИмяТипа, УИДЗначение);
	
		ИначеЕсли СтрСравнить(ИмяТипа, "Organization") = 0 Тогда
			
			Ссылка = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу(ИмяТипа, УИДЗначение);

		ИначеЕсли СтрСравнить(ИмяТипа, "Order") = 0 Тогда
			
			Ссылка = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу(ИмяТипа, УИДЗначение);
	
		/////////////////////////////////////////////////////	
		ИначеЕсли СтрСравнить(ИмяТипа, "LogRecord") = 0 Тогда

			ТипЗаписи = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "RecordType", "Строка");
			Если ТипЗаписи = "Error" Тогда
				СведенияОЗагруженныхДанных.ЕстьОшибки = Истина;
			КонецЕсли;

		КонецЕсли;

		ОбновитьСчетчикиКоллекций(Ссылка, Значение, ИмяТипа, СведенияОЗагруженныхДанных);

	КонецЦикла;

	// Закрываем файл
	ОбъектЧтенияXML.Закрыть();

	// Удаление файла с сообщением, он больше не нужен.
	УдалитьФайлы(ИмяФайлаСообщенияОбмена);

	Возврат СведенияОЗагруженныхДанных.ПоказателиОбмена.СчетчикиОбъектов.Количество() > 0;

КонецФункции

// Выполняет запись данных полученного сообщения обмена.
//
// Параметры:
//  Сообщение - Структура - Описание сообщения обмена;
//    * ИмяФайла               - Строка - Имя файла сообщения;
//    * ИдентификаторСообщения - УУИД - Уникальный идентификатор сообщения в регистре;
//  СведенияОЗагруженныхДанных - Структура - Описание загруженных данных.
//
Процедура ОбработатьСообщение(Сообщение, СведенияОЗагруженныхДанных) Экспорт

	Попытка

		ЦентральныйУзелОбмена = ОбменВызовСервераПовтИсп.ПолучитьЦентральныйУзелОбмена();

		ИмяФайла = Сообщение.ИмяФайла;
		ОбъектЧтенияXML = Новый ЧтениеXML;
		ОбъектЧтенияXML.ОткрытьФайл(ИмяФайла);
		ОбъектЧтенияXML.Прочитать(); //Пропуск тега Message

		Пока ОбъектЧтенияXML.Прочитать() Цикл

			Если Не ОбъектЧтенияXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Продолжить;
			КонецЕсли;

			// Проверяем версию - она есть только у узлов объектов.
			Версия = ОбъектЧтенияXML.ПолучитьАтрибут("Version");
			Если Версия = Неопределено Тогда
				Продолжить; // Объект с неизвестной версией пропускаем.
			КонецЕсли;

			ИмяТипа = СтрЗаменить(ОбъектЧтенияXML.Имя, "ProcessTarget", "ActionTarget");

			СведенияОЗагруженныхДанных.ПоказателиОбмена.КоличествоОбработанныхОбъектов = 
				СведенияОЗагруженныхДанных.ПоказателиОбмена.КоличествоОбработанныхОбъектов + 1;

			СсылкаНаЗагруженныйОбъект = Неопределено;

			Попытка

				СтруктураДанныхОбъекта = ПолучитьЗначенияРеквизитовОбъекта(ОбъектЧтенияXML, ИмяТипа);
				СтруктураДанныхОбъекта.Вставить(ВРег("Версия"), Версия);
				СтруктураДанныхОбъекта.Вставить(ВРег("ИмяТипа"), ИмяТипа);

				ВыполнитьОбработкуXML(
					СтруктураДанныхОбъекта, СсылкаНаЗагруженныйОбъект, СведенияОЗагруженныхДанных);

			Исключение

				Инфо = ИнформацияОбОшибке();

				Если СтрСравнить(ИмяТипа, "LogRecord") = 0 Тогда

					ОбщееОписаниеОшибки = 
						НСтр("ru = 'Сервер сообщил об ошибке обработки данных.'
							|; en = 'An error occured on server while procesing data'");

					ТекстОшибки = 
						РаботаСоСтрокамиКлиентСервер.СформироватьПредставлениеОшибки(
							ОбщееОписаниеОшибки, ПодробноеПредставлениеОшибки(Инфо));

					// От сервера поступило сообщение об ошибке - необходимо корректно завершить 
					// обработку сообщения.

					ОбъектЧтенияXML.Закрыть();

					УдалитьФайлы(Сообщение.ИмяФайла);

					РегистрыСведений.ПолученныеДанныеОбмена.УдалитьСообщение(Сообщение.ИдентификаторСообщения);

				Иначе
					
					ОбщееОписаниеОшибки = 
						НСтр("ru = 'Произошла ошибка при обработке сообщения от сервера.'
							|; en = 'An error occured while procesing server messages'");

					ТекстОшибки = 
						РаботаСоСтрокамиКлиентСервер.СформироватьПредставлениеОшибки(
							ОбщееОписаниеОшибки, ПодробноеПредставлениеОшибки(Инфо));

				КонецЕсли;

				ВызватьИсключение ТекстОшибки;

			КонецПопытки;

			// Для загруженных объектов удаляется регистрация изменений, чтобы они не передавались 
			// обратно на сервер.
			Если Не СсылкаНаЗагруженныйОбъект = Неопределено 
				Или ТипЗнч(СсылкаНаЗагруженныйОбъект) = Тип("УдалениеОбъекта") Тогда

				Попытка 
					МетаданныеОбъекта = СсылкаНаЗагруженныйОбъект.Метаданные();
				Исключение
					МетаданныеОбъекта = Неопределено;
				КонецПопытки;

				Если Не Метаданные = Неопределено 
					И Не Метаданные.ПланыОбмена.ОбменССервером.Состав.Найти(МетаданныеОбъекта) = Неопределено Тогда

					ПланыОбмена.УдалитьРегистрациюИзменений(ЦентральныйУзелОбмена, СсылкаНаЗагруженныйОбъект);

				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

		ОбъектЧтенияXML.Закрыть();

		// Удаление файла с сообщением, он больше не нужен
		УдалитьФайлы(Сообщение.ИмяФайла);

	Исключение

		Инфо = ИнформацияОбОшибке();
		МоментВремени = РегистрыСведений.ПротоколСобытий.ДобавитьОшибку(Инфо.Описание);
		РегистрыСведений.ПротоколСобытий.УстановитьНеобходимостьОтображенияПослеСинхронизации(
			МоментВремени, Истина);

		ОбъектЧтенияXML.Закрыть();

		УдалитьФайлы(Сообщение.ИмяФайла);

		ВызватьИсключение;

	КонецПопытки;

КонецПроцедуры 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Формирует сообщение о неизвестной версии объекта в файла обмена.
//
// Параметры:
//  СтруктураДанныхОбъекта - Соответствие - Загруженный список значений реквизитов объекта;
//  - Версия  - Строка - Версия объекта;
//  - ИмяТипа - Строка - Тип объекта;
//  ... - Строка - Реквизиты объекта.
//
Процедура СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта)

	ШаблонСообщения = НСтр("ru = 'Неизвестная версия ""%1"" для объекта ""%2""';
						  |en = 'Unknown version ""%1"" for object ""%2""'");

	ТекстСообщения = СтрШаблон(
		ШаблонСообщения, 
		СтруктураДанныхОбъекта["Версия"], СтруктураДанныхОбъекта["ИмяТипа"]);

	РегистрыСведений.ПротоколСобытий.ДобавитьОшибку(ТекстСообщения);

КонецПроцедуры

// Формирует сообщение об отсутствии ожидаемого реквизита.
//
// Параметры:
//  ИмяТипа	 - Строка - Имя типа загружаемого объекта;
//  Реквизит - Строка - Имя атрибута который не найден в загруженных данных;
// 
// Возвращаемое значение:
//  Строка - Описание ошибки.
//
Функция СформироватьСообщениеОбОтсутствииОжидаемогоРеквизита(ИмяТипа, Реквизит)

	ТекстСообщения = НСтр("ru = 'Для ""%1"" отсутствует ожидаемый атрибут (%2)';
						  |en = 'Attribute ""%2"" expected for ""%1""'");

	Возврат СтрШаблон(ТекстСообщения, ИмяТипа, Реквизит);

КонецФункции

// Получает значение указанного реквизита из прочитанных данных
//
// Параметры:
//  СтруктураДанныхОбъекта	 - Соответствие - Предварительно прочитанные значения реквизитов объекта;
//  ИмяРеквизита			 - Строка - Имя получаемого реквизита объекта;
//  ИмяТипа					 - Строка - Тип к которому преобразуются данные из XML-строки;
//  Обязательный			 - Булево - Признак обязательного реквизита.
// 
// Возвращаемое значение:
//  Значение - Значение запрошенного типа.
//
Функция ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, ИмяРеквизита, ИмяТипа = Неопределено, 
		Обязательный = Ложь)

	Значение = СтруктураДанныхОбъекта[ВРег(ИмяРеквизита)];

	// Читаем значение атрибута из потока данных
	Если Значение = Неопределено Тогда
		Если Обязательный Тогда
			ВызватьИсключение 
				СформироватьСообщениеОбОтсутствииОжидаемогоРеквизита(
					СтруктураДанныхОбъекта["ИмяТипа"], ИмяРеквизита);
		ИначеЕсли ИмяТипа = "Число" Тогда // ПМВ			
			Возврат 0;		
		Иначе
			Возврат Значение;
		КонецЕсли;
	КонецЕсли;

	// Получаем значение нужного типа 
	Если ИмяТипа = Неопределено Тогда
		Возврат Значение;
	Иначе
		Возврат XMLЗначение(Тип(ИмяТипа), Значение);
	КонецЕсли;

КонецФункции

// Получает ссылку на объект по описанию типа и идентификатору.
//
// Параметры:
//  ДанныеОбъекта - Соответствие - Данные реквизитов объекта;
//   - Type - Тип объекта;
//   - ID   - Идентификатор объекта;
// 
// Возвращаемое значение:
//  Ссылка - Ссылка на загружаемый объект.
//
Функция ПолучитьСсылкуСоставногоТипа(ДанныеОбъекта)

	Если ДанныеОбъекта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	ТипЗначения   = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Type", "Строка");
	Идентификатор = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "ID"  , "Строка");

	Возврат ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу(ТипЗначения, Идентификатор);

КонецФункции

// Получает значения реквизитов объекта из файла данных.
//
// Параметры:
//  ОбъектЧтенияXML - ЧтениеXML - Объект чтения данных из файла;
//  ИмяТипа         - Строка - Имя типа загружаемого объекта;
// 
// Возвращаемое значение:
//  Соответствие - Значения загруженных реквизитов объекта.
//
Функция ПолучитьЗначенияРеквизитовОбъекта(ОбъектЧтенияXML, ИмяТипа)

	СтруктураДанныхОбъекта = Новый Соответствие();

	// Выполняем обход по узлам
	Пока ОбъектЧтенияXML.Прочитать() Цикл

		// На конечном узлам объекта - выходим
		Если ОбъектЧтенияXML.ТипУзла = ТипУзлаXML.КонецЭлемента
			И ОбъектЧтенияXML.Имя = ИмяТипа Тогда
			Прервать;

		ИначеЕсли ОбъектЧтенияXML.ТипУзла = ТипУзлаXML.Текст Тогда

			// читаем значение
			Значение = ОбъектЧтенияXML.Значение;

			// читаем закрывающий тег
			ОбъектЧтенияXML.Прочитать();

			Возврат Значение;

		// Нашли новый элемент
		ИначеЕсли ОбъектЧтенияXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда

			// Запоминаем имя элемента
			Имя = ОбъектЧтенияXML.Имя;

			Данные = ПолучитьЗначенияРеквизитовОбъекта(ОбъектЧтенияXML, Имя);

			// Проверяем, что мы получили. 
			// Если реквизита с таким именем нет - просто добавляем.
			// Если реквизит есть - то мы начали читать табличную часть.
			// Тогда нам вместо существующего значения поместить массив.
			// В него поместить старый и только что полученный элемент.
			Если ТипЗнч(СтруктураДанныхОбъекта) = Тип("Соответствие") Тогда

				Значение = СтруктураДанныхОбъекта[ВРег(Имя)];
				Если Значение = Неопределено Тогда
					СтруктураДанныхОбъекта.Вставить(ВРег(Имя), Данные);
				Иначе
					СтруктураДанныхОбъекта = Новый Массив();
					СтруктураДанныхОбъекта.Добавить(Значение);
					СтруктураДанныхОбъекта.Добавить(Данные);
				КонецЕсли;

			Иначе
				СтруктураДанныхОбъекта.Добавить(Данные);
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Возврат СтруктураДанныхОбъекта;

КонецФункции

// Получает данные строки для табличной части загружаемых данных.
//
// Параметры:
//  КоллекцияЭлементов - Соответствие, Массив - Данные реквизитов объекта;
//  ЭлементКоллекции   -  - Значение строки.
// 
// Возвращаемое значение:
//  Строка - значение элемента коллекции.
//
Функция ПолучитьДанныеСтроки(КоллекцияЭлементов, ЭлементКоллекции)

	Если ТипЗнч(КоллекцияЭлементов) = Тип("Соответствие") Тогда
		Возврат ЭлементКоллекции.Значение;
	Иначе
		Возврат ЭлементКоллекции;
	КонецЕсли;

КонецФункции

// Выполняет инициацию загрузки конкретного объекта данных.
//
// Параметры:
//  СтруктураДанныхОбъекта		 - Соответствие - Список значений реквизитов объекта;
//  СсылкаНаЗагруженныйОбъект	 - Ссылка - Ссылка на загружаемый объект;
//  СведенияОЗагруженныхДанных	 - Структура - Кэш данных загруженных объектов.
//
Процедура ВыполнитьОбработкуXML(СтруктураДанныхОбъекта, СсылкаНаЗагруженныйОбъект, 
		СведенияОЗагруженныхДанных)

	ИмяТипа = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "ИмяТипа", "Строка");
	УИД     = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "ID", "Строка", Ложь);

	СсылкаНаЗагруженныйОбъект = Неопределено;

	// Если при просмотре сообщений была найдена информация об удалении объекта,
	//	то этот объект не будет записываться в базу мобильного.
	Если Не СтрСравнить(ИмяТипа, "ObjectDeletion") = 0
		И Не УИД = Неопределено
		И Не СведенияОЗагруженныхДанных.УдаляемыеДанные[УИД] = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если СтрСравнить(ИмяТипа, "Nomenclature") = 0 Тогда
		СсылкаНаЗагруженныйОбъект = ЗаписатьНоменклатуру(
		СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных);
		
	ИначеЕсли СтрСравнить(ИмяТипа, "ViewNomenclature") = 0 Тогда
		СсылкаНаЗагруженныйОбъект = ЗаписатьВидНоменклатуры(
		СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных);
		
	ИначеЕсли СтрСравнить(ИмяТипа, "unit") = 0 Тогда
		СсылкаНаЗагруженныйОбъект = ЗаписатьЕдиницуИзмерения(
		СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных);
		
	ИначеЕсли СтрСравнить(ИмяТипа, "Counterparty") = 0 Тогда
		СсылкаНаЗагруженныйОбъект = ЗаписатьКонтрагента(
		СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных);
		
	ИначеЕсли СтрСравнить(ИмяТипа, "Characteristic") = 0 Тогда
		СсылкаНаЗагруженныйОбъект = ЗаписатьХарактеристикуНоменклатуры(
		СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных);
	
	ИначеЕсли СтрСравнить(ИмяТипа, "Currency") = 0 Тогда
		СсылкаНаЗагруженныйОбъект = ЗаписатьВалюту(
		СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных);
		
	ИначеЕсли СтрСравнить(ИмяТипа, "PriceType") = 0 Тогда
		СсылкаНаЗагруженныйОбъект = ЗаписатьТипЦенНоменклатуры(
		СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных);

	ИначеЕсли СтрСравнить(ИмяТипа, "RecordOfPrice") = 0 Тогда
		СсылкаНаЗагруженныйОбъект = ЗаписатьЦенуНоменклатуры(
		СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных);
		
	ИначеЕсли СтрСравнить(ИмяТипа, "ConstPriceType") = 0 Тогда
		СсылкаНаЗагруженныйОбъект = ЗаписатьКонстантуТипЦенНоменклатурыМобильногоКлиента(
		СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных);
		
	ИначеЕсли СтрСравнить(ИмяТипа, "Stock") = 0 Тогда
		СсылкаНаЗагруженныйОбъект = ЗаписатьСклад(
		СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных);
		
	ИначеЕсли СтрСравнить(ИмяТипа, "RemnantsOfGoods") = 0 Тогда
		СсылкаНаЗагруженныйОбъект = ЗаписатьОстаткиТоваров(        // СсылкаНаЗагруженныйОбъект ?
		СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных);
		
	ИначеЕсли СтрСравнить(ИмяТипа, "Series") = 0 Тогда
		СсылкаНаЗагруженныйОбъект = ЗаписатьСериюНоменклатуры(              
		СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных);

	ИначеЕсли СтрСравнить(ИмяТипа, "RecordOfBarcodes") = 0 Тогда
		СсылкаНаЗагруженныйОбъект = ЗаписатьШтрихкод(              // СсылкаНаЗагруженныйОбъект ?
		СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных);
	
	ИначеЕсли СтрСравнить(ИмяТипа, "User") = 0 Тогда
		СсылкаНаЗагруженныйОбъект = ЗаписатьПользователя(
		СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных);
	
	ИначеЕсли СтрСравнить(ИмяТипа, "Quality") = 0 Тогда
		СсылкаНаЗагруженныйОбъект = ЗаписатьКачество(
		СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных);
		
	ИначеЕсли СтрСравнить(ИмяТипа, "Contract") = 0 Тогда
		СсылкаНаЗагруженныйОбъект = ЗаписатьДоговорКонтрагента(
		СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных);
		
	ИначеЕсли СтрСравнить(ИмяТипа, "Picture") = 0 Тогда
		СсылкаНаЗагруженныйОбъект = ЗаписатьИзображение(
		СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных);
		
	ИначеЕсли СтрСравнить(ИмяТипа, "Organization") = 0 Тогда
		СсылкаНаЗагруженныйОбъект = ЗаписатьОрганизацию(
		СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных);
		
	ИначеЕсли СтрСравнить(ИмяТипа, "Order") = 0 Тогда
		СсылкаНаЗагруженныйОбъект = ЗаписатьЗаказ(
		СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных);
	
	ИначеЕсли СтрСравнить(ИмяТипа, "ConstPrefix") = 0 Тогда
		СсылкаНаЗагруженныйОбъект = ЗаписатьКонстантуПрефиксМобильногоКлиента(
		СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных);

	ИначеЕсли СтрСравнить(ИмяТипа, "ConstUseCharacteristics") = 0 Тогда
		СсылкаНаЗагруженныйОбъект = ЗаписатьКонстантуИспользоватьХарактеристикиНоменклатуры(
		СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных);

	ИначеЕсли СтрСравнить(ИмяТипа, "ConstUseSeries") = 0 Тогда
		СсылкаНаЗагруженныйОбъект = ЗаписатьКонстантуИспользоватьСерииНоменклатуры(
		СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных);
		
	ИначеЕсли СтрСравнить(ИмяТипа, "RecordОfCurrencyRate") = 0 Тогда
		СсылкаНаЗагруженныйОбъект = ЗаписатьКурсВалюты(
		СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных);
	
	ИначеЕсли СтрСравнить(ИмяТипа, "ConstMainOrganization") = 0 Тогда
		СсылкаНаЗагруженныйОбъект = ЗаписатьКонстантуОсновнаяОрганизацияМобильногоКлиента(
		СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных);
	
	ИначеЕсли СтрСравнить(ИмяТипа, "ConstUsePriceTypeContract") = 0 Тогда
		СсылкаНаЗагруженныйОбъект = ЗаписатьКонстантуИспользоватьПоУмолчаниюТипЦенДоговора(
		СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных);
	
	ИначеЕсли СтрСравнить(ИмяТипа, "ConstCurrencyOrder") = 0 Тогда
		СсылкаНаЗагруженныйОбъект = ЗаписатьКонстантуВалютаЗаказаМобильногоКлиентаПоУмолчанию(
		СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных);
	
	/////////////////////////////////////////////////////////////////////////////////
	
	ИначеЕсли СтрСравнить(ИмяТипа, "LogRecord") = 0 Тогда
		ЗаписатьИнформациюОбОшибке(СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных);

	ИначеЕсли СтрСравнить(ИмяТипа, "ObjectDeletion") = 0 Тогда
		
		//Если СтруктураДанныхОбъекта["TYPE"] = "Order" Тогда
		//	СсылкаНаЗагруженныйОбъект = ПометитьЗаказНаУдаление(СтруктураДанныхОбъекта); ///
		//Иначе
			СсылкаНаЗагруженныйОбъект = ЗаписатьУдалениеОбъекта(
				СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных);
		//КонецЕсли;
			
	ИначеЕсли СтрСравнить(ИмяТипа, "ObjectRecordsDeletion") = 0 Тогда
		СсылкаНаЗагруженныйОбъект = ЗаписатьУдалениеЗаписейРегистра(
			СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных);

	Иначе
		
		МоментВремени = РегистрыСведений.ПротоколСобытий.ДобавитьПредупреждение(
			СтрШаблон(
				НСтр("ru = 'Обнаружен неизвестный тип объекта %1'; en = 'Unknown object type found %1'"),
				ИмяТипа));

		РегистрыСведений.ПротоколСобытий.УстановитьНеобходимостьОтображенияПослеСинхронизации(
			МоментВремени, Истина);

	КонецЕсли;

КонецПроцедуры

// Обновляет счетчики коллекций при загрузке данных.
//
// Параметры:
//  Ссылка						 - Ссылка - Ссылка на загружаемый объект;
//  Значение					 - Объект - Загружаемый объект, Неопределено, если он новый;
//  ИмяТипа						 - Строка - Имя типа загружаемого объекта;
//  СведенияОЗагруженныхДанных	 - Структура - Временные данные о текущей операции обмена.
//   * УдаляемыеДанные  - Соответствие - Список данных, которые будут удалены;
//   * НовыеДанные      - Соответствие - Список данных, которые будут загружены в первый раз;
//   * ПоказателиОбмена - Структура    - Статистические показатели текущей сессии обмена.
//
Процедура ОбновитьСчетчикиКоллекций(Ссылка, Значение, ИмяТипа, СведенияОЗагруженныхДанных)

	Если Не Ссылка = Неопределено И Не Ссылка.Пустая() Тогда

		СсылкаПодлежитУдалению = 
			СведенияОЗагруженныхДанных.УдаляемыеДанные.Получить(Ссылка.УникальныйИдентификатор()) <> Неопределено;

		Если СсылкаПодлежитУдалению Тогда
			Возврат;
		КонецЕсли;

		// Добавим объект в список новых данных которые будут загружены
		СведенияОЗагруженныхДанных.НовыеДанные.Вставить(
			Ссылка, ?(Значение = Неопределено, Ссылка, Значение));

		Коллекция = Неопределено;
		Если СтрСравнить(ИмяТипа, "Counterparty") = 0 Тогда
			Коллекция = "НовыеКонтрагенты";

		ИначеЕсли СтрСравнить(ИмяТипа, "Nomenclature") = 0 Тогда
			Коллекция = "НовыеТовары";

		КонецЕсли;

		Объект = Ссылка.ПолучитьОбъект();
		Если НЕ Коллекция = Неопределено И Объект = Неопределено Тогда
			СведенияОЗагруженныхДанных.ПоказателиОбмена[Коллекция] = 
				СведенияОЗагруженныхДанных.ПоказателиОбмена[Коллекция] + 1;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработкаДанных

#Область ИнформацияООшибке

Функция ЗаписатьИнформациюОбОшибке(СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных)
	
	ВозвращаемыйОбъект = Неопределено;

	Версия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка", Истина);
	Если Версия >= "101" Тогда
		ВозвращаемыйОбъект = 
			ЗаписатьИнформациюОбОшибкеПоВерсии101(СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта);
	КонецЕсли;

	Возврат ВозвращаемыйОбъект;
	
КонецФункции

Функция ЗаписатьИнформациюОбОшибкеПоВерсии101(СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных)

	ТипЗаписи = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "RecordType", "Строка");
	Описание = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Description", "Строка");

	Если ТипЗаписи = "Error" Тогда

		МоментВремени = РегистрыСведений.ПротоколСобытий.ДобавитьОшибку(Описание);
		РегистрыСведений.ПротоколСобытий.УстановитьНеобходимостьОтображенияПослеСинхронизации(
			МоментВремени, Истина);

		СведенияОЗагруженныхДанных.ЕстьОшибки = Истина;

	ИначеЕсли ТипЗаписи = "Information" Тогда

		МоментВремени = РегистрыСведений.ПротоколСобытий.ДобавитьИнформацию(Описание);

	ИначеЕсли ТипЗаписи = "Warning" Тогда

		МоментВремени = РегистрыСведений.ПротоколСобытий.ДобавитьПредупреждение(Описание);
		РегистрыСведений.ПротоколСобытий.УстановитьНеобходимостьОтображенияПослеСинхронизации(
			МоментВремени, Истина);

	КонецЕсли;

КонецФункции

#КонецОбласти

#Область УдалениеОбъекта

Функция ЗаписатьУдалениеОбъекта(СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных)

	ВозвращаемыйОбъект = Неопределено;

	Версия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка", Истина);
	
	Если Версия >= "101" Тогда
		ВозвращаемыйОбъект = ЗаписатьУдалениеОбъектаПоВерсии101(СтруктураДанныхОбъекта);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта);
	КонецЕсли;

	Возврат ВозвращаемыйОбъект;

КонецФункции

Функция ЗаписатьУдалениеОбъектаПоВерсии101(СтруктураДанныхОбъекта)

	ОбъектСсылка = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу(
		ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Type", "Строка", Истина),
		ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "ID", "Строка", Истина));

	Если Не ЗначениеЗаполнено(ОбъектСсылка) Тогда
		Возврат Неопределено;
	КонецЕсли;

	УдалениеОбъект = Новый УдалениеОбъекта(ОбъектСсылка);
	УдалениеОбъект.Записать();
	
	Возврат ОбъектСсылка;

КонецФункции

#КонецОбласти

#Область УдалениеЗаписейРегистра

// Удаляет записи регистра по регистратору
//
// Параметры:
//  СтруктураДанныхОбъекта  - Структура - структура вида ObjectRecordsDeletion 
//                 см. в Центральной ОбменСМобильнымиWMCФормированиеXMLСервер.ВыгрузитьВXMLУдалениеЗаписейРегистратора
//
// Возвращаемое значение:
//   Неопределено   - в любом случае. Ошибки регистрируются в протоколе и журнале регистрации
//
Функция ЗаписатьУдалениеЗаписейРегистра(СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных)

	ВозвращаемыйОбъект = Неопределено;

	Версия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка", Истина);
	
	Если Версия >= "101" Тогда
		ВозвращаемыйОбъект = ЗаписатьУдалениеЗаписейРегистраПоВерсии101(СтруктураДанныхОбъекта);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта);
	КонецЕсли;

	Возврат ВозвращаемыйОбъект;

КонецФункции

// Удаляет записи регистра по регистратору
// 
Функция ЗаписатьУдалениеЗаписейРегистраПоВерсии101(СтруктураДанныхОбъекта)

	ПолноеИмяРегистраВЦентральнойБазе = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Type", "Строка", Истина);
	УИДРегистратора = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "ID", "Строка", Истина);	

	ПолноеИмяРегистраНаКлиенте = 
		ОбменОбработкаСерверПовтИспПереопределяемый.ПолучитьПолноеИмяРегистраНаКлиенте(ПолноеИмяРегистраВЦентральнойБазе);
		
	Если ПолноеИмяРегистраНаКлиенте = Неопределено  Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	%1 КАК Регистр
	|ГДЕ
	|	Регистр.УИДРегистратора <> &УИДРегистратора";
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрШаблон(ТекстЗапроса, ПолноеИмяРегистраНаКлиенте);
	Запрос.УстановитьПараметр("УИДРегистратора", УИДРегистратора); 

	ТаблицаОставляемыхЗаписей = Запрос.Выполнить().Выгрузить(); 
	
	ИмяРегистра = СтрРазделить(ПолноеИмяРегистраНаКлиенте, ".", Ложь)[1];
	
	НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей(); 
	НаборЗаписей.Загрузить(ТаблицаОставляемыхЗаписей); 
	НаборЗаписей.Записать(); 
	
	ИнформацияТекст = "Из " + ПолноеИмяРегистраНаКлиенте + 
	" удалены записи по регистратору с УИД " + УИДРегистратора;
	РегистрыСведений.ПротоколСобытий.ДобавитьИнформацию(ИнформацияТекст);
	
	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область Номенклатура

Функция ЗаписатьНоменклатуру(СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных)

	ВозвращаемыйОбъект = Неопределено;

	Версия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка", Истина);
	Если Версия >= "101" Тогда
		ВозвращаемыйОбъект = ЗаписатьНоменклатуруПоВерсии101(СтруктураДанныхОбъекта);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта);
	КонецЕсли;

	Возврат ВозвращаемыйОбъект;
	
КонецФункции

Функция ЗаписатьНоменклатуруПоВерсии101(СтруктураДанныхОбъекта)

	ЭтоНовыйОбъект = Ложь;

	Ссылка = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу(
		ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "ИмяТипа", "Строка", Истина), 
		ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "ID", "Строка", Истина));
		
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
		
	ЭтоГруппа = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "IsFolder", "Булево", Истина);
	
	Объект = Ссылка.ПолучитьОбъект();
	
	Если Объект = Неопределено Тогда
		Если ЭтоГруппа Тогда
			Объект = Справочники.Номенклатура.СоздатьГруппу();
		Иначе	
			Объект = Справочники.Номенклатура.СоздатьЭлемент();
		КонецЕсли;
		Объект.УстановитьСсылкуНового(Ссылка);
		ЭтоНовыйОбъект = Истина;
	КонецЕсли;

	Объект.Код = 
		ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Code", "Строка", Ложь);

	Объект.Наименование = 
		ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Name", "Строка", Ложь);
		
		//////////////////////////////////////////	
	Объект.Родитель = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу("Nomenclature",         
		ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Parent", "Строка", Ложь));
		
		//////////////////////////////////////////
	ИдентификаторВидаНоменклатуры = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "ViewNomenclature", "Строка", Ложь);
	Объект.ВидНоменклатуры = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу("ViewNomenclature", ИдентификаторВидаНоменклатуры);
	
	Если НЕ ЭтоГруппа Тогда
		
		Объект.Артикул = 
		ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Article", "Строка", Ложь);
		
		Объект.НаименованиеПолное = 
		ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "FullName", "Строка", Ложь);
		
		Объект.Услуга = 
		ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Service", "Булево");
		
		Объект.ВестиУчетПоХарактеристикам = 
		ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "AccountingCharacteristic", "Булево");
		
		Объект.ВестиУчетПоСериям = 
		ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "AccountingBySeries", "Булево");
		
		ИдентификаторЕдиницыИзмерения = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "unit", "Строка", Ложь);
		Объект.ЕдиницаИзмерения = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу("unit", ИдентификаторЕдиницыИзмерения);			
		
		ИдентификаторИзображения = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Picture", "Строка", Ложь);
		Если ЗначениеЗаполнено(ИдентификаторИзображения) И ИдентификаторИзображения <> "NotFilled" Тогда
		 		Объект.Изображение = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу("Picture", ИдентификаторИзображения);			
		КонецЕсли;
		
	КонецЕсли;
	
	Объект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	Объект.ОбменДанными.Получатели.Очистить();

	Объект.ДополнительныеСвойства.Вставить("Загрузка", Истина);
	Объект.ДополнительныеСвойства.Вставить("ЭтоНовыйОбъект", ЭтоНовыйОбъект);

	Объект.Записать();

	РегистрыСведений.ДатыЗагрузкиОбъектов.ОбновитьДатуПоследнегоИзмененияОбъекта(Объект.Ссылка);

	Возврат Ссылка;

КонецФункции

#КонецОбласти

#Область ВидыНоменклатуры

Функция ЗаписатьВидНоменклатуры(СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных)

	ВозвращаемыйОбъект = Неопределено;

	Версия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка", Истина);
	Если Версия >= "101" Тогда
		ВозвращаемыйОбъект = ЗаписатьВидНоменклатурыПоВерсии101(СтруктураДанныхОбъекта);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта);
	КонецЕсли;

	Возврат ВозвращаемыйОбъект;
	
КонецФункции

Функция ЗаписатьВидНоменклатурыПоВерсии101(СтруктураДанныхОбъекта)

	ЭтоНовыйОбъект = Ложь;
	
	ID = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "ID", "Строка", Ложь);
	
	Если ID = "NotFilled" Тогда
		Возврат Справочники.ВидыНоменклатуры.ПустаяСсылка();
	КонецЕсли;
		
	Ссылка = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу(
		ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "ИмяТипа", "Строка", Ложь), 
		ID);
		
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Справочники.ВидыНоменклатуры.ПустаяСсылка();
	КонецЕсли;	
	
	Объект = Ссылка.ПолучитьОбъект();
	
	Если Объект = Неопределено Тогда
		Объект = Справочники.ВидыНоменклатуры.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);
		ЭтоНовыйОбъект = Истина;
	КонецЕсли;
	
	Объект.Код = 
		ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Code", "Строка", Ложь);
		
	Объект.Наименование = 
		ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Name", "Строка", Ложь);
	
	Объект.ТипНоменклатуры = 
		ОбменВызовСервераПовтИсп.ПолучитьТипНоменклатурыПоПредставлению(
			ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "TypeNomenclature", "Строка", Ложь));
	
	Объект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	Объект.ОбменДанными.Получатели.Очистить();
	
	Объект.ДополнительныеСвойства.Вставить("Загрузка", Истина);
	Объект.ДополнительныеСвойства.Вставить("ЭтоНовыйОбъект", ЭтоНовыйОбъект);
	
	Объект.Записать();
	
	РегистрыСведений.ДатыЗагрузкиОбъектов.ОбновитьДатуПоследнегоИзмененияОбъекта(Объект.Ссылка);
	
	Возврат Ссылка;

КонецФункции

#КонецОбласти

#Область ЕдиницыИзмерения

Функция ЗаписатьЕдиницуИзмерения(СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных)

	ВозвращаемыйОбъект = Неопределено;

	Версия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка", Истина);
	Если Версия >= "101" Тогда
		ВозвращаемыйОбъект = ЗаписатьЕдиницуИзмеренияПоВерсии101(СтруктураДанныхОбъекта);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта);
	КонецЕсли;

	Возврат ВозвращаемыйОбъект;
	
КонецФункции

Функция ЗаписатьЕдиницуИзмеренияПоВерсии101(СтруктураДанныхОбъекта)

	ЭтоНовыйОбъект = Ложь;
		
	Ссылка = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу(
		ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "ИмяТипа", "Строка", Ложь), 
		ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "ID", "Строка", Ложь));
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Справочники.ЕдиницыИзмерения.ПустаяСсылка();
	КонецЕсли;
	
	Объект = Ссылка.ПолучитьОбъект();
	
	Если Объект = Неопределено Тогда
		Объект = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);
		ЭтоНовыйОбъект = Истина;
	КонецЕсли;
	
	Объект.Наименование = 
		ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Name", "Строка", Ложь);
	Объект.Код = 
		ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Code", "Строка", Ложь);
		
	// Владелец	
	ИдентификаторВладельца = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Owner", "Строка", Ложь);
	Если Не ЗначениеЗаполнено(ИдентификаторВладельца) Тогда
		Объект.Владелец = Справочники.Номенклатура.ЗаместительБитойСсылки;
	Иначе
		Объект.Владелец = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу("Nomenclature", ИдентификаторВладельца);
	КонецЕсли;
	
	Объект.Коэффициент = 
		ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Coefficient", "Строка", Ложь);
		
	Объект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	Объект.ОбменДанными.Получатели.Очистить();
	
	Объект.ДополнительныеСвойства.Вставить("Загрузка", Истина);
	Объект.ДополнительныеСвойства.Вставить("ЭтоНовыйОбъект", ЭтоНовыйОбъект);
	
	Объект.Записать();
	
	РегистрыСведений.ДатыЗагрузкиОбъектов.ОбновитьДатуПоследнегоИзмененияОбъекта(Объект.Ссылка);
	
	Возврат Ссылка;

КонецФункции

#КонецОбласти

#Область Контрагенты

Функция ЗаписатьКонтрагента(СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных)

	ВозвращаемыйОбъект = Неопределено;

	Версия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка", Истина);
	Если Версия >= "101" Тогда
		ВозвращаемыйОбъект = ЗаписатьКонтрагентаПоВерсии101(СтруктураДанныхОбъекта);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта);
	КонецЕсли;

	Возврат ВозвращаемыйОбъект;
	
КонецФункции

Функция ЗаписатьКонтрагентаПоВерсии101(СтруктураДанныхОбъекта)

	ЭтоНовыйОбъект = Ложь;
	
	ID = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "ID", "Строка", Ложь);
	
	Если ID = Неопределено Тогда 
		Возврат Справочники.Контрагенты.ПустаяСсылка(); 
	КонецЕсли; 
	
	Ссылка = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу(
		ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "ИмяТипа", "Строка", Ложь), 
		ID);
		
	ЭтоГруппа = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "IsFolder", "Булево", Истина);
	
	Объект = Ссылка.ПолучитьОбъект();
	
	Если Объект = Неопределено Тогда
		Если ЭтоГруппа Тогда
			Объект = Справочники.Контрагенты.СоздатьГруппу();
		Иначе	
			Объект = Справочники.Контрагенты.СоздатьЭлемент();
		КонецЕсли;
		Объект.УстановитьСсылкуНового(Ссылка);
		ЭтоНовыйОбъект = Истина;
	КонецЕсли;
	
	Объект.Код = 
		ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Code", "Строка", Ложь);
		
	Объект.Родитель = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу("Counterparty",         
		ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Parent", "Строка", Ложь));
		
	Объект.Наименование = 
		ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Name", "Строка", Ложь);
		
	Если НЕ ЭтоГруппа Тогда
		
		Объект.НаименованиеПолное = 
			ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "FullName", "Строка", Ложь);
		
		Объект.ИНН = 
			ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "INN", "Строка", Ложь);
		
		Объект.КПП = 
			ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "KPP", "Строка", Ложь);
		
		Объект.ЮрФизЛицо = 
			ОбменВызовСервераПовтИсп.ПолучитьЮрФизЛицоПоПредставлению(
			ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "UrFizLico", "Строка", Ложь));
		
		ИдентификаторОсновнойДоговорКонтрагента = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Contract", "Строка", Ложь);
		Если Не ЗначениеЗаполнено(ИдентификаторОсновнойДоговорКонтрагента) Тогда
			Объект.ОсновнойДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		Иначе
			
			Объект.ОсновнойДоговорКонтрагента = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу("Contract", ИдентификаторОсновнойДоговорКонтрагента);
			
		КонецЕсли;
			
	КонецЕсли;
		
	Объект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	Объект.ОбменДанными.Получатели.Очистить();
	
	Объект.ДополнительныеСвойства.Вставить("Загрузка", Истина);
	Объект.ДополнительныеСвойства.Вставить("ЭтоНовыйОбъект", ЭтоНовыйОбъект);
	
	Объект.Записать();
	
	РегистрыСведений.ДатыЗагрузкиОбъектов.ОбновитьДатуПоследнегоИзмененияОбъекта(Объект.Ссылка);
	
	Возврат Ссылка;

КонецФункции

#КонецОбласти

#Область ХарактеристикиНоменклатуры

Функция ЗаписатьХарактеристикуНоменклатуры(СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных)

	ВозвращаемыйОбъект = Неопределено;

	Версия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка", Истина);
	Если Версия >= "101" Тогда
		ВозвращаемыйОбъект = ЗаписатьХарактеристикуНоменклатурыПоВерсии101(СтруктураДанныхОбъекта);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта);
	КонецЕсли;

	Возврат ВозвращаемыйОбъект;
	
КонецФункции

Функция ЗаписатьХарактеристикуНоменклатурыПоВерсии101(СтруктураДанныхОбъекта)

	ЭтоНовыйОбъект = Ложь;
	
	Ссылка = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу(
		ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "ИмяТипа", "Строка", Ложь), 
		ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "ID", "Строка", Ложь));
		
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	КонецЕсли;	
		
	Объект = Ссылка.ПолучитьОбъект();
	
	Если Объект = Неопределено Тогда
		Объект = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);
		ЭтоНовыйОбъект = Истина;
	КонецЕсли;

	Объект.Наименование = 
		ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Name", "Строка", Ложь);

	// Владелец
	ИдентификаторВладельцаХарактеристикиНоменклатуры = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Owner", "Строка", Ложь);
	Если Не ЗначениеЗаполнено(ИдентификаторВладельцаХарактеристикиНоменклатуры) Тогда
		Объект.Владелец = Справочники.Номенклатура.ЗаместительБитойСсылки;
	Иначе
		Объект.Владелец = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу("Nomenclature", ИдентификаторВладельцаХарактеристикиНоменклатуры);
	КонецЕсли;
	
	Объект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	Объект.ОбменДанными.Получатели.Очистить();
	
	Объект.ДополнительныеСвойства.Вставить("Загрузка", Истина);
	Объект.ДополнительныеСвойства.Вставить("ЭтоНовыйОбъект", ЭтоНовыйОбъект);
	
	Объект.Записать();
	
	РегистрыСведений.ДатыЗагрузкиОбъектов.ОбновитьДатуПоследнегоИзмененияОбъекта(Объект.Ссылка);
	
	Возврат Ссылка;

КонецФункции

#КонецОбласти

#Область Валюты

Функция ЗаписатьВалюту(СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных)

	ВозвращаемыйОбъект = Неопределено;

	Версия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка", Истина);
	Если Версия >= "101" Тогда
		ВозвращаемыйОбъект = ЗаписатьВалютуПоВерсии101(СтруктураДанныхОбъекта);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта);
	КонецЕсли;

	Возврат ВозвращаемыйОбъект;
	
КонецФункции

Функция ЗаписатьВалютуПоВерсии101(СтруктураДанныхОбъекта)

	ЭтоНовыйОбъект = Ложь;
		
	Ссылка = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу(
		ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "ИмяТипа", "Строка", Ложь), 
		ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "ID", "Строка", Ложь));
		
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Справочники.Валюты.ПустаяСсылка();
	КонецЕсли;
	
	Объект = Ссылка.ПолучитьОбъект();
	
	Если Объект = Неопределено Тогда
		Объект = Справочники.Валюты.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);
		ЭтоНовыйОбъект = Истина;
	КонецЕсли;
	
	Объект.Наименование = 
		ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Name", "Строка", Ложь);
	Объект.Код = 
		ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Code", "Строка", Ложь);
	
	Объект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	Объект.ОбменДанными.Получатели.Очистить();
	
	Объект.ДополнительныеСвойства.Вставить("Загрузка", Истина);
	Объект.ДополнительныеСвойства.Вставить("ЭтоНовыйОбъект", ЭтоНовыйОбъект);
	
	Объект.Записать();
	
	РегистрыСведений.ДатыЗагрузкиОбъектов.ОбновитьДатуПоследнегоИзмененияОбъекта(Объект.Ссылка);
	
	Возврат Ссылка;

КонецФункции

#КонецОбласти

#Область ТипыЦенНоменклатуры

Функция ЗаписатьТипЦенНоменклатуры(СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных)

	ВозвращаемыйОбъект = Неопределено;

	Версия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка", Истина);
	Если Версия >= "101" Тогда
		ВозвращаемыйОбъект = ЗаписатьТипЦенНоменклатурыПоВерсии101(СтруктураДанныхОбъекта);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта);
	КонецЕсли;

	Возврат ВозвращаемыйОбъект;
	
КонецФункции

Функция ЗаписатьТипЦенНоменклатурыПоВерсии101(СтруктураДанныхОбъекта)

	Ссылка = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу(
		ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "ИмяТипа", "Строка", Ложь), 
		ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "ID", "Строка", Ложь));
		
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();
	КонецЕсли;	
		
	Объект = Ссылка.ПолучитьОбъект();
	
	Если Объект = Неопределено Тогда
		Объект = Справочники.ТипыЦенНоменклатуры.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);
		ЭтоНовыйОбъект = Истина;
	КонецЕсли;

	Объект.Код = 
		ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Code", "Строка", Ложь);
	Объект.Наименование = 
		ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Name", "Строка", Ложь);
		
	ИдентификаторВалюты = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Currency", "Строка", Ложь);
	Объект.ВалютаЦены = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу("Currency", ИдентификаторВалюты);
	
	Объект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	Объект.ОбменДанными.Получатели.Очистить();

	Объект.ДополнительныеСвойства.Вставить("Загрузка", Истина);
	Объект.ДополнительныеСвойства.Вставить("ЭтоНовыйОбъект", ЭтоНовыйОбъект);

	Объект.Записать();

	РегистрыСведений.ДатыЗагрузкиОбъектов.ОбновитьДатуПоследнегоИзмененияОбъекта(Объект.Ссылка);

	Возврат Ссылка;

КонецФункции

#КонецОбласти

#Область ЦенаНоменклатуры

Функция ЗаписатьЦенуНоменклатуры(СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных)

	ВозвращаемыйОбъект = Неопределено;

	Версия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка", Истина);
	Если Версия >= "101" Тогда
		ВозвращаемыйОбъект = ЗаписатьЦенуНоменклатурыПоВерсии101(СтруктураДанныхОбъекта);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта);
	КонецЕсли;

	Возврат ВозвращаемыйОбъект;

КонецФункции

Функция ЗаписатьЦенуНоменклатурыПоВерсии101(СтруктураДанныхОбъекта)

	ДанныеВалюты = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Currency"); // Соответствие
	ИдентификаторВалюты = ПолучитьЗначениеРеквизита(ДанныеВалюты, "ID","Строка", Ложь);
	Валюта = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу("Currency", ИдентификаторВалюты);
	
	ДанныеТипаЦен = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "PriceType"); // Соответствие	
	ИдентификаторТипаЦен = ПолучитьЗначениеРеквизита(ДанныеТипаЦен, "ID", "Строка", Ложь);
	ТипЦен = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу("PriceType", ИдентификаторТипаЦен);
	
	ДанныеХарактеристикиНоменклатуры = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Characteristic"); // Соответствие	
	ИдентификаторХарактеристикиНоменклатуры = ПолучитьЗначениеРеквизита(ДанныеХарактеристикиНоменклатуры, "ID", "Строка", Ложь);
	Если ИдентификаторХарактеристикиНоменклатуры = "NotFilled" Тогда
		ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	Иначе	
		ХарактеристикаНоменклатуры = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу("Characteristic", ИдентификаторХарактеристикиНоменклатуры);
	КонецЕсли;
		
	ДанныеЕдиницыИзмерения = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "unit"); // Соответствие
	ИдентификаторЕдиницыИзмерения = ПолучитьЗначениеРеквизита(ДанныеЕдиницыИзмерения, "ID", "Строка", Истина);
	ЕдиницаИзмерения = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу("unit", ИдентификаторЕдиницыИзмерения);
	
	ДанныеНоменклатуры = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Nomenclature"); // Соответствие 
	ИдентификаторНоменклатуры = ПолучитьЗначениеРеквизита(ДанныеНоменклатуры, "ID", "Строка", Истина);
	Номенклатура = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу("Nomenclature", ИдентификаторНоменклатуры);

	Цена 	= ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Price", "Число", Ложь);
		
	Набор  = РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();
	Набор.Отбор.ТипЦен.Установить(ТипЦен);
	Набор.Отбор.Номенклатура.Установить(Номенклатура);
	Набор.Отбор.ХарактеристикаНоменклатуры.Установить(ХарактеристикаНоменклатуры);

	Если Цена = 0 Тогда
		Набор.Очистить();	
	Иначе
		Запись = Набор.Добавить();
		Запись.ТипЦен = ТипЦен;
		Запись.Номенклатура = Номенклатура;
		Запись.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры;
		Запись.Валюта = Валюта;
		Запись.Цена = Цена;
		Запись.ЕдиницаИзмерения = ЕдиницаИзмерения;
	КонецЕсли;

	Набор.Записать();

	Возврат Набор;

КонецФункции

#КонецОбласти

#Область Склады

Функция ЗаписатьСклад(СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных)

	ВозвращаемыйОбъект = Неопределено;

	Версия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка", Истина);
	Если Версия >= "101" Тогда
		ВозвращаемыйОбъект = ЗаписатьСкладПоВерсии101(СтруктураДанныхОбъекта);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта);
	КонецЕсли;

	Возврат ВозвращаемыйОбъект;
	
КонецФункции

Функция ЗаписатьСкладПоВерсии101(СтруктураДанныхОбъекта)

	ЭтоНовыйОбъект = Ложь;
	
	ЭтоГруппа = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "IsFolder", "Булево", Истина);
	
	Ссылка = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу(
		ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "ИмяТипа", "Строка", Ложь), 
		ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "ID", "Строка", Ложь));
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Справочники.Склады.ПустаяСсылка();
	КонецЕсли;	
		
	Объект = Ссылка.ПолучитьОбъект();
	
	Если Объект = Неопределено Тогда
		Если ЭтоГруппа Тогда
			Объект = Справочники.Склады.СоздатьГруппу();
		Иначе	
			Объект = Справочники.Склады.СоздатьЭлемент();
		КонецЕсли;
		Объект.УстановитьСсылкуНового(Ссылка);
		ЭтоНовыйОбъект = Истина;
	КонецЕсли;
	
	Объект.Код = 
		ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Code", "Строка", Ложь);
		
	Объект.Родитель = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу("Stock",         
		ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Parent", "Строка", Ложь));
		
	Объект.Наименование = 
		ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Name", "Строка", Ложь);
		
	Объект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	Объект.ОбменДанными.Получатели.Очистить();
	
	Объект.ДополнительныеСвойства.Вставить("Загрузка", Истина);
	Объект.ДополнительныеСвойства.Вставить("ЭтоНовыйОбъект", ЭтоНовыйОбъект);
	
	Объект.Записать();
	
	РегистрыСведений.ДатыЗагрузкиОбъектов.ОбновитьДатуПоследнегоИзмененияОбъекта(Объект.Ссылка);
	
	Возврат Ссылка;

КонецФункции

#КонецОбласти

#Область ОстаткиТоваров

Функция ЗаписатьОстаткиТоваров(СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных)

	ВозвращаемыйОбъект = Неопределено;

	Версия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка", Истина);
	Если Версия >= "101" Тогда
		ВозвращаемыйОбъект = ЗаписатьОстаткиТоваровПоВерсии101(СтруктураДанныхОбъекта);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта);
	КонецЕсли;

	Возврат ВозвращаемыйОбъект;

КонецФункции

Функция ЗаписатьОстаткиТоваровПоВерсии101(СтруктураДанныхОбъекта)

	ДанныеСклада = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Stock"); // Соответствие
	ИдентификаторСклада = ПолучитьЗначениеРеквизита(ДанныеСклада, "ID","Строка", Ложь);
	Склад = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу("Stock", ИдентификаторСклада);
	
	ДанныеНоменклатуры = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Nomenclature"); // Соответствие 
	ИдентификаторНоменклатуры = ПолучитьЗначениеРеквизита(ДанныеНоменклатуры, "ID", "Строка", Истина);
	Номенклатура = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу("Nomenclature", ИдентификаторНоменклатуры);
	
	ДанныеХарактеристикиНоменклатуры = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Characteristic"); 
	Если (ТипЗнч(ДанныеХарактеристикиНоменклатуры) = Тип("Строка") И ДанныеХарактеристикиНоменклатуры = "NotFilled")
		ИЛИ ДанныеХарактеристикиНоменклатуры = Неопределено Тогда 
		ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	Иначе
		ИдентификаторХарактеристикиНоменклатуры = ПолучитьЗначениеРеквизита(ДанныеХарактеристикиНоменклатуры, "ID", "Строка", Ложь);
		ХарактеристикаНоменклатуры = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу("Characteristic", ИдентификаторХарактеристикиНоменклатуры);
	КонецЕсли;
	
	ДанныеСерииНоменклатуры = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Series"); // Соответствие	
	Если (ТипЗнч(ДанныеСерииНоменклатуры) = Тип("Строка") И ДанныеСерииНоменклатуры = "NotFilled") 
		ИЛИ ДанныеСерииНоменклатуры = Неопределено Тогда 
		СерияНоменклатуры = Справочники.СерииНоменклатуры.ПустаяСсылка();
	Иначе	
		ИдентификаторСерииНоменклатуры = ПолучитьЗначениеРеквизита(ДанныеСерииНоменклатуры, "ID", "Строка", Ложь);
		СерияНоменклатуры = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу("Series", ИдентификаторСерииНоменклатуры);
	КонецЕсли;

	ДанныеКачества = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Quality"); // Соответствие	
	Если (ТипЗнч(ДанныеКачества) = Тип("Строка") И ДанныеКачества = "NotFilled") 
		ИЛИ ДанныеСерииНоменклатуры = Неопределено Тогда 
		Качество = Справочники.Качество.ПустаяСсылка();
	Иначе	
		ИдентификаторКачества = ПолучитьЗначениеРеквизита(ДанныеКачества, "ID", "Строка", Ложь);
		Качество = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу("Quality", ИдентификаторКачества);
	КонецЕсли;
	
	КоличествоОстаток = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "amountBalance", "Число", Ложь);
	КоличествоВРезерве = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "amountInReserve", "Число", Ложь);
	КоличествоКПолучению = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "amountToReceipt", "Число", Ложь);
	КоличествоКПередаче = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "amountToTransfer", "Число", Ложь);
	КоличествоЗаказаноУПоставщиков = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "amountOrdered", "Число", Ложь);
	
	Набор  = РегистрыСведений.ТоварыОстатки.СоздатьНаборЗаписей();
	Набор.Отбор.Склад.Установить(Склад);
	Набор.Отбор.Номенклатура.Установить(Номенклатура);
	Набор.Отбор.ХарактеристикаНоменклатуры.Установить(ХарактеристикаНоменклатуры);
	Набор.Отбор.СерияНоменклатуры.Установить(СерияНоменклатуры);
	Набор.Отбор.Качество.Установить(Качество);

	Если КоличествоОстаток = 0
		 И КоличествоВРезерве = 0
		 И КоличествоКПолучению = 0
		 И КоличествоКПередаче = 0
		 И КоличествоЗаказаноУПоставщиков = 0 Тогда
		 
		 Набор.Очистить();
		 
	 Иначе
		
		Запись = Набор.Добавить();
		Запись.Склад 						= Склад;
		Запись.Номенклатура 				= Номенклатура;
		Запись.ХарактеристикаНоменклатуры 	= ХарактеристикаНоменклатуры;
		Запись.СерияНоменклатуры 			= СерияНоменклатуры;
		Запись.Качество 					= Качество;
		
		// Количество
		Запись.КоличествоОстаток 			= КоличествоОстаток;
		Запись.КоличествоВРезерве 			= КоличествоВРезерве;
		Запись.КоличествоКПолучению 		= КоличествоКПолучению;
		Запись.КоличествоКПередаче 			= КоличествоКПередаче;
		Запись.КоличествоЗаказаноУПоставщиков = КоличествоЗаказаноУПоставщиков;
		
		Запись.СвободныйОстаток = КоличествоОстаток - КоличествоВРезерве - КоличествоКПередаче;
	
	КонецЕсли;
	
	Набор.Записать();

	Возврат Набор;

 КонецФункции

#КонецОбласти

#Область СерииНоменклатуры

Функция ЗаписатьСериюНоменклатуры(СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных)

	ВозвращаемыйОбъект = Неопределено;

	Версия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка", Истина);
	Если Версия >= "101" Тогда
		ВозвращаемыйОбъект = ЗаписатьСериюНоменклатурыПоВерсии101(СтруктураДанныхОбъекта);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта);
	КонецЕсли;

	Возврат ВозвращаемыйОбъект;
	
КонецФункции

Функция ЗаписатьСериюНоменклатурыПоВерсии101(СтруктураДанныхОбъекта)

	ЭтоНовыйОбъект = Ложь;
	
	Ссылка = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу(
		ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "ИмяТипа", "Строка", Ложь), 
		ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "ID", "Строка", Ложь));
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Справочники.СерииНоменклатуры.ПустаяСсылка();
	КонецЕсли;	
		
	Объект = Ссылка.ПолучитьОбъект();
	
	Если Объект = Неопределено Тогда
		Объект = Справочники.СерииНоменклатуры.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);
		ЭтоНовыйОбъект = Истина;
	КонецЕсли;
	
	Объект.Код = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Code", "Строка", Ложь);

	Объект.Наименование = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Name", "Строка", Ложь);

	// Владелец
	ИдентификаторВладельцаСерииНоменклатуры = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Owner", "Строка", Ложь);
	Если Не ЗначениеЗаполнено(ИдентификаторВладельцаСерииНоменклатуры) Тогда
		Объект.Владелец = Справочники.Номенклатура.ЗаместительБитойСсылки;
	Иначе
		Объект.Владелец = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу("Nomenclature", ИдентификаторВладельцаСерииНоменклатуры);
	КонецЕсли;

	Объект.СерийныйНомер = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "SerialNumber", "Строка", Ложь);
	Объект.СрокГодности = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "ExpirationDate", "Дата", Ложь);
	
	Объект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	Объект.ОбменДанными.Получатели.Очистить();
	
	Объект.ДополнительныеСвойства.Вставить("Загрузка", Истина);
	Объект.ДополнительныеСвойства.Вставить("ЭтоНовыйОбъект", ЭтоНовыйОбъект);
	
	Объект.Записать();
	
	РегистрыСведений.ДатыЗагрузкиОбъектов.ОбновитьДатуПоследнегоИзмененияОбъекта(Объект.Ссылка);
	
	Возврат Ссылка;

КонецФункции

#КонецОбласти

#Область Штрихкод

Функция ЗаписатьШтрихкод(СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных)

	ВозвращаемыйОбъект = Неопределено;

	Версия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка", Истина);
	Если Версия >= "101" Тогда
		ВозвращаемыйОбъект = ЗаписатьШтрихкодПоВерсии101(СтруктураДанныхОбъекта);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта);
	КонецЕсли;

	Возврат ВозвращаемыйОбъект;

КонецФункции

Функция ЗаписатьШтрихкодПоВерсии101(СтруктураДанныхОбъекта)

	// Владелец
	ДанныеВладельца = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Owner"); // Соответствие
	ИдентификаторВладельца = ПолучитьЗначениеРеквизита(ДанныеВладельца, "ID","Строка", Ложь);
	Если Не ЗначениеЗаполнено(ИдентификаторВладельца) Тогда
		Владелец = Справочники.Номенклатура.ЗаместительБитойСсылки;
	Иначе	
		Владелец = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу("Nomenclature", ИдентификаторВладельца);
	КонецЕсли;

	ДанныеЕдиницыИзмерения = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "unit"); // Соответствие
	Если (ТипЗнч(ДанныеЕдиницыИзмерения) = Тип("Строка") И ДанныеЕдиницыИзмерения = "NotFilled") 
		ИЛИ ДанныеЕдиницыИзмерения = Неопределено Тогда 
		ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
	Иначе
		ИдентификаторЕдиницыИзмерения = ПолучитьЗначениеРеквизита(ДанныеЕдиницыИзмерения, "ID", "Строка", Истина);
		ЕдиницаИзмерения = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу("unit", ИдентификаторЕдиницыИзмерения);
	КонецЕсли;
	
	ДанныеХарактеристикиНоменклатуры = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Characteristic"); 
	Если (ТипЗнч(ДанныеХарактеристикиНоменклатуры) = Тип("Строка")И ДанныеХарактеристикиНоменклатуры = "NotFilled")
		ИЛИ ДанныеХарактеристикиНоменклатуры = Неопределено Тогда 
		ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	Иначе
		ИдентификаторХарактеристикиНоменклатуры = ПолучитьЗначениеРеквизита(ДанныеХарактеристикиНоменклатуры, "ID", "Строка", Ложь);
		ХарактеристикаНоменклатуры = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу("Characteristic", ИдентификаторХарактеристикиНоменклатуры);
	КонецЕсли;
		
	Штрихкод = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "BarcodeProps", "Строка", Ложь);
	
	ТипШтрихкодаСтрока = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "TypeBarcode", "Строка", Ложь);
	ТипШтрихкода = ОбменВызовСервераПовтИсп.ПолучитьСсылкуНаЗначениеПеречисления("ТипыШтрихкодов", ТипШтрихкодаСтрока);  
	
	// Очищаем все записи по текущему штрихкоду
	// Для исключения ситуации, когда, например, характеристика была пустая, а потом заполнили,
	// и если делать запись с отбором по всем измерениям, то запись с пустой характеристикой останется
	Набор  = РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
	Набор.Отбор.Штрихкод.Установить(Штрихкод);
	Набор.Очистить();
	Набор.Записать();

	// Заполняем новыми
	Набор  = РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
	Набор.Отбор.Штрихкод.Установить(Штрихкод);
	Набор.Отбор.Владелец.Установить(Владелец);
	Набор.Отбор.ТипШтрихкода.Установить(ТипШтрихкода);
	Набор.Отбор.ЕдиницаИзмерения.Установить(ЕдиницаИзмерения);
	Набор.Отбор.ХарактеристикаНоменклатуры.Установить(ХарактеристикаНоменклатуры);

	Если Штрихкод = "" Тогда
		Набор.Очистить();	
	Иначе
		Запись = Набор.Добавить();
		Запись.Штрихкод = Штрихкод;
		Запись.Владелец = Владелец;
		Запись.ТипШтрихкода = ТипШтрихкода;
		Запись.ЕдиницаИзмерения = ЕдиницаИзмерения;
		Запись.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры;
	КонецЕсли;

	Набор.Записать();

	Возврат Набор;

КонецФункции

#КонецОбласти

#Область Пользователь

Функция ЗаписатьПользователя(СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных)

	ВозвращаемыйОбъект = Неопределено;

	Версия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка", Истина);
	Если Версия >= "101" Тогда
		ВозвращаемыйОбъект = ЗаписатьПользователяПоВерсии101(СтруктураДанныхОбъекта);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта);
	КонецЕсли;

	Возврат ВозвращаемыйОбъект;

КонецФункции

Функция ЗаписатьПользователяПоВерсии101(СтруктураДанныхОбъекта)

	Ссылка = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу(
		ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "ИмяТипа", "Строка", Истина), 
		ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "ID", "Строка", Истина));

	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Справочники.Пользователи.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);
	КонецЕсли;

	Объект.Наименование = 
		ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Name", "Строка");

	Объект.ДополнительныеСвойства.Вставить("Загрузка", Истина);
	Объект.Записать();

	РегистрыСведений.ДатыЗагрузкиОбъектов.ОбновитьДатуПоследнегоИзмененияОбъекта(Объект.Ссылка);

	Возврат Объект.Ссылка;

КонецФункции

#КонецОбласти

#Область Качество

Функция ЗаписатьКачество(СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных)

	ВозвращаемыйОбъект = Неопределено;

	Версия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка", Истина);
	Если Версия >= "101" Тогда
		ВозвращаемыйОбъект = ЗаписатьКачествоПоВерсии101(СтруктураДанныхОбъекта);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта);
	КонецЕсли;

	Возврат ВозвращаемыйОбъект;

КонецФункции

Функция ЗаписатьКачествоПоВерсии101(СтруктураДанныхОбъекта)

	Ссылка = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу(
		ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "ИмяТипа", "Строка", Ложь), 
		ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "ID", "Строка", Ложь));

	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Справочники.Качество.ПустаяСсылка();
	КонецЕсли;	
		
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Справочники.Качество.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);
	КонецЕсли;

	Объект.Наименование = 
		ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Name", "Строка");

	Объект.ДополнительныеСвойства.Вставить("Загрузка", Истина);
	Объект.Записать();

	РегистрыСведений.ДатыЗагрузкиОбъектов.ОбновитьДатуПоследнегоИзмененияОбъекта(Объект.Ссылка);

	Возврат Объект.Ссылка;

КонецФункции

#КонецОбласти

#Область ДоговорыКонтрагентов

Функция ЗаписатьДоговорКонтрагента(СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных)

	ВозвращаемыйОбъект = Неопределено;

	Версия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка", Истина);
	Если Версия >= "101" Тогда
		ВозвращаемыйОбъект = ЗаписатьДоговорКонтрагентаПоВерсии101(СтруктураДанныхОбъекта);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта);
	КонецЕсли;

	Возврат ВозвращаемыйОбъект;

КонецФункции

Функция ЗаписатьДоговорКонтрагентаПоВерсии101(СтруктураДанныхОбъекта)
	
	Ссылка = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу(
		ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "ИмяТипа", "Строка", Ложь), 
		ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "ID", "Строка", Ложь));
		
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;	
		
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);
		ЭтоНовыйОбъект = Истина;
	КонецЕсли;

	Объект.Код = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Code", "Строка", Ложь);
	
	Объект.Наименование = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Name", "Строка", Ложь);
	
	// Владелец
	ИдентификаторВладельца = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Owner", "Строка", Ложь);
	Если Не ЗначениеЗаполнено(ИдентификаторВладельца) Тогда
		Объект.Владелец = Справочники.Контрагенты.ПустаяСсылка();
	Иначе
		Объект.Владелец = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу("Counterparty", ИдентификаторВладельца);
	КонецЕсли;
	
	// Ситуация когда в центральной создан новый контрагент с договором,
	// но контрагент будет записан только после договора
	Если СтрНайти(СокрЛП(Объект.Владелец),"<Объект не найден>") > 0 Тогда
		Объект.Владелец = Справочники.Контрагенты.ПустаяСсылка();
		Объект.ОбменДанными.Загрузка = Истина;
	КонецЕсли;
	
	Объект.Номер = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Number", "Строка", Ложь);
	Объект.Дата = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Date", "Дата", Ложь);
	Объект.СрокДействия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "PeriodOfValidity", "Дата", Ложь);
	
	ИдентификаторВалюты = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Currency", "Строка", Ложь);
	Если (ТипЗнч(ИдентификаторВалюты) = Тип("Строка")И ИдентификаторВалюты = "NotFilled")
		ИЛИ ИдентификаторВалюты = Неопределено Тогда
		Объект.ВалютаВзаиморасчетов = Справочники.Валюты.ПустаяСсылка();
	Иначе	
		Объект.ВалютаВзаиморасчетов = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу("Currency", ИдентификаторВалюты);
	КонецЕсли;
	
	ИдентификаторТипаЦен = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "PriceType", "Строка", Ложь);
	Если (ТипЗнч(ИдентификаторТипаЦен) = Тип("Строка")И ИдентификаторТипаЦен = "NotFilled")
		ИЛИ ИдентификаторТипаЦен = Неопределено Тогда
		Объект.ТипЦен = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();
	Иначе			
		Объект.ТипЦен = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу("PriceType", ИдентификаторТипаЦен);
	КонецЕсли;
	
	ИдентификаторОрганизации = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Organization", "Строка", Ложь);
	Объект.Организация = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу("Organization", ИдентификаторОрганизации);

	Объект.ДополнительныеСвойства.Вставить("Загрузка", Истина);
	Объект.ДополнительныеСвойства.Вставить("ЭтоНовыйОбъект", ЭтоНовыйОбъект);
	Объект.Записать();
	
	РегистрыСведений.ДатыЗагрузкиОбъектов.ОбновитьДатуПоследнегоИзмененияОбъекта(Объект.Ссылка);
	
	Возврат Объект.Ссылка;

КонецФункции

#КонецОбласти

#Область Изображение

Функция ЗаписатьИзображение(СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных)

	ВозвращаемыйОбъект = Неопределено;

	Версия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка", Истина);
	Если Версия >= "101" Тогда
		ВозвращаемыйОбъект = ЗаписатьИзображениеПоВерсии101(СтруктураДанныхОбъекта);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта);
	КонецЕсли;

	Возврат ВозвращаемыйОбъект;
	
КонецФункции

Функция ЗаписатьИзображениеПоВерсии101(СтруктураДанныхОбъекта)

	ЭтоНовыйОбъект = Ложь;
	
	Ссылка = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу(
		ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "ИмяТипа", "Строка", Ложь), 
		ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "ID", "Строка", Ложь));
		
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Справочники.ХранилищеДополнительнойИнформации.ПустаяСсылка();
	КонецЕсли;	
		
	Объект = Ссылка.ПолучитьОбъект();
	
	Если Объект = Неопределено Тогда
		Объект = Справочники.ХранилищеДополнительнойИнформации.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);
		ЭтоНовыйОбъект = Истина;
	КонецЕсли;
	
	ИдентификаторВладельцаИзображения = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Object", "Строка", Ложь);
	Объект.Объект = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу("Nomenclature", ИдентификаторВладельцаИзображения);

	ДанныеКартинкиBase64 = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Storage", "Строка", Ложь);
	ДвоичныеДанныеКартинки = Base64Значение(ДанныеКартинкиBase64);
	Картинка = Новый Картинка(ДвоичныеДанныеКартинки);
	ХранилищеКартинки = Новый ХранилищеЗначения(Картинка);
	Объект.Хранилище = ХранилищеКартинки;
	
	Объект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	Объект.ОбменДанными.Получатели.Очистить();
	
	Объект.ДополнительныеСвойства.Вставить("Загрузка", Истина);
	Объект.ДополнительныеСвойства.Вставить("ЭтоНовыйОбъект", ЭтоНовыйОбъект);
	
	Объект.Записать();
	
	РегистрыСведений.ДатыЗагрузкиОбъектов.ОбновитьДатуПоследнегоИзмененияОбъекта(Объект.Ссылка);
	
	Возврат Ссылка;

КонецФункции

#КонецОбласти

#Область Организации

Функция ЗаписатьОрганизацию(СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных)

	ВозвращаемыйОбъект = Неопределено;

	Версия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка", Истина);
	Если Версия >= "101" Тогда
		ВозвращаемыйОбъект = ЗаписатьОрганизациюПоВерсии101(СтруктураДанныхОбъекта);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта);
	КонецЕсли;

	Возврат ВозвращаемыйОбъект;

КонецФункции

Функция ЗаписатьОрганизациюПоВерсии101(СтруктураДанныхОбъекта)

	Ссылка = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу(
		ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "ИмяТипа", "Строка", Ложь), 
		ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "ID", "Строка", Ложь));
		
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
		
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Справочники.Организации.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);
	КонецЕсли;

	Объект.Код = 
		ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Code", "Строка");
		
	Объект.Наименование = 
		ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Name", "Строка");

	Объект.ДополнительныеСвойства.Вставить("Загрузка", Истина);
	Объект.Записать();

	РегистрыСведений.ДатыЗагрузкиОбъектов.ОбновитьДатуПоследнегоИзмененияОбъекта(Объект.Ссылка);

	Возврат Объект.Ссылка;

КонецФункции

#КонецОбласти

#Область Заказы

Функция ЗаписатьЗаказ(СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных)

	ВозвращаемыйОбъект = Неопределено;

	Версия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка", Истина);
	Если Версия >= "101" Тогда
		ВозвращаемыйОбъект = ЗаписатьЗаказПоВерсии101(СтруктураДанныхОбъекта);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта);
	КонецЕсли;

	Возврат ВозвращаемыйОбъект;

КонецФункции

Функция ЗаписатьЗаказПоВерсии101(ДанныеОбъекта)
	
	ЗаказСсылка = Документы.Заказ.ПолучитьСсылку(
		ПолучитьЗначениеРеквизита(ДанныеОбъекта, "ID", "УникальныйИдентификатор"));
	ЗаказОбъект = ЗаказСсылка.ПолучитьОбъект();

	Если ЗаказОбъект = Неопределено Тогда
		ЗаказОбъект = Документы.Заказ.СоздатьДокумент();
		ЗаказОбъект.УстановитьСсылкуНового(ЗаказСсылка);
	КонецЕсли;
	
	ИДОтветственного = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "User", "УникальныйИдентификатор");
	ЗаказОбъект.Ответственный = Справочники.Пользователи.ПолучитьСсылку(ИДОтветственного);
	
	ЗаказОбъект.Номер = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Number", "Строка");
	ЗаказОбъект.Дата = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Date", "Дата");
	
	ИДОрганизации  = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Organization", "УникальныйИдентификатор");
	ЗаказОбъект.Организация = Справочники.Организации.ПолучитьСсылку(ИДОрганизации);
	
	ИДКонтрагента  = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Counterparty", "УникальныйИдентификатор", Ложь);
	Если ИДКонтрагента = Неопределено  Тогда
		ЗаказОбъект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	Иначе	
		ЗаказОбъект.Контрагент = Справочники.Контрагенты.ПолучитьСсылку(ИДКонтрагента);
	КонецЕсли;

	ИДДоговора  = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Contract", "УникальныйИдентификатор", Ложь);
	Если ИДДоговора = Неопределено  Тогда
		ЗаказОбъект.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	Иначе
		ЗаказОбъект.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПолучитьСсылку(ИДДоговора);
	КонецЕсли;

	ИДТипаЦен  = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "PriceType", "УникальныйИдентификатор");
	ЗаказОбъект.ТипЦен = Справочники.ТипыЦенНоменклатуры.ПолучитьСсылку(ИДТипаЦен);
	
	ИДВалютыДокумента  = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Currency", "УникальныйИдентификатор");
	ЗаказОбъект.ВалютаДокумента = Справочники.Валюты.ПолучитьСсылку(ИДВалютыДокумента);
	
	ЗаказОбъект.Комментарий = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Comment", "Строка", Ложь);
	
	// ТЧ Товары
	ЗаказОбъект.Товары.Очистить();
	ДанныеТоваров = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Products");
	Если ТипЗнч(ДанныеТоваров) = Тип("Соответствие") Тогда
	  ТаблицаТовары = Новый Массив;
	  ТаблицаТовары.Добавить(ДанныеТоваров["PRODUCTRECORD"]);
	Иначе
	  ТаблицаТовары = ДанныеТоваров; 
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ТаблицаТовары Цикл
		
		Если СтрокаТаблицы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ЗаказОбъект.Товары.Добавить();
		
		НоваяСтрока.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(
			ПолучитьЗначениеРеквизита(СтрокаТаблицы, "NOMENCLATURE", "УникальныйИдентификатор"));
			
		Если СтрокаТаблицы.Получить("CHARACTERISTIC") <> Неопределено Тогда
			НоваяСтрока.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(
				ПолучитьЗначениеРеквизита(СтрокаТаблицы, "Characteristic", "УникальныйИдентификатор"));
		КонецЕсли;
		
		НоваяСтрока.Цена = ПолучитьЗначениеРеквизита(СтрокаТаблицы, "Price", "Число");
		
		НоваяСтрока.Количество = ПолучитьЗначениеРеквизита(СтрокаТаблицы, "amount", "Число");
		
		НоваяСтрока.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.ПолучитьСсылку(
			ПолучитьЗначениеРеквизита(СтрокаТаблицы, "unit", "УникальныйИдентификатор"));
			
		НоваяСтрока.Сумма = ПолучитьЗначениеРеквизита(СтрокаТаблицы, "summa", "Число");
		
	КонецЦикла;
	
	ЗаказОбъект.Проведен = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "Posted", "Булево");
	
	ПометкаУдаления = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "DeletionMark", "Булево");
	ЗаказОбъект.ПометкаУдаления = ПометкаУдаления;  // Нужно именно так, а не ЗаказОбъект.УстановитьПометкуУдаления(ПометкаУдаления)
	
	ЗаказОбъект.ДополнительныеСвойства.Вставить("Загрузка", Истина);
	ЗаказОбъект.Записать();
	
	РегистрыСведений.ДатыЗагрузкиОбъектов.ОбновитьДатуПоследнегоИзмененияОбъекта(ЗаказОбъект.Ссылка);

	Возврат ЗаказОбъект.Ссылка;

КонецФункции

#КонецОбласти

#Область КонстантаПрефиксМобильногоКлиента

Функция ЗаписатьКонстантуПрефиксМобильногоКлиента(СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных)

	ВозвращаемыйОбъект = Неопределено;

	Версия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка", Истина);
	Если Версия >= "101" Тогда
		ВозвращаемыйОбъект = ЗаписатьКонстантуПрефиксМобильногоКлиентаПоВерсии101(СтруктураДанныхОбъекта);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта);
	КонецЕсли;

	Возврат ВозвращаемыйОбъект;
	
КонецФункции

Функция ЗаписатьКонстантуПрефиксМобильногоКлиентаПоВерсии101(СтруктураДанныхОбъекта)
		
	ПрефиксМобильногоКлиента = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Value"); 
	ОбщегоНазначенияСервер.УстановитьЗначениеКонстанты("ПрефиксМобильногоКлиента", ПрефиксМобильногоКлиента); 
	
	ОбновитьПовторноИспользуемыеЗначения();

	Возврат Константы.ПрефиксМобильногоКлиента.СоздатьМенеджерЗначения();

КонецФункции

#КонецОбласти

#Область КонстантаИспользоватьХарактеристикиНоменклатуры

Функция ЗаписатьКонстантуИспользоватьХарактеристикиНоменклатуры(СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных)

	ВозвращаемыйОбъект = Неопределено;

	Версия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка", Истина);
	Если Версия >= "101" Тогда
		ВозвращаемыйОбъект = ЗаписатьКонстантуИспользоватьХарактеристикиНоменклатурыПоВерсии101(СтруктураДанныхОбъекта);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта);
	КонецЕсли;

	Возврат ВозвращаемыйОбъект;
	
КонецФункции

Функция ЗаписатьКонстантуИспользоватьХарактеристикиНоменклатурыПоВерсии101(СтруктураДанныхОбъекта)
		
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Value"); 
	ОбщегоНазначенияСервер.УстановитьЗначениеКонстанты("ИспользоватьХарактеристикиНоменклатуры", ИспользоватьХарактеристикиНоменклатуры); 
	
	ОбновитьПовторноИспользуемыеЗначения();

	Возврат Константы.ИспользоватьХарактеристикиНоменклатуры.СоздатьМенеджерЗначения();

КонецФункции

#КонецОбласти

#Область КонстантаИспользоватьСерииНоменклатуры

Функция ЗаписатьКонстантуИспользоватьСерииНоменклатуры(СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных)

	ВозвращаемыйОбъект = Неопределено;

	Версия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка", Истина);
	Если Версия >= "101" Тогда
		ВозвращаемыйОбъект = ЗаписатьКонстантуИспользоватьСерииНоменклатурыПоВерсии101(СтруктураДанныхОбъекта);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта);
	КонецЕсли;

	Возврат ВозвращаемыйОбъект;
	
КонецФункции

Функция ЗаписатьКонстантуИспользоватьСерииНоменклатурыПоВерсии101(СтруктураДанныхОбъекта)
		
	ИспользоватьСерииНоменклатуры = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Value"); 
	ОбщегоНазначенияСервер.УстановитьЗначениеКонстанты("ИспользоватьСерииНоменклатуры", ИспользоватьСерииНоменклатуры); 
	
	ОбновитьПовторноИспользуемыеЗначения();

	Возврат Константы.ИспользоватьСерииНоменклатуры.СоздатьМенеджерЗначения();

КонецФункции

#КонецОбласти

#Область КонстантаТипЦенНоменклатурыМобильногоКлиента

Функция ЗаписатьКонстантуТипЦенНоменклатурыМобильногоКлиента(СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных)

	ВозвращаемыйОбъект = Неопределено;

	Версия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка", Истина);
	Если Версия >= "101" Тогда
		ВозвращаемыйОбъект = ЗаписатьКонстантуТипЦенНоменклатурыМобильногоКлиентаПоВерсии101(СтруктураДанныхОбъекта);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта);
	КонецЕсли;

	Возврат ВозвращаемыйОбъект;
	
КонецФункции

Функция ЗаписатьКонстантуТипЦенНоменклатурыМобильногоКлиентаПоВерсии101(СтруктураДанныхОбъекта)
		
	ДанныеТипаЦен = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "PriceType"); // Соответствие	
	ИдентификаторТипаЦен = ПолучитьЗначениеРеквизита(ДанныеТипаЦен, "ID", "Строка", Ложь);
	ТипЦен = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу("PriceType", ИдентификаторТипаЦен);
		
	ОбщегоНазначенияСервер.УстановитьЗначениеКонстанты("ТипЦенНоменклатурыМобильногоКлиента", ТипЦен); 

	ОбновитьПовторноИспользуемыеЗначения();

	Возврат Константы.ТипЦенНоменклатурыМобильногоКлиента.СоздатьМенеджерЗначения();

КонецФункции

#КонецОбласти

#Область КурсыВалют

Функция ЗаписатьКурсВалюты(СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных)

	ВозвращаемыйОбъект = Неопределено;

	Версия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка", Истина);
	Если Версия >= "101" Тогда
		ВозвращаемыйОбъект = ЗаписатьКурсВалютыПоВерсии101(СтруктураДанныхОбъекта);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта);
	КонецЕсли;

	Возврат ВозвращаемыйОбъект;

КонецФункции

Функция ЗаписатьКурсВалютыПоВерсии101(СтруктураДанныхОбъекта)

	ДанныеВалюты = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Currency"); // Соответствие
	ИдентификаторВалюты = ПолучитьЗначениеРеквизита(ДанныеВалюты, "ID","Строка", Ложь);
	Валюта = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу("Currency", ИдентификаторВалюты);

	Курс = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Rate", "Число", Ложь);
	Кратность = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Multiplicity", "Число", Ложь);
		
	Набор  = РегистрыСведений.КурсыВалют.СоздатьНаборЗаписей();
	Набор.Отбор.Валюта.Установить(Валюта);

	Если Курс = 0 Тогда
		Набор.Очистить();	
	Иначе
		Запись = Набор.Добавить();
		Запись.Валюта = Валюта;
		Запись.Курс = Курс;
		Запись.Кратность = Кратность;
	КонецЕсли;

	Набор.Записать();

	Возврат Набор;

КонецФункции

#КонецОбласти

#Область КонстантаОсновнаяОрганизацияМобильногоКлиента

Функция ЗаписатьКонстантуОсновнаяОрганизацияМобильногоКлиента(СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных)

	ВозвращаемыйОбъект = Неопределено;

	Версия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка", Истина);
	Если Версия >= "101" Тогда
		ВозвращаемыйОбъект = ЗаписатьКонстантуОсновнаяОрганизацияМобильногоКлиентаПоВерсии101(СтруктураДанныхОбъекта);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта);
	КонецЕсли;

	Возврат ВозвращаемыйОбъект;
	
КонецФункции

Функция ЗаписатьКонстантуОсновнаяОрганизацияМобильногоКлиентаПоВерсии101(СтруктураДанныхОбъекта)
	
	ДанныеОсновнаяОрганизация = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Organization"); // Соответствие	
	ИдентификаторОсновнаяОрганизация = ПолучитьЗначениеРеквизита(ДанныеОсновнаяОрганизация, "ID", "Строка", Ложь);
	ОсновнаяОрганизацияМобильногоКлиента = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу("Organization", ИдентификаторОсновнаяОрганизация);
	
	ОбщегоНазначенияСервер.УстановитьЗначениеКонстанты("ОсновнаяОрганизацияМобильногоКлиента", ОсновнаяОрганизацияМобильногоКлиента); 

	ОбновитьПовторноИспользуемыеЗначения();
	
	Возврат Константы.ОсновнаяОрганизацияМобильногоКлиента.СоздатьМенеджерЗначения();

КонецФункции

#КонецОбласти

#Область КонстантаИспользоватьПоУмолчаниюТипЦенДоговора

Функция ЗаписатьКонстантуИспользоватьПоУмолчаниюТипЦенДоговора(СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных)

	ВозвращаемыйОбъект = Неопределено;

	Версия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка", Истина);
	Если Версия >= "101" Тогда
		ВозвращаемыйОбъект = ЗаписатьКонстантуИспользоватьПоУмолчаниюТипЦенДоговораПоВерсии101(СтруктураДанныхОбъекта);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта);
	КонецЕсли;

	Возврат ВозвращаемыйОбъект;
	
КонецФункции

Функция ЗаписатьКонстантуИспользоватьПоУмолчаниюТипЦенДоговораПоВерсии101(СтруктураДанныхОбъекта)
		
	ИспользоватьПоУмолчаниюТипЦенДоговора = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Value"); 
	ОбщегоНазначенияСервер.УстановитьЗначениеКонстанты("ИспользоватьПоУмолчаниюТипЦенДоговора", ИспользоватьПоУмолчаниюТипЦенДоговора); 
	
	ОбновитьПовторноИспользуемыеЗначения();

	Возврат Константы.ИспользоватьПоУмолчаниюТипЦенДоговора.СоздатьМенеджерЗначения();

КонецФункции

#КонецОбласти

#Область КонстантаВалютаЗаказаМобильногоКлиентаПоУмолчанию

Функция ЗаписатьКонстантуВалютаЗаказаМобильногоКлиентаПоУмолчанию(СтруктураДанныхОбъекта, СведенияОЗагруженныхДанных)

	ВозвращаемыйОбъект = Неопределено;

	Версия = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Версия", "Строка", Истина);
	Если Версия >= "101" Тогда
		ВозвращаемыйОбъект = ЗаписатьКонстантуВалютаЗаказаМобильногоКлиентаПоУмолчаниюПоВерсии101(СтруктураДанныхОбъекта);
	Иначе
		СформироватьСообщениеОНеизвестнойВерсии(СтруктураДанныхОбъекта);
	КонецЕсли;

	Возврат ВозвращаемыйОбъект;
	
КонецФункции

Функция ЗаписатьКонстантуВалютаЗаказаМобильногоКлиентаПоУмолчаниюПоВерсии101(СтруктураДанныхОбъекта)
	
	ДанныеВалютаЗаказа = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Currency"); // Соответствие	
	ИдентификаторВалютаЗаказа = ПолучитьЗначениеРеквизита(ДанныеВалютаЗаказа, "ID", "Строка", Ложь);
	ВалютаЗаказа = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу("Currency", ИдентификаторВалютаЗаказа);
	
	ОбщегоНазначенияСервер.УстановитьЗначениеКонстанты("ВалютаЗаказаМобильногоКлиентаПоУмолчанию", ВалютаЗаказа); 

	ОбновитьПовторноИспользуемыеЗначения();
	
	Возврат Константы.ВалютаЗаказаМобильногоКлиентаПоУмолчанию.СоздатьМенеджерЗначения();

КонецФункции

#КонецОбласти

#КонецОбласти

