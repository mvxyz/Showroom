
#Область ПрограммныйИнтерфейс

// Получает текущую версию сервиса которая будет использоваться в сессии обмена.
// 
// Возвращаемое значение:
//  Строка - Используемая для обмена версия сервиса.
//
Функция ПолучитьВерсиюСервиса() Экспорт
	
	//Возврат "101";  
	
	// Если вызов функции не первый, то получим версию сохраненную ранее
	ВерсияСервиса = ПараметрыСеанса.ВерсияСервиса;
	Если ЗначениеЗаполнено(ВерсияСервиса) Тогда
		Возврат ВерсияСервиса;
	КонецЕсли;

	// Если вызов функции в сеансе обмена первый раз, проверяем подключались ли мы уже ранее,
	// и если да, то установим версию этого подключению в качестве используемой.
	ИспользуемаяВерсияФорматаОбмена = Константы.ИспользуемаяВерсияФорматаОбмена.Получить();
	Если ЗначениеЗаполнено(ИспользуемаяВерсияФорматаОбмена) Тогда

		ТекстИнформации = 
			СтрШаблон(
				НСтр("ru = 'Ранее использующаяся версия: %1'; en = 'Previously used version: %1'"),
				ИспользуемаяВерсияФорматаОбмена);

		РегистрыСведений.ПротоколСобытий.ДобавитьИнформацию(ТекстИнформации);

	КонецЕсли;

	РегистрыСведений.ПротоколСобытий.ДобавитьИнформацию(
		НСтр("ru = 'Начато получение версии сервиса'; en = 'Started getting version of the service'"));

	Адрес = СокрЛП(Константы.АдресЦентральнойБазы.Получить());
	Если Адрес = "" 
	 Или НРег(Адрес) = "http://" 
	 Или НРег(Адрес) = "https://" Тогда

		МоментВремени = РегистрыСведений.ПротоколСобытий.ДобавитьОшибку(
			НСтр("ru = 'Не удалось получить версию сервиса, т.к. адрес не задан'"));

		РегистрыСведений.ПротоколСобытий.УстановитьНеобходимостьОтображенияПослеСинхронизации(
			МоментВремени, Истина);

		Возврат Неопределено;

	КонецЕсли;

	Пользователь = СокрЛП(Константы.ПользовательЦентральнойБазы.Получить());
	Пароль = Константы.ПарольПользователя.Получить();
	Адрес = НормализоватьАдресПриОтсутствииПрефикса(Адрес);

	Если ОбменВызовСервераПовтИсп.ИспользоватьРасширенноеПротоколированиеОпераций() Тогда

		ТекстСообщения = 
			НСтр("ru = 'Адрес: %1
				|Пользователь: %2';
				|en = 'Addres: %1
				|User: %2'");

		ТекстСообщения = СтрШаблон(
			ТекстСообщения, Адрес, Пользователь);

		РегистрыСведений.ПротоколСобытий.ДобавитьИнформацию(ТекстСообщения);

	КонецЕсли;

	// Добавление адресов для обратной совместимости
	// Задел на будущее. Текущие адреса те же самые
	МассивАдресов = Новый Массив();
	МассивАдресов.Добавить(Адрес + "/ws/WMCVersion/WMCVersion.1cws?wsdl");   
	МассивАдресов.Добавить(Адрес + "/ws/WMCVersion?wsdl");

	// Получаем определения по списку возможных адресов
	Определения = Неопределено;

	Для Каждого АдресСервиса Из МассивАдресов Цикл

		Попытка

			Если ОбменВызовСервераПовтИсп.ИспользоватьРасширенноеПротоколированиеОпераций() Тогда
				РегистрыСведений.ПротоколСобытий.ДобавитьИнформацию(АдресСервиса);
			КонецЕсли;

			Определения = Новый WSОпределения(АдресСервиса, Пользователь, Пароль,, 60);

			Прервать;

		Исключение

			Инфо = ИнформацияОбОшибке();
			ПодробноеОписание = ПодробноеПредставлениеОшибки(Инфо);

			Если СтрНайти(ПодробноеОписание, "Аутентификация пользователя не выполнена", ) > 0 Тогда

				ОбщееОписаниеОшибки = 
					НСтр("ru = 'Неверные имя пользователя или пароль. 
						|Проверьте настройки подключения и попробуйте снова.'
						|; en = 'Connection error. Check username and password and try again'");

				ТекстОшибки = 
					РаботаСоСтрокамиКлиентСервер.СформироватьПредставлениеОшибки(
						ОбщееОписаниеОшибки, ПодробноеОписание);

				РаботаСПротоколомСобытийВызовСервера.ДобавитьОшибку(ТекстОшибки);
				
				ВызватьИсключение ТекстОшибки;

			ИначеЕсли ОбменВызовСервераПовтИсп.ИспользоватьРасширенноеПротоколированиеОпераций() Тогда

				ОбщееОписаниеОшибки = 
					НСтр("ru = 'При попытке подключения к сервису версий произошла ошибка.'
						|; en = 'An error occured while connection to version services'");

				ТекстОшибки = 
					РаботаСоСтрокамиКлиентСервер.СформироватьПредставлениеОшибки(
						ОбщееОписаниеОшибки, ПодробноеОписание);

				РаботаСПротоколомСобытийВызовСервера.ДобавитьОшибку(ТекстОшибки);

			КонецЕсли;

		КонецПопытки;

	КонецЦикла;

	Если Определения = Неопределено Тогда

		ТекстСообщения = 
			НСтр("ru = 'Не удалось подключиться к сервису версий.
				|Если используется сервер версии 1.1 и выше, то необходимо проверить настройки 
				|подключения и попробуйте подключиться снова.
				|Если используется сервер версии ниже 1.1, то необходимо обновить приложение 
				|Мобильный клиент.'");

		ТекстОшибки = 
			РаботаСоСтрокамиКлиентСервер.СформироватьПредставлениеОшибки(
				ТекстСообщения, ПодробноеОписание);

		РаботаСПротоколомСобытийВызовСервера.ДобавитьОшибку(ТекстОшибки);

		ВызватьИсключение ТекстОшибки;

	Иначе

		РаботаСПротоколомСобытийВызовСервера.ДобавитьИнформацию(
			СтрШаблон(
				НСтр("ru = 'Адрес сервиса: %1'; en = 'Server addres: %1'"), 
				АдресСервиса));

	КонецЕсли;

	URI = "http://www.wizard-c.ru/WMCVersion";

	Прокси = Новый WSПрокси(Определения, URI, "WMCVersion", "WMCVersionSoap",, 60);
	Прокси.Пользователь = Пользователь;
	Прокси.Пароль       = Пароль;

	РегистрыСведений.ПротоколСобытий.ДобавитьИнформацию(
		НСтр("ru = 'Получен прокси сервиса версий'; en = 'Defining proxy server versions'"));

	ВерсияСервера  = Прокси.GetVersion();
	ВерсияКлиента  = Константы.ПоддерживаемыеВерсииФорматаОбмена.Получить();

	ВерсииПоддерживаемыеСервером = СтрРазделить(ВерсияСервера, ",");
	ВерсииПоддерживаемыеКлиентом = СтрРазделить(ВерсияКлиента, ",");

	ТекстСообщения = 
		НСтр("ru = 'Рабочие версии сервера: %1
			|Рабочие версии клиента: %2'; 
			|en = 'Available version of the server: %1
			|available version of the client: %2'");

	РаботаСПротоколомСобытийВызовСервера.ДобавитьИнформацию(
		СтрШаблон(ТекстСообщения, ВерсияСервера,ВерсияКлиента));

	Для Счетчик = 0 По ВерсииПоддерживаемыеСервером.ВГраница() Цикл

		Индекс = ВерсииПоддерживаемыеСервером.ВГраница()-Счетчик;

		Если ВерсииПоддерживаемыеКлиентом.Найти(ВерсииПоддерживаемыеСервером[Индекс]) <> Неопределено Тогда

			// Проверим, что выбранная версия не ниже ранее использовавшейся.
			Если ЗначениеЗаполнено(ИспользуемаяВерсияФорматаОбмена) 
				И ИспользуемаяВерсияФорматаОбмена > ВерсииПоддерживаемыеСервером[Индекс] Тогда

				ТекстОшибки = 
					СтрШаблон(
						НСтр("ru = 'Ошибка при подключении.
							|Нельзя подключиться выбранной версией формата (%1), так как ранее 
							|уже было осуществлено подключение с более старшей версией (%2). 
							|Попробуйте выполнить подключение снова.'; 
							|en = 'Connection error
							|Used service version (%1) less than used previously (%2)
							|Try again leter'"),
						ВерсииПоддерживаемыеСервером[Индекс], ИспользуемаяВерсияФорматаОбмена);

				РаботаСПротоколомСобытийВызовСервера.ДобавитьИнформацию(ТекстОшибки);

				ВызватьИсключение ТекстОшибки;

			КонецЕсли;

			ПараметрыСеанса.ВерсияСервиса = ВерсииПоддерживаемыеСервером[Индекс];
			Константы.ИспользуемаяВерсияФорматаОбмена.Установить(ВерсииПоддерживаемыеСервером[Индекс]);

			Если ВерсииПоддерживаемыеСервером[Индекс] > ИспользуемаяВерсияФорматаОбмена Тогда
				РаботаСПротоколомСобытийВызовСервера.ДобавитьИнформацию(
					СтрШаблон(
						НСтр("ru = 'Используемая версия сервиса (%1) обновлена (%2)'; 
							|en = 'Used service version (%1) updated (%2)'"), 
						ИспользуемаяВерсияФорматаОбмена, ВерсииПоддерживаемыеСервером[Индекс]));
			Иначе
				РаботаСПротоколомСобытийВызовСервера.ДобавитьИнформацию(
					СтрШаблон(
						НСтр("ru = 'Используемая версия сервиса: %1'; en = 'Service version used: %1'"), 
						ВерсииПоддерживаемыеСервером[Индекс]));
			КонецЕсли;

			Возврат ВерсииПоддерживаемыеСервером[Индекс];

		КонецЕсли;

	КонецЦикла;

	ПараметрыСеанса.ВерсияСервиса = ИспользуемаяВерсияФорматаОбмена;

	ТекстИсключения = 
		СтрШаблон(
			НСтр("ru = 'Приложение не поддерживает данную версию сервера Центральной базы (%1).
				|Необходимо обновить сервер до версии или использовать клиент версии 1.1';
				|en = 'Application didn''t support these server version  (%1).
				|Update server or use mobile client version 2.1.2'"),
			ИспользуемаяВерсияФорматаОбмена);

	ВызватьИсключение ТекстИсключения;

КонецФункции

// Соединяется с web-сервисом центральной базы.
//
// Параметры:
//  СостояниеОбмена - Структура - Структура информации о текущей операции обмена с сервером.
//   * ЕстьОшибки - Булево - признак наличия ошибки в текущей операции обмена.
// 
// Возвращаемое значение:
//  Структура - Данные о используемом подключении.
//   * Прокси        - WSПрокси - Прокси подключения к серверу;
//   * ВерсияСервиса - Строка   - Используемая версия сервиса.
//
Функция ПолучитьПрокси(СостояниеОбмена) Экспорт

	РегистрыСведений.ПротоколСобытий.ДобавитьИнформацию(НСтр("ru = 'Начало получения прокси'"));

	ВерсияСервиса = ПараметрыСеанса.ВерсияСервиса;
	Если Не ЗначениеЗаполнено(ВерсияСервиса) Тогда
		ВерсияСервиса = ПолучитьВерсиюСервиса();
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ВерсияСервиса) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Адрес = СокрЛП(Константы.АдресЦентральнойБазы.Получить());
	Пользователь = СокрЛП(Константы.ПользовательЦентральнойБазы.Получить());
	Пароль = Константы.ПарольПользователя.Получить();

	// Удаляем из адреса финишный слэш - т.к. он у нас есть в описании сервиса ниже.
	// В противном случае будет ошибка при подключении.
	Если СтрЗаканчиваетсяНа(Адрес, "/") Тогда
		Адрес = Лев(Адрес, СтрДлина(Адрес)-1);
	КонецЕсли;

	Если Адрес = "" Тогда
		СостояниеОбмена.ЕстьОшибки = Истина;
		Возврат Неопределено;
	КонецЕсли;

	Если ВерсияСервиса >= "101" Тогда
		Прокси = 
			ОбменВызовСервераПовтИсп.ПолучитьПроксиДляОбменаВФорматеXML(
				ВерсияСервиса, Адрес, Пользователь, Пароль);
	КонецЕсли;
	
	РегистрыСведений.ПротоколСобытий.ДобавитьИнформацию(НСтр("ru = 'Получен прокси сервиса данных'"));

	ДанныеОПрокси = Новый Структура;
	ДанныеОПрокси.Вставить("Прокси"       , Прокси);
	ДанныеОПрокси.Вставить("ВерсияСервиса", ВерсияСервиса);

	Возврат ДанныеОПрокси;

КонецФункции

// Выполняет получение прокси для подключения в формате XML
//
// Параметры:
//  ВерсияСервиса	 - Строка - Используемая версия сервиса;
//  Адрес			 - Строка - Адрес публикации базы на сервере;
//  Пользователь	 - Строка - Имя пользователя;
//  Пароль			 - Строка - Пароль пользователя.
// 
// Возвращаемое значение:
//  WSПрокси - Прокси подключения к опубликованной базе данных.
//
Функция ПолучитьПроксиДляОбменаВФорматеXML(ВерсияСервиса, Адрес, Пользователь, Пароль) Экспорт

	Попытка

		Адрес = НормализоватьАдресПриОтсутствииПрефикса(Адрес);

		Попытка
			АдресСервиса = Адрес + "/ws/WMC?wsdl";
			Определения  = Новый WSОпределения(АдресСервиса, Пользователь, Пароль,, 120);
		Исключение
			АдресСервиса = Адрес + "/ws/WMC/WMC.1cws?wsdl";
			Определения  = Новый WSОпределения(АдресСервиса, Пользователь, Пароль,, 120);
		КонецПопытки;

		РаботаСПротоколомСобытийВызовСервера.ДобавитьИнформацию(
			СтрШаблон(
				НСтр("ru = 'Адрес сервиса: %1'; en = 'Server addres: %1'"), АдресСервиса));

	Исключение

		ТекстОшибки = СформироватьОписаниеОшибкиПриПодключении(ИнформацияОбОшибке());

		Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда

			// убираем из адреса префикс http
			ПозицияРазделителя = СтрНайти(Адрес, "/");
			АдресДляПроверки = Сред(Адрес, ПозицияРазделителя + 1);

			// ищем возможный порт
			ПозицияДвоеточия = СтрНайти(АдресДляПроверки, ":");
			ИспользуетсяПереадресацияПортов = Не ПозицияДвоеточия = 0;

			// Собираем сообщение
			ЗаголовокСообщения = НСтр("ru = 'Ошибка подключения к веб-сервису'; en = 'Connection error'");
			ТекстСообщения = 
				НСтр("ru = '1. Проверьте, что веб-сервис WMC опубликован и доступен.
					|2. Проверьте имя пользователя и пароль.'; 
					|en = '1. Check, that WMC web-service is published and available.
					|2. Chect user name and password.'");

			ТекстДополненияОПортах = "";
			Если ИспользуетсяПереадресацияПортов Тогда

				ПозицияСлешаВАдресеПослеПорта = 
					СтрНайти(АдресДляПроверки, "/",, ПозицияДвоеточия + 1);
				ИспользуемыйПорт = 
					Сред(АдресДляПроверки, 
						ПозицияДвоеточия + 1, 
						ПозицияСлешаВАдресеПослеПорта - (ПозицияДвоеточия + 1));

				ШаблонСообщения = 
					НСтр("ru = '3. Используется переадресация портов на сервере на порт %1.
						|	Администратору необходимо удостовериться, что порт сайта публикации 
						|	на веб-сервере соответствует порту адреса веб-сервера.'; 
						|en = '3. Using port forwarding on server (%1)
						|	Check that publication port on web server is port on router'");

				ТекстДополненияОПортах = 
					СтрШаблон(
						ШаблонСообщения, ИспользуемыйПорт);

			КонецЕсли;

			ТекстОшибки = СтрШаблон(
				НСтр("ru = '%1%2%1%3'; en = '%1%2%1%3'"),
				Символы.ПС, ТекстСообщения, ТекстДополненияОПортах);

			ТекстОшибки = 
				РаботаСоСтрокамиКлиентСервер.СформироватьПредставлениеОшибки(
					ЗаголовокСообщения, ТекстОшибки);

		КонецЕсли;

		ВызватьИсключение ТекстОшибки;

	КонецПопытки;

	Константы.АдресВебСервиса.Установить(АдресСервиса);

	Прокси = Новый WSПрокси(
		Определения, "http://www.wizard-c.ru/WMC", "WMC", "WMCSoap", , 120);
	Прокси.Пользователь = Пользователь;
	Прокси.Пароль       = Пароль;

	Возврат Прокси;

КонецФункции

// Возвращает флаг использования расширенного протокола.
// 
// Возвращаемое значение:
//  Булево - Признак использования подробного протоколирования операций.
//
Функция ИспользоватьРасширенноеПротоколированиеОпераций() Экспорт

	Возврат Константы.ВестиПодробныйПротокол.Получить();

КонецФункции

// Получает узел обмена, на котором регистрируются изменения данных для отправки на сервер.
// 
// Возвращаемое значение:
//  ПланыОбменаСсылка.ОбменССервером - Ссылка на узле регистрации данных для обмена.
//
Функция ПолучитьЦентральныйУзелОбмена() Экспорт

	ЦентральныйУзелОбмена = ПланыОбмена.ОбменССервером.НайтиПоКоду(Константы.КодУстройства.Получить());

	Если ЦентральныйУзелОбмена.Пустая() Тогда

		НовыйУзел = ПланыОбмена.ОбменССервером.СоздатьУзел();
		НовыйУзел.Код          = Константы.КодУстройства.Получить();
		НовыйУзел.Наименование = НСтр("ru = 'Центральный'; en = 'General'");
		НовыйУзел.Записать();

		ЦентральныйУзелОбмена = НовыйУзел.Ссылка;

	КонецЕсли;

	Возврат ЦентральныйУзелОбмена;

КонецФункции

// Получает представление типа объекта для выгрузки
//
// Параметры:
//  ЭлементДанных - ДокументСсылка.ВходящееПисьмо - Выгружаемый элемент данных.
// 
// Возвращаемое значение:
//  Строка - тип объекта строкой подготовленный к выгрузке.
//
Функция ПолучитьПредставлениеТипаПоСсылке(ЭлементДанных) Экспорт

	Если ТипЗнч(ЭлементДанных) = Тип("СправочникСсылка.Номенклатура") Тогда
		Тип = "Nomenclature";
		
	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("СправочникСсылка.ВидыНоменклатуры") Тогда
		Тип = "ViewNomenclature";
		
	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("ПеречислениеСсылка.ТипыНоменклатуры") Тогда
		Тип = "TypeNomenclature";
		
	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
		Тип = "unit";
	
	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("СправочникСсылка.Контрагенты") Тогда
		Тип = "Counterparty";
		
	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("ПеречислениеСсылка.ЮрФизЛицо") Тогда
		Тип = "UrFizLico";
		
	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
		Тип = "Characteristic";
		
	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("СправочникСсылка.ТипыЦенНоменклатуры") Тогда
		Тип = "PriceType";
		
	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("СправочникСсылка.Валюты") Тогда
		Тип = "Currency";
		
	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("ДокументСсылка.Заказ") Тогда
		Тип = "Order";
		
	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("СправочникСсылка.ХранилищеДополнительнойИнформации") Тогда
		Тип = "Picture";

	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("СправочникСсылка.Организации") Тогда
		Тип = "Organization";
	
	КонецЕсли;

	Возврат Тип;

КонецФункции

// Получает ссылку из БД по указанному представлению типа и УИД.
//
// Параметры:
//  ТипЗначения   - Строка - Представление типа;
//  Идентификатор - УникальныйИдентификатор - УникальныйИдентификатор объекта;
// 
// Возвращаемое значение:
//  Ссылка - Ссылка на объект.
//
Функция ПолучитьСсылкуПоТипу(ТипЗначения, Идентификатор) Экспорт

	Если Не ЗначениеЗаполнено(ТипЗначения) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если Идентификатор = УникальныйИдентификаторПустой() 
		Или Идентификатор = Неопределено 
		Или Идентификатор = "" 
		Или Идентификатор = "NotFilled"	Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Идентификатор) = Тип("Строка") Тогда
		Идентификатор = Новый УникальныйИдентификатор(Идентификатор);
	КонецЕсли;

	Если СтрСравнить(ТипЗначения, "Nomenclature") = 0 Тогда
		Возврат Справочники.Номенклатура.ПолучитьСсылку(Идентификатор);
		
	ИначеЕсли СтрСравнить(ТипЗначения, "ViewNomenclature") = 0 Тогда
		Возврат Справочники.ВидыНоменклатуры.ПолучитьСсылку(Идентификатор);
		
	ИначеЕсли СтрСравнить(ТипЗначения, "TypeNomenclature") = 0 Тогда
		Возврат ПолучитьСсылкуНаЗначениеПеречисления("ТипыНоменклатуры", Идентификатор);
		
	ИначеЕсли СтрСравнить(ТипЗначения, "unit") = 0 Тогда
		Возврат Справочники.ЕдиницыИзмерения.ПолучитьСсылку(Идентификатор);
		
	ИначеЕсли СтрСравнить(ТипЗначения, "Counterparty") = 0 Тогда
		Возврат Справочники.Контрагенты.ПолучитьСсылку(Идентификатор);
	
	ИначеЕсли СтрСравнить(ТипЗначения, "UrFizLico") = 0 Тогда
		Возврат ПолучитьСсылкуНаЗначениеПеречисления("ЮрФизЛицо", Идентификатор);
		
	ИначеЕсли СтрСравнить(ТипЗначения, "Characteristic") = 0 Тогда
		Возврат Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Идентификатор);
		
	ИначеЕсли СтрСравнить(ТипЗначения, "PriceType") = 0 Тогда
		Возврат Справочники.ТипыЦенНоменклатуры.ПолучитьСсылку(Идентификатор);
		
	ИначеЕсли СтрСравнить(ТипЗначения, "Currency") = 0 Тогда
		Возврат Справочники.Валюты.ПолучитьСсылку(Идентификатор);
		
	ИначеЕсли СтрСравнить(ТипЗначения, "Stock") = 0 Тогда
		Возврат Справочники.Склады.ПолучитьСсылку(Идентификатор);
		
	ИначеЕсли СтрСравнить(ТипЗначения, "Series") = 0 Тогда
		Возврат Справочники.СерииНоменклатуры.ПолучитьСсылку(Идентификатор);
		
	ИначеЕсли СтрСравнить(ТипЗначения, "User") = 0 Тогда
		Возврат Справочники.Пользователи.ПолучитьСсылку(Идентификатор);
		
	ИначеЕсли СтрСравнить(ТипЗначения, "Quality") = 0 Тогда
		Возврат Справочники.Качество.ПолучитьСсылку(Идентификатор);
		
	ИначеЕсли СтрСравнить(ТипЗначения, "Contract") = 0 Тогда
		Возврат Справочники.ДоговорыКонтрагентов.ПолучитьСсылку(Идентификатор);
		
	ИначеЕсли СтрСравнить(ТипЗначения, "Order") = 0 Тогда
		Возврат Документы.Заказ.ПолучитьСсылку(Идентификатор);
		
	ИначеЕсли СтрСравнить(ТипЗначения, "Picture") = 0 Тогда
		Возврат Справочники.ХранилищеДополнительнойИнформации.ПолучитьСсылку(Идентификатор);
		
	ИначеЕсли СтрСравнить(ТипЗначения, "Organization") = 0 Тогда
		Возврат Справочники.Организации.ПолучитьСсылку(Идентификатор);
	
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

// Получает строковое представление типа события протокола для обмена.
//
// Параметры:
//  Значение - Перечисления.ТипыСобытийПротокола - Тип события протокола.
// 
// Возвращаемое значение:
//  Строка - Строковый идентификатор перечисления для обмена.
//
Функция ПолучитьПредставлениеТипаСобытияПротокола(Значение) Экспорт

	Если Значение = Перечисления.ТипыСобытийПротокола.Предупреждение Тогда
		Представление = "Warning";

	ИначеЕсли Значение = Перечисления.ТипыСобытийПротокола.Ошибка Тогда
		Представление = "Error";

	Иначе
		Представление = "Information";

	КонецЕсли;

	Возврат Представление;

КонецФункции

// Получает представление типа номенклатуры
//
// Параметры:
//  ТипНоменклатуры	 - Перечисления.ТипыНоменклатуры - Ссылка на значение перечисления.
// 
// Возвращаемое значение:
//  Строка - Идентификатор перечисления для обмена.
//
Функция ПолучитьПредставлениеТипаНоменклатуры(ТипНоменклатуры) Экспорт

	Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Тогда
		Представление = "product";

	ИначеЕсли ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
		Представление = "service";

	ИначеЕсли ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор Тогда
		Представление = "set";

	ИначеЕсли ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Комплект Тогда
		Представление = "kit";
	
	Иначе
		Представление = "product";

	КонецЕсли;

	Возврат Представление;

КонецФункции

// Получает тип номенклатуры по ее представлению
//
// Параметры:
//  Представление - Строка - Идентификатор перечисления в обмене.
// 
// Возвращаемое значение:
//  Перечисления.ТипыНоменклатуры - Значение перечисления полученное по идентификатору.
//
Функция ПолучитьТипНоменклатурыПоПредставлению(Представление) Экспорт

	Если СтрСравнить(Представление, "product") = 0 Тогда
		ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;

	ИначеЕсли СтрСравнить(Представление, "service") = 0 Тогда
		ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга;

	ИначеЕсли СтрСравнить(Представление, "set") = 0 Тогда
		ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор;

	ИначеЕсли СтрСравнить(Представление, "kit") = 0 Тогда
		ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Комплект;
	
	Иначе
		ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;

	КонецЕсли;

	Возврат ТипНоменклатуры;

КонецФункции

// Получает представление типа ЮрФизЛица
//
// Параметры:
//  ЮрФизЛица	 - Перечисления.ЮрФизЛица - Ссылка на значение перечисления.
// 
// Возвращаемое значение:
//  Строка - Идентификатор перечисления для обмена.
//
Функция ПолучитьПредставлениеЮрФизЛица(ЮрФизЛицо) Экспорт

	Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		Представление = "UrLico";

	ИначеЕсли ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		Представление = "FizLico";

	Иначе
		Представление = "UrLico";

	КонецЕсли;

	Возврат Представление;

КонецФункции

// Получает значение ЮрФизЛицо по представлению
//
// Параметры:
//  Представление - Строка - Идентификатор перечисления в обмене.
// 
// Возвращаемое значение:
//  Перечисления.ЮрФизЛицо - Значение перечисления полученное по идентификатору.
//
Функция ПолучитьЮрФизЛицоПоПредставлению(Представление) Экспорт

	Если СтрСравнить(Представление, "UrLico") = 0 Тогда
		ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;

	ИначеЕсли СтрСравнить(Представление, "FizLico") = 0 Тогда
		ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;

	Иначе
		ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;

	КонецЕсли;

	Возврат ЮрФизЛицо;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает ПеречисленияСсылка по "Имени" перечисления и "Имени" значения
// Пример пИмяПеречисления = "ЮрФизЛицо", пИмяЗначения = "ЮрЛицо",
// результат: Перечисление ссылка на ЮрФизЛицо.ЮрЛицо
// пИмяПеречисления - тип строка
// пИмяЗначения - тип строка
Функция ПолучитьСсылкуНаЗначениеПеречисления(пИмяПеречисления, пИмяЗначения) Экспорт
	
	Попытка
		
		Возврат Перечисления[пИмяПеречисления][пИмяЗначения];
		
	Исключение
		
        ТекстСообщения = "Ошибка получения ссылки на значение перечисления. " + пИмяПеречисления + " :: " + пИмяЗначения;
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции 

// Проверяет наличие префикса http или https и подставляет http в адрес если их нет
//
// Параметры:
//  Адрес	 - Строка - Адрес подключения к серверу.
// 
// Возвращаемое значение:
//  Строка - нормализованный адрес подключения.
//
Функция НормализоватьАдресПриОтсутствииПрефикса(Адрес)

	АдресДляПроверки = НРег(Адрес);
	Если СтрНайти(АдресДляПроверки, "http://") = 0 
		И СтрНайти(АдресДляПроверки, "https://") = 0 Тогда
		Возврат "http://" + Адрес;
	Иначе
		Возврат Адрес;
	КонецЕсли;

КонецФункции

// Формирует расширенное описание ошибки возникшей при подключении.
//
// Параметры:
//  Инфо - ИнформацияОбОшибке - Полученная информация об ошибке во время обмена.
// 
// Возвращаемое значение:
//  Строка - расширенное описание ошибки.
//
Функция СформироватьОписаниеОшибкиПриПодключении(Инфо)

	ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(Инфо);

	Если СтрНайти(ПодробноеПредставлениеОшибки, "Аутентификация пользователя не выполнена") > 0 Тогда

		ОбщееОписаниеОшибки = 
			НСтр("ru = '<b>Не удалось подключиться. Аутентификация пользователя не выполнена.
				|Проверьте имя пользователя и пароль и повторите попытку.</b>'
				|; en = '<b>Can''t connect to server. User authentication failed.
				|Check user name and password and try again later</b>'");

		ТекстОшибки = 
			РаботаСоСтрокамиКлиентСервер.СформироватьПредставлениеОшибки(
				ОбщееОписаниеОшибки, ПодробноеПредставлениеОшибки);

	ИначеЕсли ЗначениеЗаполнено(Константы.ДатаПоследнегоОбновления.Получить()) Тогда

		ОбщееОписаниеОшибки = 
			НСтр("ru = '<b>Не удалось подключиться.
				|Проверьте интернет-соединение и повторите попытку</b>'
				|; en = '<b>Can''t connect to server
				|Check internet connection and try again later</b>'");

		ТекстОшибки = 
			РаботаСоСтрокамиКлиентСервер.СформироватьПредставлениеОшибки(
				ОбщееОписаниеОшибки, ПодробноеПредставлениеОшибки);

	ИначеЕсли СтрНайти(Инфо.Причина.Описание, "Код ответа сервера: ") > 0 Тогда

		ТекстСообщения = НСтр("ru = 'Код ответа сервера: '");
		Позиция   = СтрНайти(Инфо.Причина.Описание, ТекстСообщения) + СтрДлина(ТекстСообщения);
		КодОшибки = Сред(Инфо.Причина.Описание, Позиция, 3);

		Если КодОшибки = "403" Тогда
			ТекстОписанияКодаОшибки = 
				НСтр("ru = '403 Доступ запрещен. Проверьте адрес сервера, имя пользователя и пароль';
					 |en = '403 Forbidden. Check server address, user name and password'");

		ИначеЕсли КодОшибки = "404" Тогда
			ТекстОписанияКодаОшибки = 
				НСтр("ru = '404 Сервер не найден. Проверьте адрес сервера ';
					| en = '404 Server not found. Check server address'");

		ИначеЕсли КодОшибки = "409" Тогда
			ТекстОписанияКодаОшибки = 
				НСтр("ru = '409 Конфликт. Проверьте адрес сервера ';
					| en = '409 Conflict. Check server address'");

		ИначеЕсли КодОшибки = "500" Тогда
			ТекстОписанияКодаОшибки =
				НСтр("ru = '500 Внутренняя ошибка сервера. Попробуйте позже или обратитесь к администратору'; 
					 |en = '500 Internal server error. Try again later or contact the administrator'");

		ИначеЕсли КодОшибки = "503" Тогда
			ТекстОписанияКодаОшибки =
				НСтр("ru = '503 Сервис временно недоступен. Попробуйте позже или обратитесь к администратору'; 
					 |en = '503 Service Temporarily Unavailable. Try again later or contact the administrator'");

		Иначе
			ТекстОписанияКодаОшибки = 
				СтрШаблон(
					НСтр("ru = 'Сервер вернул код ошибки: %1'; en = 'Server return error code: %1'"),
					КодОшибки);
		КонецЕсли;

		ОбщееОписаниеОшибки = 
			НСтр("ru = '<b>Не удалось подключиться.</b>'; en = '<b>Can''t connect to server</b>'");

		ТекстОшибки = 
			РаботаСоСтрокамиКлиентСервер.СформироватьПредставлениеОшибки(
				ОбщееОписаниеОшибки, ПодробноеПредставлениеОшибки, ТекстОписанияКодаОшибки);

	Иначе
		ОбщееОписаниеОшибки = 
			НСтр("ru = '<b>Не удалось подключиться.</b>
				|1. Убедитесь, что правильно ввели адрес, логин и пароль.
				|2. Уточните у администратора, что на сервере включено использование мобильных клиентов.
				|3. Уточните у администратора наличие доступа к Центральной базе через web.
				|4. Уточните у администратора, что используемый сервер присутствует в списке разрешенных к использованию.
				|5. Уточните у администратора, что пользователю разрешено использование мобильных клиентов.
				|6. Проверьте, что работает интернет-соединение.
				|'; en = '<b>Can''t connect to server</b>
				|1. Check server addres, user name and password.
				|2. Check with administrator what mobile support on server is enabled
				|3. Check with administrator that servers have access to web
				|4. Check with administrator what specified server present in allow list for current user.
				|5. Check with administrator what specified user is allowed to use mobile clients.
				|6. Check internet connection.'");

		ТекстОшибки = 
			РаботаСоСтрокамиКлиентСервер.СформироватьПредставлениеОшибки(
				ОбщееОписаниеОшибки, ПодробноеПредставлениеОшибки, ТекстОписанияКодаОшибки);

	КонецЕсли;

	МоментВремени = РегистрыСведений.ПротоколСобытий.ДобавитьОшибку(ТекстОшибки);
	РегистрыСведений.ПротоколСобытий.УстановитьНеобходимостьОтображенияПослеСинхронизации(МоментВремени, Истина);

	Возврат ТекстОшибки;

КонецФункции 

#КонецОбласти