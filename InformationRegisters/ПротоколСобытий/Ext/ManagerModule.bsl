
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Добавляет событие в протокол событий
//
// Параметры:
//  Описание	 - Строка	 - Описание события;
//  ТипСобытия	 - Строка	 - Тип события.
// 
// Возвращаемое значение:
//  Число - Момент времени записи события по объекту.
//
Функция Добавить(Описание, ТипСобытия) Экспорт

	МенеджерЗаписиРегистра = РегистрыСведений.ПротоколСобытий.СоздатьМенеджерЗаписи();

	МенеджерЗаписиРегистра.Период        = ТекущаяДата();
	МенеджерЗаписиРегистра.МоментВремени = ТекущаяУниверсальнаяДатаВМиллисекундах();
	МенеджерЗаписиРегистра.ТипСобытия    = ТипСобытия;
	МенеджерЗаписиРегистра.Описание      = СокрЛП(Описание);

	МенеджерЗаписиРегистра.Записать();

	Возврат МенеджерЗаписиРегистра.МоментВремени;

КонецФункции

// Добавляет запись по указанному объекту данных в протокол
//
// Параметры:
//  Описание			 - Строка - Описание события;
//  ТипСобытия			 - Строка - Тип события 
//  ТипОбъекта			 - Строка - Строковое представление типа объекта;
//  ИдентификаторОбъекта - Строка - Идентификатор объекта.
// 
// Возвращаемое значение:
//  Число - Момент времени записи события по объекту.
//
Функция ДобавитьПоОбъекту(
	Описание,
	ТипСобытия,
	ТипОбъекта,
	ИдентификаторОбъекта) Экспорт

	Если Не ЗначениеЗаполнено(Описание) Тогда
		Возврат 0;
	КонецЕсли;

	МенеджерЗаписиРегистра = РегистрыСведений.ПротоколСобытий.СоздатьМенеджерЗаписи();
	МенеджерЗаписиРегистра.Период        = ТекущаяДата();
	МенеджерЗаписиРегистра.МоментВремени = ТекущаяУниверсальнаяДатаВМиллисекундах();

	МенеджерЗаписиРегистра.ИдентификаторОбъекта = ИдентификаторОбъекта;
	МенеджерЗаписиРегистра.Описание      = СокрЛП(Описание);
	МенеджерЗаписиРегистра.ТипСобытия    = ТипСобытия;
	МенеджерЗаписиРегистра.ТипОбъекта    = ТипОбъекта;

	МенеджерЗаписиРегистра.НеобходимоОтобразитьПослеСинхронизации = Ложь;

	МенеджерЗаписиРегистра.Записать();

	Возврат МенеджерЗаписиРегистра.МоментВремени;

КонецФункции

// Добавляет событие типа Информация в протокол событий
//
// Параметры:
//  Описание - Строка - Текст ошибки.
// 
// Возвращаемое значение:
//  Число - Момент времени записи предупреждения.
//
Функция ДобавитьИнформацию(Описание) Экспорт

	Возврат Добавить(Описание, Перечисления.ТипыСобытийПротокола.Информация);

КонецФункции

// Добавляет события типа Информация по указанному объекту данных в протокол событий.
//
// Параметры:
//  Описание			 - Строка - Текст информации;
//  ТипОбъекта			 - Строка - Строковое представление типа объекта;
//  ИдентификаторОбъекта - Строка - Идентификатор объекта.
// 
// Возвращаемое значение:
//  Число - Момент времени записи события по объекту.
//
Функция ДобавитьИнформациюПоОбъекту(Описание, ТипОбъекта, ИдентификаторОбъекта) Экспорт

	Возврат ДобавитьПоОбъекту(
		Описание,
		Перечисления.ТипыСобытийПротокола.Информация,
		ТипОбъекта,
		ИдентификаторОбъекта);

КонецФункции

// Добавляет событие типа Предупреждение в протокол событий
//
// Параметры:
//  Описание - Строка - Текст ошибки.
// 
// Возвращаемое значение:
//  Число - Момент времени записи предупреждения.
//
Функция ДобавитьПредупреждение(Описание) Экспорт

	Возврат Добавить(Описание, Перечисления.ТипыСобытийПротокола.Предупреждение);

КонецФункции

// Добавляет событие типа Ошибка в протокол событий
//
// Параметры:
//  Описание - Строка - Текст ошибки.
// 
// Возвращаемое значение:
//  Число - Момент времени записи сообщения об ошибке.
//
Функция ДобавитьОшибку(Описание) Экспорт

	Возврат Добавить(Описание, Перечисления.ТипыСобытийПротокола.Ошибка);

КонецФункции

// Устанавливает в протоколе событий у записи признак того, что запись необходимо показать
// пользователю после завершения процесса синхронизации.
//
// Параметры:
//  МоментВремени - Число - Дата в миллисекундах, для которой нужно получить описание события.
//  Необходимость - Булево - Признак необходимости отображения сообщения;
//
Процедура УстановитьНеобходимостьОтображенияПослеСинхронизации(МоментВремени, Необходимость) Экспорт

	НаборЗаписейРегистра = РегистрыСведений.ПротоколСобытий.СоздатьНаборЗаписей();
	НаборЗаписейРегистра.Отбор.МоментВремени.Установить(МоментВремени);
	НаборЗаписейРегистра.Прочитать();

	Для Каждого Запись Из НаборЗаписейРегистра Цикл
		Запись.НеобходимоОтобразитьПослеСинхронизации = Необходимость;
	КонецЦикла;

	НаборЗаписейРегистра.Записать();

КонецПроцедуры

// Получает описание события 
//
// Параметры:
//  МоментВремени - Число - Дата в миллисекундах, для которой нужно получить описание события.
//
// Возвращаемое значение:
//  Описание     - есть описание, на указанный момент времени;
//  Неопределено - нет описания.
// 
Функция ПолучитьОписаниеСобытияПоМоментуВремени(МоментВремени) Экспорт

	СтруктураОтбора = Новый Структура("МоментВремени", МоментВремени);

	Выборка = РегистрыСведений.ПротоколСобытий.Выбрать(,,СтруктураОтбора);
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Описание;
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Возвращает признак наличия ошибки в указанной сессии обмена с сервером.
//
// Параметры:
//  НомерСессии	 - Число - номер сессии обмена с сервером.
// 
// Возвращаемое значение:
//  Булево - Истина, если в указанной сессии есть ошибки.
//
Функция ЕстьОшибкиВСессииОбмена(НомерСессии = Неопределено) Экспорт

	Выборка = РегистрыСведений.ПротоколСобытий.Выбрать(
				ТекущаяДата() - 7 * 24 * 60 * 60,,, 
				"МоментВремени Убыв");

	Пока Выборка.Следующий() Цикл

		Если Выборка.СессияСинхронизации = НомерСессии
		   И Выборка.НеобходимоОтобразитьПослеСинхронизации Тогда

			Возврат Истина;

		КонецЕсли;

	КонецЦикла;
	
	Возврат Ложь;

КонецФункции

#КонецОбласти

#КонецЕсли
